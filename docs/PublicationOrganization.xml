<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<publication>
   <title>MPLABÂ® Harmony 3 USB Library</title>
   <urls>
      <url>
         <loc>GUID-D9F90103-F97D-468D-90FC-EA3E186842D9.html</loc>
         <lastmod>2024-03-08T05:05:17</lastmod>
         <title>1 Release Information</title>
         <description>Topics Name Description Release ContentsThis topic lists the contents of this release and identifies each ...</description>
         <urls>
            <url>
               <loc>GUID-778FA1A8-E737-4ECA-8E96-B87FD441853C.html</loc>
               <lastmod>2024-06-27T09:52:19</lastmod>
               <title>1.1 Release Contents</title>
               <description>This table lists the contents of the USB v3.14.0 release, including a brief description. USB Middleware Module Description USB Device StackThe USB Device Libraries offer comprehensive support for ...</description>
               <urls/>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-61902145-0FA6-4DE3-845C-B14852166EAE.html</loc>
         <lastmod>2024-04-16T10:24:30</lastmod>
         <title>2 USB Device Libraries</title>
         <description>Topics Name Description USB Device Library - Getting StartedThis section offers essential information to help users get started with the USB Device Library. USB Device Layer LibraryThis section ...</description>
         <urls>
            <url>
               <loc>GUID-11BEDBBA-7CB2-44C2-9A3A-BAF21121881C.html</loc>
               <lastmod>2024-03-19T13:19:52</lastmod>
               <title>2.1 USB Device Library - Getting Started</title>
               <description>Topics Name Description IntroductionProvides an introduction to the MPLAB Harmony USB Device Library.USB Device Library Architecture Describes the USB Device Library Architecture. USB Device Library ...</description>
               <urls>
                  <url>
                     <loc>GUID-5F089FEF-3F08-44EB-A3FE-378C619A63C1.html</loc>
                     <lastmod>2024-03-19T13:20:25</lastmod>
                     <title>2.1.1 Introduction</title>
                     <description>The MPLAB Harmony USB Device Library (referred to as the USB Device Library) provides embedded application developers with a framework for designing and developing a wide variety of USB devices. A ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-931A26BD-8E6E-4839-853D-3F7C2F06C777.html</loc>
                     <lastmod>2024-03-19T13:22:22</lastmod>
                     <title>2.1.2 USB Device Library Architecture</title>
                     <description>The USB Device Library features a modular and layered architecture, as illustrated in the following figure.USB Device Library ArchitectureAs seen in the figure, the USB Device Library consists of the ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-B046D8FA-A89D-4E97-BA06-BE58F428984E.html</loc>
                     <lastmod>2024-03-21T02:55:28</lastmod>
                     <title>2.1.3 USB Device Library - Application Interaction</title>
                     <description>Additional information on USB demonstration application projects is available in the USB Demonstrations section. The following figure outlines the steps necessary for the application to utilize the ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-41AC4493-27F0-48EC-8E5D-DE64FA04FE3C.html</loc>
                     <lastmod>2024-03-21T02:53:22</lastmod>
                     <title>2.1.4 Creating Your Own USB Device</title>
                     <description>The initial step in creating a USB device involves determining whether the desired device function aligns with any standard USB device class functions. Utilizing standard USB classes can be ...</description>
                     <urls/>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-E31828BD-445D-4B5C-A518-308C752ED467.html</loc>
               <lastmod>2024-03-06T08:18:39</lastmod>
               <title>2.2 USB Device Layer Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony 3 USB Device Layer Library. Using the LibraryThis topic describes the basic architecture of the USB Device Layer Library and provides ...</description>
               <urls>
                  <url>
                     <loc>GUID-3A4B2EB7-3D64-489D-A63A-03238AED2A6D.html</loc>
                     <lastmod>2024-03-21T04:43:17</lastmod>
                     <title>2.2.1 Introduction</title>
                     <description>The MPLAB Harmony 3 USB Device Layer Library (also referred to as the Device Layer) is part of the MPLAB Harmony 3 USB Device Stack. Within the USB Device Stack, the Device Layer implementation is ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-32EFE984-6A14-4D79-BBB6-83799F3A4655.html</loc>
                     <lastmod>2024-03-19T13:25:26</lastmod>
                     <title>2.2.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB Device Layer Library and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the Abstraction Model ...</description>
                     <urls>
                        <url>
                           <loc>GUID-2C38F616-136C-47E7-AB09-31277B0B4C9E.html</loc>
                           <lastmod>2024-03-19T13:26:36</lastmod>
                           <title>2.2.2.1 Abstraction Model</title>
                           <description>The Device Layer in the MPLAB Harmony USB Device Stack handles enumeration requests from the USB Host and provides an abstracted access to Control Transfers and Non-Control Endpoint Management. The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-48BA7078-5F59-4C32-8BCF-509CF1DEFF38.html</loc>
                           <lastmod>2024-03-19T13:27:04</lastmod>
                           <title>2.2.2.2 Library Overview</title>
                           <description>The Device Layer Library provides API routines which allow the Harmony System module, function driver and the user application to interact with it. The library interface routines can be classified as ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7C4AB689-679A-4E6E-AB24-DA8B00579A45.html</loc>
                           <lastmod>2024-02-08T06:24:11</lastmod>
                           <title>2.2.2.3 How the Library Works</title>
                           <description>This topic describes the operation of the Device Layer. Topics Name Description Library InitializationDescribes how the USB Device Layer must be initialized. Application Client InteractionDescribes ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-F709F734-A625-48AC-A271-9B440A07C59D.html</loc>
                                 <lastmod>2024-03-19T13:27:43</lastmod>
                                 <title>2.2.2.3.1 Library Initialization</title>
                                 <description>The Device Layer initialization process requires the following components:USB Standard Descriptors that define the device functionality. The definitions of these descriptors are defined by the USB ...</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-04A2FBC0-ED60-4A1F-977E-E46E977B17E3.html</loc>
                                       <lastmod>2024-03-19T13:28:21</lastmod>
                                       <title>2.2.2.3.1.1 Master Descriptor Table</title>
                                       <description>As seen in the figure, the Device Master Descriptor Table (specified by the USB_DEVICE_MASTER_DESCRIPTOR data type) is a container for all descriptor related information that is needed by the Device ...</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-8483ECDF-04F9-4788-BC0B-DE0DE20302A3.html</loc>
                                       <lastmod>2024-02-08T09:30:31</lastmod>
                                       <title>2.2.2.3.1.2 Function Driver Registration Table</title>
                                       <description>he Function Driver Registration Table (defined by the USB_DEVICE_FUNCTION_REGISTRATION_TABLE data type) contains information about the function drivers that are present in the application. The Device ...</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-5EBF0A03-3CC9-46D4-9363-784114CF5FB5.html</loc>
                                       <lastmod>2024-02-08T06:24:27</lastmod>
                                       <title>2.2.2.3.1.3 Initializing the Device Layer</title>
                                       <description>With the USB Device Master Descriptor and the Function Driver Registration Table available, the application can now create the Device Layer Initialization Data structure. This data structure is a ...</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-44D462C2-23B0-428C-ADA0-0DB9E12D8A44.html</loc>
                                       <lastmod>2024-02-08T06:24:31</lastmod>
                                       <title>2.2.2.3.1.4 Device Layer Task Routines</title>
                                       <description>A call to the USB_DEVICE_Tasks() function should be placed in the SYS_Tasks() function. This will ensure that this function is called periodically. The USB_DEVICE_Tasks() function in turn calls the ...</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-E4E39D2B-80F8-4D07-8A79-2BF4F6DE131B.html</loc>
                                 <lastmod>2024-02-08T06:24:39</lastmod>
                                 <title>2.2.2.3.2 Application Client Interaction</title>
                                 <description>Once initialized, Device Layer becomes ready for operation. The application must open the Device Layer by calling the USB_DEVICE_Open() function. Opening the Device Layer makes the application a ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-1FD6E7EF-2527-4E6C-A584-05C4F5B196D9.html</loc>
                                 <lastmod>2024-03-19T13:30:37</lastmod>
                                 <title>2.2.2.3.3 Event Handling</title>
                                 <description>The Device Layer generates events to let the application client know about the state of the bus. Some of these events require the application to respond in a specific manner. Not doing so, could ...</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-E5B72EEF-1399-4B84-B909-7FC928E6EACF.html</loc>
                                       <lastmod>2024-03-19T13:31:37</lastmod>
                                       <title>2.2.2.3.3.1 Device Layer Control Transfers.</title>
                                       <description>The Device Layer forwards control transfer setup packets to the application, where the Recipient field in the Setup packet is set to "Other". The pData parameter of the event handler will point to ...</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-8FBF940F-C38A-4E91-93C6-FDBCB95863FD.html</loc>
                                 <lastmod>2024-03-19T13:32:56</lastmod>
                                 <title>2.2.2.3.4 String Descriptor Table</title>
                                 <description>The Device Layer allows the application to specify string descriptors via a String Descriptor Table. When the USB Host requests for a string by its index and language ID, the Device Layer looks for ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-C8AD4EE3-9561-4DB1-A9B2-210F43EB5400.html</loc>
                                 <lastmod>2024-02-14T05:42:17</lastmod>
                                 <title>2.2.2.3.5 BOS Descriptor Support</title>
                                 <description>The USB 3.0 and the USB 2.0 LPM specifications define a new descriptor called the Binary Device Object Store (BOS) descriptor. This descriptor contains information about the capability of the device. ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-E2535528-8B5B-44A0-BAAD-F7B12D24C2A6.html</loc>
                                 <lastmod>2024-03-19T13:33:47</lastmod>
                                 <title>2.2.2.3.6 Microsoft OS Descriptor Support</title>
                                 <description>Microsoft provides a set of proprietary device classes and USB descriptors, which are called Microsoft OS Descriptors (MODs). The MPLAB Harmony USB Device Library allows the application to support ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-4B21589A-A675-47AC-9B19-92E41A8A6F15.html</loc>
                     <lastmod>2024-03-19T13:07:34</lastmod>
                     <title>2.2.3 Configuring the Library</title>
                     <description>The USB Device Layer initializes and configures the USB Controller Driver ( the driver that manages the USB peripheral when operating as device) and maintains its task routine. For completeness, the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-09CA5B76-5C4F-4153-8CA3-5E5D4CDF1D47.html</loc>
                           <lastmod>2024-01-24T10:52:36</lastmod>
                           <title>2.2.3.1 USB_DEVICE_INSTANCES_NUMBER Macro</title>
                           <description>Number of Device Layer Instances. This configuration macro defines the number of Device Layer instances in the application. In cases of microcontrollers that feature multiple USB peripherals, this ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-89B69937-6F27-440F-9191-0FED8C345AE8.html</loc>
                           <lastmod>2024-03-19T13:36:51</lastmod>
                           <title>2.2.3.2 USB_DEVICE_ENDPOINT_QUEUE_DEPTH_COMBINED Macro</title>
                           <description>C #define USB_DEVICE_ENDPOINT_QUEUE_DEPTH_COMBINED 2 Summary This configuration constant specifies the combined endpoint queue depth in a case where the endpoint read and endpoint write functions are ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-188DBB00-8F2C-434E-B6C7-304B82AF17CC.html</loc>
                           <lastmod>2024-03-20T07:26:02</lastmod>
                           <title>2.2.3.3 USB_DEVICE_SET_DESCRIPTOR_EVENT_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_SET_DESCRIPTOR_EVENT_ENABLE Summary Specifying this configuration macro will cause the USB Device Layer to generate the USB_DEVICE_EVENT_SET_DESCRIPTOR event when a Set ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B17A9DB8-4247-4568-A06F-D7582807B474.html</loc>
                           <lastmod>2024-03-20T07:25:58</lastmod>
                           <title>2.2.3.4 USB_DEVICE_SOF_EVENT_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_SOF_EVENT_ENABLE Summary USB Device Layer SOF Event Enable Specifying this configuration macro will cause the USB Device Layer to generate the USB_DEVICE_EVENT_SOF event. On Full ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-48C413D6-875B-4870-88F6-4CB89CC0C7B2.html</loc>
                           <lastmod>2024-03-20T07:26:44</lastmod>
                           <title>2.2.3.5 USB_DEVICE_SYNCH_FRAME_EVENT_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_SYNCH_FRAME_EVENT_ENABLE Summary USB Device Layer Synch Frame Event Enable Specifying this configuration macro will cause the USB Device Layer to generate the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9D4A7F19-3488-4FC3-98A2-53970B28DB6C.html</loc>
                           <lastmod>2024-03-20T07:27:13</lastmod>
                           <title>2.2.3.6 USB_DEVICE_BOS_DESCRIPTOR_SUPPORT_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_BOS_DESCRIPTOR_SUPPORT_ENABLE Summary Specifying this configuration macro will enable support for BOS request. When the request is received, the device layer will transfer the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4049B919-5211-4938-9841-EF2427B77E6E.html</loc>
                           <lastmod>2024-03-20T07:27:26</lastmod>
                           <title>2.2.3.7 USB_DEVICE_DRIVER_INITIALIZE_EXPLICIT Macro</title>
                           <description>C #define USB_DEVICE_DRIVER_INITIALIZE_EXPLICIT Summary USB Device Layer USB Controller Driver Explicit Initialize Specifying this macro indicates that the USB Controller Driver will be initialized ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1C862FD6-CFD4-4406-BA35-C7142AF783CF.html</loc>
                           <lastmod>2024-03-20T07:28:13</lastmod>
                           <title>2.2.3.8 USB_DEVICE_EP0_BUFFER_SIZE Macro</title>
                           <description>C #define USB_DEVICE_EP0_BUFFER_SIZE Summary Endpoint 0 Buffer Size This number defines the size (in bytes) of Endpoint 0. For High Speed USB Devices, this number should be 64. For Full Speed USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4930DA36-0CA7-432E-8EB8-6A88359E38EB.html</loc>
                           <lastmod>2024-03-20T07:28:29</lastmod>
                           <title>2.2.3.9 USB_DEVICE_STRING_DESCRIPTOR_TABLE_ADVANCED_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_STRING_DESCRIPTOR_TABLE_ADVANCED_ENABLE Summary USB Device Layer Advanced String Descriptor Table Entry Format Enable. Specifying this macro enables the Advanced String ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-648ABB28-76D6-4700-B73D-58DD9EBF1767.html</loc>
                           <lastmod>2024-03-20T07:28:38</lastmod>
                           <title>2.2.3.10 USB_DEVICE_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_TRANSFER_HANDLE_INVALID Summary USB Device Layer Invalid Endpoint Data Transfer Handle This constant defines the value that is returned by the USB_DEVICE_EndpointRead() and ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3B0AF865-0A5B-4174-AE06-A5C99D1B3296.html</loc>
                           <lastmod>2024-03-28T06:53:20</lastmod>
                           <title>2.2.3.11 Configuration On MCC</title>
                           <description>Number of Endpoints Symbol name:-CONFIG_USB_DEVICE_ENDPOINTS_NUMBER This symbol signifies the total number of endpoints utilized by this instance of the device layer. USB Controller instance Symbol ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-4BB29F09-6B11-4B48-9803-838F5EA6273F.html</loc>
                     <lastmod>2024-03-20T07:34:21</lastmod>
                     <title>2.2.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Device Layer Library. Refer to each section for a detailed description.a) System Interaction FunctionsName ...</description>
                     <urls>
                        <url>
                           <loc>GUID-42DB173A-594E-4260-B239-0F403618EEB4.html</loc>
                           <lastmod>2024-03-20T07:36:51</lastmod>
                           <title>2.2.4.1 USB_DEVICE_Initialize Function</title>
                           <description>C SYS_MODULE_OBJ USB_DEVICE_Initialize( const SYS_MODULE_INDEX instanceIndex, const SYS_MODULE_INIT * const init ); Summary This function initializes an instance of USB device layer, making it ready ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AA70BD97-C8FC-44CD-93C8-8BFC8D1E5537.html</loc>
                           <lastmod>2024-03-21T06:05:06</lastmod>
                           <title>2.2.4.2 USB_DEVICE_Deinitialize Function</title>
                           <description>C void USB_DEVICE_Deinitialize( SYS_MODULE_OBJ usbDeviceObj ); Summary This function deinitializes the specified instance of the USB device layer, disabling its operation (and any hardware) and ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1F4F909E-F1A1-4329-A208-094D04D15AD7.html</loc>
                           <lastmod>2024-03-20T07:37:45</lastmod>
                           <title>2.2.4.3 USB_DEVICE_Status Function</title>
                           <description>C SYS_STATUS USB_DEVICE_Status( SYS_MODULE_OBJ object ); Summary This function provides the current status of the USB device layer. Precondition The USB_DEVICE_Initialize function must have been ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-026002E3-1512-453B-9DB3-142568F0A729.html</loc>
                           <lastmod>2024-03-21T06:06:31</lastmod>
                           <title>2.2.4.4 USB_DEVICE_Tasks Function</title>
                           <description>C void USB_DEVICE_Tasks( SYS_MODULE_OBJ devLayerObj ); Summary This function must be periodically called by the user application. The USB Device layer calls all other function driver tasks in this ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AF93B648-027D-406E-AFA2-FB8D77C727C5.html</loc>
                           <lastmod>2024-03-20T07:38:37</lastmod>
                           <title>2.2.4.5 USB_DEVICE_Open Function</title>
                           <description>C USB_DEVICE_HANDLE USB_DEVICE_Open( const SYS_MODULE_INDEX instanceIndex, const DRV_IO_INTENT intent ); Summary This function opens the USB device layer instance specified by instance index and ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5DDC83AF-434A-413D-9D57-A2281BB530E3.html</loc>
                           <lastmod>2024-03-21T06:08:55</lastmod>
                           <title>2.2.4.6 USB_DEVICE_Close Function</title>
                           <description>C void USB_DEVICE_Close( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function closes an opened handle to an instance of the USB device layer, invalidating the handle. Precondition The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-09788A69-5EFD-472C-B27A-A62205651AC6.html</loc>
                           <lastmod>2024-03-20T07:39:01</lastmod>
                           <title>2.2.4.7 USB_DEVICE_ClientStatusGet Function</title>
                           <description>C USB_DEVICE_CLIENT_STATUS USB_DEVICE_ClientStatusGet( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function returns the status of the client (ready or closed). The application can use this ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9F27D5FE-6BBD-496E-9E47-EA58D22F1063.html</loc>
                           <lastmod>2024-03-20T07:39:45</lastmod>
                           <title>2.2.4.8 USB_DEVICE_EventHandlerSet Function</title>
                           <description>C void USB_DEVICE_EventHandlerSet( USB_DEVICE_HANDLE usbDeviceHandle, const USB_DEVICE_EVENT_HANDLER callBackFunc, uintptr_t context ); Summary This is the USB Device Layer Event Handler Callback Set ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CC73A5CA-F1B8-410C-A32D-824BD2F93E99.html</loc>
                           <lastmod>2024-03-20T07:40:43</lastmod>
                           <title>2.2.4.9 USB_DEVICE_PowerStateSet Function</title>
                           <description>C void USB_DEVICE_PowerStateSet( USB_DEVICE_HANDLE usbDeviceHandle, USB_DEVICE_POWER_STATE powerState ); Summary Application clients can use this function to set the power state of the device. A USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B0847A5E-CB8C-4772-A73C-F166ACC7B48D.html</loc>
                           <lastmod>2024-03-20T07:41:13</lastmod>
                           <title>2.2.4.10 USB_DEVICE_RemoteWakeupStatusGet Function</title>
                           <description>C USB_DEVICE_REMOTE_WAKEUP_STATUS USB_DEVICE_RemoteWakeupStatusGet( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function returns the present "Remote Wake-up" status of the device. If the device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3F527D1C-72D7-481C-A1F3-21C30E3796A7.html</loc>
                           <lastmod>2024-03-21T06:11:45</lastmod>
                           <title>2.2.4.11 USB_DEVICE_IsSuspended Function</title>
                           <description>C bool USB_DEVICE_IsSuspended( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function returns true is the device is presently in suspended state. The application can use this function in ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1E0163FD-65E2-4E02-9F38-C93E65381DAC.html</loc>
                           <lastmod>2024-03-20T07:42:47</lastmod>
                           <title>2.2.4.12 USB_DEVICE_RemoteWakeupStart Function</title>
                           <description>C void USB_DEVICE_RemoteWakeupStart( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function will start the resume signaling on the bus. The client calls this function after it has detected a idle ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4E9F43BB-809D-47C1-B606-9431285B16B7.html</loc>
                           <lastmod>2024-03-20T07:42:10</lastmod>
                           <title>2.2.4.13 USB_DEVICE_RemoteWakeupStartTimed Function</title>
                           <description>C void USB_DEVICE_RemoteWakeupStartTimed( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function will start a self timed Remote Wake-up sequence. The function will cause the device to generate ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-37777BFE-26D9-45EB-B965-F3927314C1AF.html</loc>
                           <lastmod>2024-03-20T07:41:56</lastmod>
                           <title>2.2.4.14 USB_DEVICE_RemoteWakeupStop Function</title>
                           <description>C void USB_DEVICE_RemoteWakeupStop( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function will stop the resume signaling. This function should be called after the client has called the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7A6CEAFC-BC69-45F3-B535-2BC83EEE7936.html</loc>
                           <lastmod>2024-03-20T07:43:48</lastmod>
                           <title>2.2.4.15 USB_DEVICE_StateGet Function</title>
                           <description>C USB_DEVICE_STATE USB_DEVICE_StateGet( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function returns the current state of the USB device, as described in Chapter 9 of the USB 2.0 Specification. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6A6AFEC4-1E57-4336-962A-A5BD7B06800D.html</loc>
                           <lastmod>2024-03-20T07:44:01</lastmod>
                           <title>2.2.4.16 USB_DEVICE_Attach Function</title>
                           <description>C void USB_DEVICE_Attach( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function will attach the device to the USB. It does this by enabling the pull up resistors on the D+ or D- lines. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B3C1F16C-006F-4C50-BAB0-8C40C5BD9DFC.html</loc>
                           <lastmod>2024-03-20T07:44:15</lastmod>
                           <title>2.2.4.17 USB_DEVICE_Detach Function</title>
                           <description>C void USB_DEVICE_Detach( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function will detach the device from the USB. It does this by disabling the pull up resistors on the D+ or D- lines. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5DCD3AD4-D53B-4838-8CB9-DDD7863F9282.html</loc>
                           <lastmod>2024-03-20T07:44:50</lastmod>
                           <title>2.2.4.18 USB_DEVICE_ActiveConfigurationGet Function</title>
                           <description>C uint8_t USB_DEVICE_ActiveConfigurationGet( USB_DEVICE_HANDLE usbDeviceHandle ); Summary This function returns the current active USB device configuration. Precondition The USB Device Layer must ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CE1C0446-8192-4BDA-8FBF-CBA35EF9A537.html</loc>
                           <lastmod>2024-03-20T07:45:06</lastmod>
                           <title>2.2.4.19 USB_DEVICE_ActiveSpeedGet Function</title>
                           <description>C USB_SPEED USB_DEVICE_ActiveSpeedGet( USB_DEVICE_HANDLE usbDeviceHandle ); Summary The USB device stack supports both high speed and full speed operations. This function returns the current ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4AAA38D2-B882-4995-8E19-26F2F6526382.html</loc>
                           <lastmod>2024-03-20T07:45:16</lastmod>
                           <title>2.2.4.20 USB_DEVICE_EndpointIsStalled Function</title>
                           <description>C bool USB_DEVICE_EndpointIsStalled( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint ); Summary This function returns the stall status of the specified endpoint and direction. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5FAF63C0-C5D9-418D-8BFB-0BE3880DAB6D.html</loc>
                           <lastmod>2024-03-20T07:48:31</lastmod>
                           <title>2.2.4.21 USB_DEVICE_EndpointStall Function</title>
                           <description>C void USB_DEVICE_EndpointStall( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint ); Summary This function stalls an endpoint in the specified direction. Precondition Client handle ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-21215E93-D13D-4279-94A7-C64A621FBEC9.html</loc>
                           <lastmod>2024-03-20T07:48:41</lastmod>
                           <title>2.2.4.22 USB_DEVICE_EndpointStallClear Function</title>
                           <description>C void USB_DEVICE_EndpointStallClear( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint ); Summary This function clear the stall on an endpoint in the specified direction. Precondition ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B431D80B-A6D9-4A0E-9A2C-5029CF57B695.html</loc>
                           <lastmod>2024-03-20T07:48:53</lastmod>
                           <title>2.2.4.23 USB_DEVICE_EndpointDisable Function</title>
                           <description>C USB_DEVICE_RESULT USB_DEVICE_EndpointDisable( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint ); Summary This function disables a device endpoint. The application may need to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9D6D78F0-05D0-46D0-861F-00C3925A464E.html</loc>
                           <lastmod>2024-03-20T07:49:47</lastmod>
                           <title>2.2.4.24 USB_DEVICE_EndpointEnable Function</title>
                           <description>C USB_DEVICE_RESULT USB_DEVICE_EndpointEnable( USB_DEVICE_HANDLE usbDeviceHandle, uint8_t interface, USB_ENDPOINT_ADDRESS endpoint, USB_TRANSFER_TYPE transferType, size_t size ); Summary This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FFA77933-6289-4777-BEDD-B01F76A2E17C.html</loc>
                           <lastmod>2024-03-20T07:50:01</lastmod>
                           <title>2.2.4.25 USB_DEVICE_EndpointIsEnabled Function</title>
                           <description>C bool USB_DEVICE_EndpointIsEnabled( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint ); Summary This function returns true if the endpoint is enabled. The application can use this ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A6917620-D363-4F8B-BE8B-A5C73D0CAC92.html</loc>
                           <lastmod>2024-03-21T06:17:48</lastmod>
                           <title>2.2.4.26 USB_DEVICE_EndpointRead Function</title>
                           <description>C USB_DEVICE_RESULT USB_DEVICE_EndpointRead( USB_DEVICE_HANDLE usbDeviceHandle, USB_DEVICE_TRANSFER_HANDLE * transferHandle, USB_ENDPOINT_ADDRESS endpoint, void * buffer, size_t bufferSize ); Summary ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-175342C9-FA7C-4593-94F9-C89DE52B042B.html</loc>
                           <lastmod>2024-03-21T06:21:46</lastmod>
                           <title>2.2.4.27 USB_DEVICE_EndpointTransferCancel Function</title>
                           <description>C USB_DEVICE_RESULT USB_DEVICE_EndpointTransferCancel( USB_DEVICE_HANDLE usbDeviceHandle, USB_ENDPOINT_ADDRESS endpoint, USB_DEVICE_TRANSFER_HANDLE transferHandle ); Summary This function cancels a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C06A61D8-DD79-4494-BA2B-026D72B441E4.html</loc>
                           <lastmod>2024-03-21T06:36:46</lastmod>
                           <title>2.2.4.28 USB_DEVICE_EndpointWrite Function</title>
                           <description>C USB_DEVICE_RESULT USB_DEVICE_EndpointWrite( USB_DEVICE_HANDLE usbDeviceHandle, USB_DEVICE_TRANSFER_HANDLE * transferHandle, USB_ENDPOINT_ADDRESS endpoint, const void * data, size_t size, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-33991F1C-C31B-413E-BD6B-29A870E556B5.html</loc>
                           <lastmod>2024-03-20T07:52:20</lastmod>
                           <title>2.2.4.29 USB_DEVICE_ControlReceive Function</title>
                           <description>C USB_DEVICE_CONTROL_TRANSFER_RESULT USB_DEVICE_ControlReceive( USB_DEVICE_HANDLE usbDeviceHandle, void * data, size_t length ); Summary This function allows the application to specify the data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-85F7260B-F498-4865-A1A6-0FB2C1EA5AD0.html</loc>
                           <lastmod>2024-03-20T07:52:37</lastmod>
                           <title>2.2.4.30 USB_DEVICE_ControlSend Function</title>
                           <description>C USB_DEVICE_CONTROL_TRANSFER_RESULT USB_DEVICE_ControlSend( USB_DEVICE_HANDLE usbDeviceHandle, void * data, size_t length ); Summary This function allows the application to specify the data that ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-34243A48-7930-4EBD-9E40-AF31631C2B9F.html</loc>
                           <lastmod>2024-03-20T07:53:21</lastmod>
                           <title>2.2.4.31 USB_DEVICE_ControlStatus Function</title>
                           <description>C USB_DEVICE_CONTROL_TRANSFER_RESULT USB_DEVICE_ControlStatus( USB_DEVICE_HANDLE usbDeviceHandle, USB_DEVICE_CONTROL_STATUS status ); Summary This function allows the application to complete the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C50530CB-18BC-4F61-BB35-6F0F639AC2B4.html</loc>
                           <lastmod>2024-03-20T07:54:01</lastmod>
                           <title>2.2.4.32 USB_DEVICE_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_EVENT_RESET, USB_DEVICE_EVENT_SUSPENDED, USB_DEVICE_EVENT_RESUMED, USB_DEVICE_EVENT_ERROR, USB_DEVICE_EVENT_SOF, USB_DEVICE_EVENT_CONFIGURED, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1EEC43C6-2FBF-421C-92A7-82BD58AF9BA2.html</loc>
                           <lastmod>2024-03-20T07:54:07</lastmod>
                           <title>2.2.4.33 USB_DEVICE_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_HANDLE; Summary The data type of the handle that is returned from USB_DEVICE_Open </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FF03D042-3B90-4D38-90B4-42680E5AC6A0.html</loc>
                           <lastmod>2024-03-20T07:54:21</lastmod>
                           <title>2.2.4.34 USB_DEVICE_CONTROL_STATUS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CONTROL_STATUS_OK, USB_DEVICE_CONTROL_STATUS_ERROR } USB_DEVICE_CONTROL_STATUS; Summary Control Transfer Status Stage Flags This enumeration defines the flags to be used ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-65144B20-2F8A-4EE7-880F-535D65DFD14F.html</loc>
                           <lastmod>2024-03-20T07:55:01</lastmod>
                           <title>2.2.4.35 USB_DEVICE_CONTROL_TRANSFER_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CONTROL_TRANSFER_RESULT_FAILED, USB_DEVICE_CONTROL_TRANSFER_RESULT_SUCCESS } USB_DEVICE_CONTROL_TRANSFER_RESULT; Summary USB Device Layer Control Transfer Result ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-11E5640E-918E-4C57-9E08-AFE10F5E34B1.html</loc>
                           <lastmod>2024-03-20T07:57:38</lastmod>
                           <title>2.2.4.36 USB_DEVICE_INIT Structure</title>
                           <description>C typedef struct { SYS_MODULE_INIT moduleInit; unsigned int usbID; bool stopInIdle; bool suspendInSleep; INT_SOURCE interruptSource; INT_SOURCE interruptSourceUSBDma; void * endpointTable; uint16_t ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-47335C2A-B871-4281-A3AC-4ED02419F70A.html</loc>
                           <lastmod>2024-03-20T07:57:00</lastmod>
                           <title>2.2.4.37 USB_DEVICE_POWER_STATE Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_POWER_STATE_BUS_POWERED, USB_DEVICE_POWER_STATE_SELF_POWERED } USB_DEVICE_POWER_STATE; Summary Device Power state This enumeration defines the possible power states of the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E1297AC1-1E2A-41D1-A6E5-8496A175C7A2.html</loc>
                           <lastmod>2024-03-20T07:57:11</lastmod>
                           <title>2.2.4.38 USB_DEVICE_REMOTE_WAKEUP_STATUS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_REMOTE_WAKEUP_DISABLED, USB_DEVICE_REMOTE_WAKEUP_ENABLED } USB_DEVICE_REMOTE_WAKEUP_STATUS; Summary Remote Wakeup Status This enumeration defines the possible status of ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0032352D-8F51-4458-8AE7-C3792DA79278.html</loc>
                           <lastmod>2024-03-20T07:58:04</lastmod>
                           <title>2.2.4.39 USB_DEVICE_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_HANDLE_INVALID Summary USB Device Layer Invalid Handle This constant is returned by the USB_DEVICE_Open() function when the function fails. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A8DB74C8-76DF-4E8E-A171-205902614019.html</loc>
                           <lastmod>2024-03-20T07:58:14</lastmod>
                           <title>2.2.4.40 USB_DEVICE_INDEX_0 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_0 0 Summary USB Device Layer Index Numbers These constants provide USB device layer index definitions. Remarks These constants should be used in place of hard-coded numeric ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-39435299-E3CA-49AC-95B3-94CB80C2362F.html</loc>
                           <lastmod>2024-03-20T07:58:20</lastmod>
                           <title>2.2.4.41 USB_DEVICE_INDEX_1 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_1 1 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-625AC5C7-B526-4570-946B-365CD2B3AAE6.html</loc>
                           <lastmod>2024-03-20T07:58:25</lastmod>
                           <title>2.2.4.42 USB_DEVICE_INDEX_2 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_2 2 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2ED5595A-36AE-4B6A-82B6-FAFA1DC93F49.html</loc>
                           <lastmod>2024-03-20T07:58:53</lastmod>
                           <title>2.2.4.43 USB_DEVICE_INDEX_3 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_3 3 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4880BE38-33A9-4852-9614-3E773CE6ECF2.html</loc>
                           <lastmod>2024-03-20T07:58:59</lastmod>
                           <title>2.2.4.44 USB_DEVICE_INDEX_4 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_4 4 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A06A076C-C559-49DF-AE5A-D60018892603.html</loc>
                           <lastmod>2024-03-20T07:59:04</lastmod>
                           <title>2.2.4.45 USB_DEVICE_INDEX_5 Macro</title>
                           <description>C #define USB_DEVICE_INDEX_5 5 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9A9875DA-E9B5-4598-81D0-D5C0298C1D93.html</loc>
                           <lastmod>2024-03-20T07:59:15</lastmod>
                           <title>2.2.4.46 USB_DEVICE_CLIENT_STATUS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CLIENT_STATUS_CLOSED, USB_DEVICE_CLIENT_STATUS_READY } USB_DEVICE_CLIENT_STATUS; Summary USB Device Layer Client Status This enumeration defines the possible status of the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-836AA0E3-5F55-4FA7-BEE6-0B4482CC5E5C.html</loc>
                           <lastmod>2024-03-20T07:59:45</lastmod>
                           <title>2.2.4.47 USB_DEVICE_CONFIGURATION_DESCRIPTORS_TABLE Type</title>
                           <description>C typedef const uint8_t * const USB_DEVICE_CONFIGURATION_DESCRIPTORS_TABLE; Summary Configuration descriptors pointer This type defines a pointer to an array that contains pointers to configuration ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D1223373-0CDF-4492-936D-96D15D15D7D9.html</loc>
                           <lastmod>2024-03-20T07:59:54</lastmod>
                           <title>2.2.4.48 USB_DEVICE_EVENT_DATA_CONFIGURED Structure</title>
                           <description>C typedef struct { uint8_t configurationValue; } USB_DEVICE_EVENT_DATA_CONFIGURED; Summary USB Device Set Configuration Event Data type. This data type defines the type of data that is returned by ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-11D0E1AF-EE2B-43C5-9156-F2A3310E8944.html</loc>
                           <lastmod>2024-03-20T08:00:05</lastmod>
                           <title>2.2.4.49 USB_DEVICE_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_EVENT_RESPONSE (* USB_DEVICE_EVENT_HANDLER)(USB_DEVICE_EVENT event, void * eventData, uintptr_t context); Description USB Device Layer Event Handler Function Pointer Type This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BDA72028-8996-412C-818F-2A5470B4453B.html</loc>
                           <lastmod>2024-03-20T08:00:11</lastmod>
                           <title>2.2.4.50 USB_DEVICE_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_EVENT_RESPONSE; Summary Device Layer Event Handler function return type. This data type defines the return type of the Device Layer event handler ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-72DE434F-3A79-4912-8ED6-630B8BFB18C7.html</loc>
                           <lastmod>2024-03-20T08:00:47</lastmod>
                           <title>2.2.4.51 USB_DEVICE_FUNCTION_REGISTRATION_TABLE Structure</title>
                           <description>C typedef struct { USB_SPEED speed; uint8_t configurationValue; uint8_t interfaceNumber; uint8_t numberOfInterfaces; uintptr_t funcDriverIndex; void * funcDriverInit; void * driver; } ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6EA5F6A9-3AF9-4DF7-9759-6D5092728BD1.html</loc>
                           <lastmod>2024-03-20T08:01:24</lastmod>
                           <title>2.2.4.52 USB_DEVICE_MASTER_DESCRIPTOR Structure</title>
                           <description>C typedef struct { const USB_DEVICE_DESCRIPTOR * deviceDescriptor; uint8_t configDescriptorCount; USB_DEVICE_CONFIGURATION_DESCRIPTORS_TABLE * configDescriptorTable; const USB_DEVICE_DESCRIPTOR * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FAE65402-1196-47DF-8E40-78F99D413B2F.html</loc>
                           <lastmod>2024-03-20T08:01:34</lastmod>
                           <title>2.2.4.53 USB_DEVICE_STRING_DESCRIPTORS_TABLE Type</title>
                           <description>C typedef const uint8_t * const USB_DEVICE_STRING_DESCRIPTORS_TABLE; Summary String Descriptors Pointer This type defines a pointer to an array that contains pointers to string descriptors. This data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-03EB2AD1-463E-4931-B839-4EE92AD58B56.html</loc>
                           <lastmod>2024-03-20T08:01:42</lastmod>
                           <title>2.2.4.54 USB_DEVICE_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_EVENT_RESPONSE_NONE Summary Device Layer Event Handler Function Response Type None. This is the definition of the Device Layer Event Handler Response Type None. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1453CF41-66D6-413B-AF48-FBEDFC11DC56.html</loc>
                           <lastmod>2024-03-20T08:02:16</lastmod>
                           <title>2.2.4.55 USB_DEVICE_EVENT_DATA_ENDPOINT_READ_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_TRANSFER_HANDLE transferHandle; size_t length; USB_DEVICE_RESULT status; } USB_DEVICE_EVENT_DATA_ENDPOINT_READ_COMPLETE, USB_DEVICE_EVENT_DATA_ENDPOINT_WRITE_COMPLETE; ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BD15696D-5562-4682-9638-95F867E968F9.html</loc>
                           <lastmod>2024-03-20T08:02:26</lastmod>
                           <title>2.2.4.56 USB_DEVICE_EVENT_DATA_ENDPOINT_WRITE_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_TRANSFER_HANDLE transferHandle; size_t length; USB_DEVICE_RESULT status; } USB_DEVICE_EVENT_DATA_ENDPOINT_READ_COMPLETE, USB_DEVICE_EVENT_DATA_ENDPOINT_WRITE_COMPLETE; ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-25787307-BA06-492A-B7DE-EC70A10C2535.html</loc>
                           <lastmod>2024-03-20T08:02:35</lastmod>
                           <title>2.2.4.57 USB_DEVICE_EVENT_DATA_SOF Structure</title>
                           <description>C typedef struct { uint16_t frameNumber; } USB_DEVICE_EVENT_DATA_SOF; Summary USB Device Start Of Frame Event Data Type This data type defines the type of data that is returned by the Device Layer ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DA72F1EE-65C0-4C6F-9947-A3DD1873284E.html</loc>
                           <lastmod>2024-03-20T08:02:45</lastmod>
                           <title>2.2.4.58 USB_DEVICE_EVENT_DATA_SYNCH_FRAME Structure</title>
                           <description>C typedef struct { USB_ENDPOINT_ADDRESS endpoint; } USB_DEVICE_EVENT_DATA_SYNCH_FRAME; Summary USB Device Synch Frame Event Data type. This data type defines the type of data that is returned by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C918530B-CC58-42F6-9ECE-CBF4D989E71A.html</loc>
                           <lastmod>2024-03-20T08:03:31</lastmod>
                           <title>2.2.4.59 USB_DEVICE_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_RESULT_ERROR_TRANSFER_QUEUE_FULL, USB_DEVICE_RESULT_OK, USB_DEVICE_RESULT_ERROR_ENDPOINT_NOT_CONFIGURED, USB_DEVICE_RESULT_ERROR_ENDPOINT_INVALID, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5734306D-CE15-4220-9D4F-FC8F40231386.html</loc>
                           <lastmod>2024-03-20T08:03:47</lastmod>
                           <title>2.2.4.60 USB_DEVICE_TRANSFER_FLAGS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_TRANSFER_FLAGS_DATA_COMPLETE, USB_DEVICE_TRANSFER_FLAGS_MORE_DATA_PENDING } USB_DEVICE_TRANSFER_FLAGS; Summary USB Device Layer Transfer Flags This enumeration defines the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BA4256E8-6D0D-42DD-99F3-3ACF7780C24D.html</loc>
                           <lastmod>2024-03-20T08:03:58</lastmod>
                           <title>2.2.4.61 USB_DEVICE_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_TRANSFER_HANDLE; Summary Data type for USB Device Endpoint Data Transfer Handle. The data type of the handle that is returned by the USB_DEVICE_EndpointRead() and ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3FCD6362-B3DF-485F-930D-7C8549DFF4BB.html</loc>
                           <lastmod>2024-03-20T08:03:14</lastmod>
                           <title>2.2.4.62 USB_DEVICE_MICROSOFT_OS_DESCRIPTOR_SUPPORT_ENABLE Macro</title>
                           <description>C #define USB_DEVICE_MICROSOFT_OS_DESCRIPTOR_SUPPORT_ENABLE Summary USB Device Layer Microsoft OS Descriptor Support Enable This macro needs to be defined to enable Microsoft OS descriptor support. ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-EB096C4D-2129-43B4-B8B3-5DE1D640CFB8.html</loc>
                     <lastmod>2024-03-20T08:04:25</lastmod>
                     <title>2.2.5 Files</title>
                     <description>Files This section lists the source and header files used by the library. Files Name Description usb_device.h USB Device Layer Interface Header usb_device_config_template.h USB device configuration ...</description>
                     <urls>
                        <url>
                           <loc>GUID-9573E03E-FBF1-473A-AD65-F76685B2A9AA.html</loc>
                           <lastmod>2024-03-20T08:06:04</lastmod>
                           <title>2.2.5.1 usb_device.h</title>
                           <description>File Name usb_device.h Description USB Device Layer Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make up the interface ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F5BDDB52-AB9F-4A18-B20D-039CD5DF51EC.html</loc>
                           <lastmod>2024-02-08T09:33:52</lastmod>
                           <title>2.2.5.2 usb_device_config_template.h</title>
                           <description>File Name usb_device_config_template.h Description USB Device Layer Compile Time Options This file contains USB device layer compile time options (macros) that are to be configured by the user. This ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-79B0676D-688A-498D-86C5-0386E1CECD24.html</loc>
               <lastmod>2024-03-06T08:23:30</lastmod>
               <title>2.3 USB Audio 1.0 Device Library</title>
               <description>Topics Name Description IntroductionThis section provides information on library design, configuration, usage and the library interface for the USB Audio 1.0 Device Library. Using the LibraryThis ...</description>
               <urls>
                  <url>
                     <loc>GUID-C574C75C-2FEF-4025-96CF-90A7E9F4C2BC.html</loc>
                     <lastmod>2024-02-08T13:17:59</lastmod>
                     <title>2.3.1 Introduction</title>
                     <description>The MPLAB Harmony USB Audio 1.0 Device Library (also referred to as the Audio 1.0 Function Driver or library) features routines to implement a USB Audio 1.0 Device. Examples of Audio USB Devices ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-22271CA8-8926-4949-85E7-D6CA65086DD2.html</loc>
                     <lastmod>2024-03-06T10:14:32</lastmod>
                     <title>2.3.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the Audio 1.0 Function Driver and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the Abstraction Model ...</description>
                     <urls>
                        <url>
                           <loc>GUID-126247DD-CDE5-4F8F-B316-FB752612C143.html</loc>
                           <lastmod>2024-03-20T08:08:58</lastmod>
                           <title>2.3.2.1 Abstraction Model</title>
                           <description>The Audio 1.0 Function Driver offers various services to the USB Audio 1.0 device to communicate with the host by abstracting USB specification details. It must be used along with the USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7772A184-2044-4397-8215-1F5A681B8E93.html</loc>
                           <lastmod>2024-03-20T08:09:16</lastmod>
                           <title>2.3.2.2 Library Overview</title>
                           <description>The USB Audio 1.0 Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model.The library interface routines are divided into sub-sections, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-14298073-22AB-47D0-A5D8-43A10B1B89B5.html</loc>
                           <lastmod>2024-02-08T13:18:19</lastmod>
                           <title>2.3.2.3 How the Library Works</title>
                           <description>Topics Name Description Initializing the LibraryDescribes how the USB Audio 1.0 Device driver is initialized. Event HandlingDescribes Audio 1.0 Function Driver event handler registration and event ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-EF16E6CF-5CFB-4387-8835-C334E919927A.html</loc>
                                 <lastmod>2024-03-20T08:10:14</lastmod>
                                 <title>2.3.2.3.1 Initializing the Library</title>
                                 <description>The Audio 1.0 Function Driver instance for a USB device configuration is initialized by the Device Layer when the configuration is set by the host. This process does not require application ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-13318D0F-97C3-43DC-BB8D-BCF9D0770FBC.html</loc>
                                 <lastmod>2024-03-20T08:11:36</lastmod>
                                 <title>2.3.2.3.2 Event Handling</title>
                                 <description>Registering a Audio 1.0 Function Driver Callback Function While creating a USB Audio 1.0 Device application, an event handler must be registered with the Device Layer (the Device Layer Event Handler) ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-366D4D64-857D-43B6-86CF-EF09AC5EC89A.html</loc>
                                 <lastmod>2024-02-08T13:17:55</lastmod>
                                 <title>2.3.2.3.3 Transferring Data</title>
                                 <description>The USB Audio 1.0 Device Driver provides functions to send and receive data. Receiving Data The USB_DEVICE_AUDIO_Read function schedules a data read. When the host transfers data to the device, the ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-B68B8D44-2710-403C-A67B-156CA3DBD265.html</loc>
                     <lastmod>2024-03-20T08:12:16</lastmod>
                     <title>2.3.3 Configuring the Library</title>
                     <description>The application designer must specify the following configuration parameters while using the USB Audio 1.0 Device Driver. The configuration macros that implement these parameters must be located in ...</description>
                     <urls>
                        <url>
                           <loc>GUID-849D986E-B397-4B24-AB1D-054B51088B02.html</loc>
                           <lastmod>2024-03-20T08:14:13</lastmod>
                           <title>2.3.3.1 USB_DEVICE_AUDIO_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_INSTANCES_NUMBER Summary USB device Audio Maximum Number of instances This macro defines the number of instances of the Audio Function Driver. For example, if the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7028F9B2-C79D-4929-80ED-E48D70F07889.html</loc>
                           <lastmod>2024-03-20T08:14:31</lastmod>
                           <title>2.3.3.2 USB_DEVICE_AUDIO_MAX_ALTERNATE_SETTING Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_MAX_ALTERNATE_SETTING Summary Maximum number of Alternate Settings This macro defines the maximum number of Alternate Settings per streaming interface. If the Audio Device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F1A3D938-ACE7-4F69-9D8D-039364BFE9BA.html</loc>
                           <lastmod>2024-03-20T08:14:39</lastmod>
                           <title>2.3.3.3 USB_DEVICE_AUDIO_MAX_STREAMING_INTERFACES Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_MAX_STREAMING_INTERFACES Summary Maximum Audio Streaming Interfaces This macro defines the maximum number of streaming interfaces in an Audio Function Driver instance. In ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6B4FB6F6-AFA0-42A1-9EBF-893451F63073.html</loc>
                           <lastmod>2024-03-20T08:15:01</lastmod>
                           <title>2.3.3.4 USB_DEVICE_AUDIO_QUEUE_DEPTH_COMBINED Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_QUEUE_DEPTH_COMBINED Summary USB device Audio Combined Queue Size This macro defines the number of entries in all queues in all instances of the Audio function driver. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D5E7F786-9C86-4D53-97CC-67F94ADB20BF.html</loc>
                           <lastmod>2024-03-20T08:15:08</lastmod>
                           <title>2.3.3.5 USB_DEVICE_AUDIO_TRANSFER_ABORT_NOTIFY Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_TRANSFER_ABORT_NOTIFY Summary USB Audio Transfer abort notification This macro enabled USB Audio Transfer abort notifications. Whenever a scheduled transfer request is ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9007CB4E-6522-44B5-B0DD-2EBF62D4C4CF.html</loc>
                           <lastmod>2024-03-28T06:53:26</lastmod>
                           <title>2.3.3.6 Configuration on MCC</title>
                           <description>Audio Device Type Symbol name: CONFIG_USB_DEVICE_FUNCTION_AUDIO_DEVICE_TYPE This option allows the users choose from a list of sample descriptors for various USB Audio devices like headset, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-4954F877-332A-4A53-9EA5-09A45A2E8EB3.html</loc>
                     <lastmod>2024-03-22T04:06:54</lastmod>
                     <title>2.3.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Device Audio 1.0 Library. Refer to each section for a detailed description.a) FunctionsName Description ...</description>
                     <urls>
                        <url>
                           <loc>GUID-D14AC64D-5F9F-48CE-8514-88915241B605.html</loc>
                           <lastmod>2024-03-21T06:49:47</lastmod>
                           <title>2.3.4.1 USB_DEVICE_AUDIO_EventHandlerSet Function</title>
                           <description>C USB_DEVICE_AUDIO_RESULT USB_DEVICE_AUDIO_EventHandlerSet( USB_DEVICE_AUDIO_INDEX instanceIndex, USB_DEVICE_AUDIO_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function registers a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-21D4F3A3-8ABE-45E6-A90C-6A025B0EEEAB.html</loc>
                           <lastmod>2024-03-21T06:49:42</lastmod>
                           <title>2.3.4.2 USB_DEVICE_AUDIO_Read Function</title>
                           <description>C USB_DEVICE_AUDIO_RESULT USB_DEVICE_AUDIO_Read( USB_DEVICE_AUDIO_INDEX instanceIndex, USB_DEVICE_AUDIO_TRANSFER_HANDLE* transferHandle, uint8_t interfaceNumber, void * data, size_t size ); Summary ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3C1FC6AC-CEF8-486A-B1B1-8625DA1BA04C.html</loc>
                           <lastmod>2024-03-20T08:19:09</lastmod>
                           <title>2.3.4.3 USB_DEVICE_AUDIO_TransferCancel Function</title>
                           <description>C USB_DEVICE_AUDIO_RESULT USB_DEVICE_AUDIO_TransferCancel( USB_DEVICE_AUDIO_INDEX instanceIndex, USB_DEVICE_AUDIO_TRANSFER_HANDLE transferHandle ); Summary This function cancels a scheduled Audio ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B2F85AA7-450A-4A0C-A0F5-42BFBFD1B42D.html</loc>
                           <lastmod>2024-03-21T06:49:39</lastmod>
                           <title>2.3.4.4 USB_DEVICE_AUDIO_Write Function</title>
                           <description>C USB_DEVICE_AUDIO_RESULT USB_DEVICE_AUDIO_Write( USB_DEVICE_AUDIO_INDEX instanceIndex, USB_DEVICE_AUDIO_TRANSFER_HANDLE * transferHandle, uint8_t interfaceNumber, void * data, size_t size ); Summary ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2B636D93-ED5C-4A72-AB68-BA5A17F0639D.html</loc>
                           <lastmod>2024-03-20T08:26:59</lastmod>
                           <title>2.3.4.5 USB_DEVICE_AUDIO_StatusSend Function</title>
                           <description>C USB_DEVICE_AUDIO_RESULT USB_DEVICE_AUDIO_StatusSend( USB_DEVICE_AUDIO_INDEX instanceIndex, USB_DEVICE_AUDIO_TRANSFER_HANDLE* transferHandle, USB_AUDIO_INTERRUPT_STATUS_WORD* status ); Summary This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7D65B223-888D-4F11-B3EF-97EC5EBCB038.html</loc>
                           <lastmod>2024-03-20T08:27:07</lastmod>
                           <title>2.3.4.6 USB_DEVICE_AUDIO_INDEX Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_AUDIO_INDEX; Summary USB Device Audio Function Driver Index This definition uniquely identifies a Audio Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B4D2A2D0-F5FF-4C10-83EA-0BC452E2F1D4.html</loc>
                           <lastmod>2024-03-20T08:27:15</lastmod>
                           <title>2.3.4.7 USB_DEVICE_AUDIO_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_AUDIO_TRANSFER_HANDLE; Summary USB Device Audio Function Driver Transfer Handle Definition This definition defines a USB Device Audio Function Driver Transfer Handle. A ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5FD8B982-C584-44E1-A0C5-C311CF63E106.html</loc>
                           <lastmod>2024-03-20T08:28:36</lastmod>
                           <title>2.3.4.8 USB_DEVICE_AUDIO_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_AUDIO_EVENT_WRITE_COMPLETE, USB_DEVICE_AUDIO_EVENT_READ_COMPLETE, USB_DEVICE_AUDIO_EVENT_STATUS_SEND_COMPLETE, USB_DEVICE_AUDIO_EVENT_INTERFACE_SETTING_CHANGED, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9D4F7CC4-BCAC-4179-B23A-A87446C5EB43.html</loc>
                           <lastmod>2024-03-20T08:29:13</lastmod>
                           <title>2.3.4.9 USB_DEVICE_AUDIO_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_AUDIO_RESULT_OK, USB_DEVICE_AUDIO_RESULT_ERROR_TRANSFER_QUEUE_FULL, USB_DEVICE_AUDIO_RESULT_ERROR_INSTANCE_INVALID, USB_DEVICE_AUDIO_RESULT_ERROR_INSTANCE_NOT_CONFIGURED, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5E1E1E8C-5177-49F6-8835-67C52AAECD29.html</loc>
                           <lastmod>2024-03-20T08:29:23</lastmod>
                           <title>2.3.4.10 USB_DEVICE_AUDIO_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_TRANSFER_HANDLE_INVALID Summary USB Device Audio Function Driver Invalid Transfer Handle Definition This definition defines a Invalid USB Device Audio Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-70195651-7BDA-4DDC-9040-3B3C20C9F679.html</loc>
                           <lastmod>2024-03-20T08:30:17</lastmod>
                           <title>2.3.4.11 USB_DEVICE_AUDIO_EVENT_DATA_READ_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_AUDIO_TRANSFER_HANDLE handle; uint16_t length; uint8_t interfaceNum; USB_DEVICE_AUDIO_RESULT status; } USB_DEVICE_AUDIO_EVENT_DATA_WRITE_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-891B024E-0A85-4866-81BC-C672361C815D.html</loc>
                           <lastmod>2024-03-20T08:30:45</lastmod>
                           <title>2.3.4.12 USB_DEVICE_AUDIO_EVENT_DATA_WRITE_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_AUDIO_TRANSFER_HANDLE handle; uint16_t length; uint8_t interfaceNum; USB_DEVICE_AUDIO_RESULT status; } USB_DEVICE_AUDIO_EVENT_DATA_WRITE_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5F6BC444-5EB8-4377-BEEA-B8A04CA3E808.html</loc>
                           <lastmod>2024-03-20T08:30:57</lastmod>
                           <title>2.3.4.13 USB_DEVICE_AUDIO_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_AUDIO_EVENT_RESPONSE (* USB_DEVICE_AUDIO_EVENT_HANDLER)(USB_DEVICE_AUDIO_INDEX instanceIndex , USB_DEVICE_AUDIO_EVENT event , void * pData, uintptr_t context); Description USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-922BDB3F-7743-4877-9719-BB9F76322EB0.html</loc>
                           <lastmod>2024-03-20T08:30:26</lastmod>
                           <title>2.3.4.14 USB_DEVICE_AUDIO_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_AUDIO_EVENT_RESPONSE; Summary USB Device Audio Function Driver Event Handler Response Type This is the return type of the Audio Function Driver event handler. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-85554A71-5DB4-40AA-AAD8-E3D65284C6AA.html</loc>
                           <lastmod>2024-03-20T08:31:31</lastmod>
                           <title>2.3.4.15 USB_DEVICE_AUDIO_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_EVENT_RESPONSE_NONE Summary USB Device Audio Function Driver Event Handler Response None This is the definition of the Audio Function Driver event handler response type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F5D2D7B5-A3C3-43AA-86EB-DE394E420B97.html</loc>
                           <lastmod>2024-03-20T08:31:39</lastmod>
                           <title>2.3.4.16 USB_DEVICE_AUDIO_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_FUNCTION_DRIVER Summary USB Device Audio Function Driver Function Pointer This is the USB Device Audio Function Driver function pointer. This should registered with the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6FC2D88D-5EF0-4F63-873A-EA737DE61194.html</loc>
                           <lastmod>2024-03-20T08:31:46</lastmod>
                           <title>2.3.4.17 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_CUR Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_CUR; Summary This is type USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_CUR. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4AE66251-30C2-4811-9688-D3FD9EB83C1A.html</loc>
                           <lastmod>2024-03-20T08:31:54</lastmod>
                           <title>2.3.4.18 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MAX Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MAX; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-336DD036-A6C9-4DAC-AEC0-AB6ADCD1486E.html</loc>
                           <lastmod>2024-03-20T08:32:28</lastmod>
                           <title>2.3.4.19 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MEM Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MEM; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6C4BBF8A-4373-4D9E-B7AD-96B8B105BA90.html</loc>
                           <lastmod>2024-03-20T08:32:34</lastmod>
                           <title>2.3.4.20 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MIN Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_MIN; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4AB92241-9248-49E0-A404-125AD76C369F.html</loc>
                           <lastmod>2024-03-20T08:32:40</lastmod>
                           <title>2.3.4.21 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_RES Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_GET_RES; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-18E02C3D-61F1-416B-B8D6-732241544569.html</loc>
                           <lastmod>2024-03-20T08:32:49</lastmod>
                           <title>2.3.4.22 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_CUR Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_CUR; Summary USB Device Audio Function Driver Set and Get request data. This data type defines the data structure ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-45447517-A64D-48B5-A163-A81790621D23.html</loc>
                           <lastmod>2024-03-20T08:33:17</lastmod>
                           <title>2.3.4.23 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MAX Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MAX; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EA13036B-7F61-46D1-8784-8F50E369AD85.html</loc>
                           <lastmod>2024-03-20T08:33:26</lastmod>
                           <title>2.3.4.24 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MEM Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MEM; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E679BE0A-BEA5-435E-AD3B-4BFC11B851AA.html</loc>
                           <lastmod>2024-03-20T08:33:33</lastmod>
                           <title>2.3.4.25 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MIN Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_MIN; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EB9EF30E-3C9C-4F11-9344-40663ED341B2.html</loc>
                           <lastmod>2024-03-20T08:33:41</lastmod>
                           <title>2.3.4.26 USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_RES Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_CONTROL_SET_RES; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CC57887D-5200-464A-B8ED-FBBC7C12E068.html</loc>
                           <lastmod>2024-03-20T08:34:07</lastmod>
                           <title>2.3.4.27 USB_DEVICE_AUDIO_EVENT_DATA_ENTITY_GET_STAT Type</title>
                           <description>C typedef USB_AUDIO_CONTROL_INTERFACE_REQUEST USB_DEVICE_AUDIO_EVENT_DATA_ENTITY_GET_STAT; Summary This is type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B6B34286-5194-4330-817A-C45C2FE7D51E.html</loc>
                           <lastmod>2024-03-20T08:34:25</lastmod>
                           <title>2.3.4.28 USB_DEVICE_AUDIO_INIT Structure</title>
                           <description>C typedef struct { size_t queueSizeRead; size_t queueSizeWrite; size_t queueSizeStatusSend; } USB_DEVICE_AUDIO_INIT; Summary USB Device Audio Function Driver Initialization Data Structure This data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-71256EEA-6FE3-4ECB-BFBD-161332EF704A.html</loc>
                           <lastmod>2024-03-20T08:34:37</lastmod>
                           <title>2.3.4.29 USB_DEVICE_AUDIO_EVENT_DATA_INTERFACE_SETTING_CHANGED Structure</title>
                           <description>C typedef struct { uint8_t interfaceNumber; uint8_t interfaceAlternateSetting; } USB_DEVICE_AUDIO_EVENT_DATA_INTERFACE_SETTING_CHANGED; Summary USB Device Audio Function Driver Alternate Interface ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0CC98049-D658-4E84-93C4-66983B07B6DE.html</loc>
                           <lastmod>2024-03-20T08:34:50</lastmod>
                           <title>2.3.4.30 USB_DEVICE_AUDIO_EVENT_DATA_STATUS_SEND_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_AUDIO_TRANSFER_HANDLE handle; USB_DEVICE_AUDIO_RESULT status; } USB_DEVICE_AUDIO_EVENT_DATA_STATUS_SEND_COMPLETE; Summary USB Device Audio Function Driver Status Send ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-B1B386FA-A782-4C47-8366-BB9A76C87D9A.html</loc>
                     <lastmod>2024-02-08T13:17:41</lastmod>
                     <title>2.3.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_device_audio_v1_0.hUSB Device Audio function Driver Interface usb_device_audio_v1_0_config_template.hUSB ...</description>
                     <urls>
                        <url>
                           <loc>GUID-4D2F7B2D-8C87-4C15-8B41-BBE3B7CACC81.html</loc>
                           <lastmod>2024-03-20T08:35:41</lastmod>
                           <title>2.3.5.1 usb_device_audio_v1_0.h</title>
                           <description>Description USB Device Audio Function Driver Interface This file describes the USB Device Audio Function Driver interface. This file should be included by the application if it needs to use the Audio ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E331CFB2-72CC-4B04-A9A9-7A8D5E54DA1A.html</loc>
                           <lastmod>2024-03-20T08:36:05</lastmod>
                           <title>2.3.5.2 usb_device_audio_v1_0_config_template.h</title>
                           <description>File Name usb_device_audio_v1_0_config_template.h Description USB Device Audio Class Configuration Definitions This file contains configurations macros needed to configure the Audio Function Driver. ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-A95B3616-C0C4-4675-B25C-0117818DF55A.html</loc>
               <lastmod>2024-03-06T10:14:36</lastmod>
               <title>2.4 USB Audio 2.0 Device Library</title>
               <description>Topics Name Description IntroductionThis section provides information on library design, configuration, usage and the library interface for the USB Audio 2.0 Device Library. Using the LibraryThis ...</description>
               <urls>
                  <url>
                     <loc>GUID-89BA69E5-54BC-419A-A79D-A17881CBE438.html</loc>
                     <lastmod>2024-02-09T05:48:48</lastmod>
                     <title>2.4.1 Introduction</title>
                     <description>The MPLAB Harmony USB Audio 2.0 Device Library (also referred to as the Audio 2.0 Function Driver or library) features routines to implement a USB Audio 2.0 Device. Examples of Audio USB 2.0 Devices ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-51FD97A5-27B2-446C-8627-6C45271E80CB.html</loc>
                     <lastmod>2024-02-09T05:48:43</lastmod>
                     <title>2.4.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the Audio 2.0 Function Driver and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the Abstraction Model ...</description>
                     <urls>
                        <url>
                           <loc>GUID-E32E4115-F429-4433-ACF3-E3AD72B1BF04.html</loc>
                           <lastmod>2024-03-20T08:37:13</lastmod>
                           <title>2.4.2.1 Abstraction Model</title>
                           <description>The Audio 2.0 Function Driver offers various services to the USB Audio 2.0 device to communicate with the host by abstracting USB specification details. It must be used along with the USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3BBBA632-B608-4BD8-B3D3-1EA3A93C0681.html</loc>
                           <lastmod>2024-02-09T05:48:35</lastmod>
                           <title>2.4.2.2 Library Overview</title>
                           <description>The USB Audio 2.0 Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model. The library interface routines are divided into sub-sections, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-48E6E666-2D07-4AF0-98BF-21FF7F3CC019.html</loc>
                     <lastmod>2024-02-09T05:48:31</lastmod>
                     <title>2.4.3 How the Library Works</title>
                     <description>Topics Name Description Initializing the LibraryDescribes how the USB Audio 2.0 Device driver is initialized. Event HandlingDescribes Audio 2.0 Function Driver event handler registration and event ...</description>
                     <urls>
                        <url>
                           <loc>GUID-56CC5C1C-D4F8-4EF6-B52D-829A34037610.html</loc>
                           <lastmod>2024-03-20T08:38:03</lastmod>
                           <title>2.4.3.1 Initializing the Library</title>
                           <description>The Audio 2.0 Function Driver instance for a USB device configuration is initialized by the Device Layer when the configuration is set by the host. This process does not require application ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0E7C284A-C230-400E-BDCA-7612D44E07CE.html</loc>
                           <lastmod>2024-03-20T08:39:27</lastmod>
                           <title>2.4.3.2 Event Handling</title>
                           <description>Registering a Audio 2.0 Function Driver Callback Function Registering a Audio 2.0 Function Driver Callback Function While creating a USB Audio 2.0 Device application, an event handler must be ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AFEF301E-8D78-40A9-AD56-7E047113B3B6.html</loc>
                           <lastmod>2024-02-09T05:48:18</lastmod>
                           <title>2.4.3.3 Transferring Data</title>
                           <description>The USB Audio 2.0 Device Driver provides functions to send and receive data.Receiving DataThe USB_DEVICE_AUDIO_V2_Read function schedules a data read. When the host transfers data to the device, the ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-626FC551-2434-4762-B4A6-3BB9EFFFF859.html</loc>
                     <lastmod>2024-03-20T08:39:57</lastmod>
                     <title>2.4.4 Configuring the Library</title>
                     <description>The application designer must specify the following configuration parameters while using the USB Audio 2.0 Device Driver. The configuration macros that implement these parameters must be located in ...</description>
                     <urls>
                        <url>
                           <loc>GUID-E5C260DD-7B21-4741-ADC3-51025B8006DA.html</loc>
                           <lastmod>2024-03-20T08:41:57</lastmod>
                           <title>2.4.4.1 USB_DEVICE_AUDIO_V2_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_INSTANCES_NUMBER Summary USB device Audio 2.0 Maximum Number of instances This macro defines the number of instances of the Audio 2.0 Function Driver. For example, if ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5162974A-5000-4E87-BFB5-C9742AC643B5.html</loc>
                           <lastmod>2024-03-20T08:42:08</lastmod>
                           <title>2.4.4.2 USB_DEVICE_AUDIO_V2_MAX_ALTERNATE_SETTING Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_MAX_ALTERNATE_SETTING Summary Maximum number of Alternate Settings This macro defines the maximum number of Alternate Settings per streaming interface. If the Audio 2.0 ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6DE30D7F-2D99-408D-8EC9-C03EB099E1B9.html</loc>
                           <lastmod>2024-03-20T08:42:17</lastmod>
                           <title>2.4.4.3 USB_DEVICE_AUDIO_V2_MAX_STREAMING_INTERFACES Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_MAX_STREAMING_INTERFACES Summary Maximum Audio 2.0 Streaming Interfaces This macro defines the maximum number of streaming interfaces in an Audio 2.0 Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D7D72563-2CF6-483B-8512-1D1BDFA5B3B9.html</loc>
                           <lastmod>2024-03-20T08:42:25</lastmod>
                           <title>2.4.4.4 USB_DEVICE_AUDIO_V2_QUEUE_DEPTH_COMBINED Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_QUEUE_DEPTH_COMBINED Summary USB device Audio 2.0 Combined Queue Size This macro defines the number of entries in all queues in all instances of the Audio 2.0 function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9007CB4E-6522-44B5-B0DD-2EBF62D4C4CF_2.html</loc>
                           <lastmod>2024-03-28T06:53:26</lastmod>
                           <title>2.4.4.5 Configuration on MCC</title>
                           <description>Audio Device Type Symbol name: CONFIG_USB_DEVICE_FUNCTION_AUDIO_DEVICE_TYPE This option allows the users choose from a list of sample descriptors for various USB Audio devices like headset, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-9D6BBB18-66F8-4585-86F9-4EC0D75D960E.html</loc>
                     <lastmod>2024-03-20T08:44:10</lastmod>
                     <title>2.4.5 Library Interface</title>
                     <description>Library InterfaceThis section describes the Application Programming Interface (API) functions of the USB Device Audio Library.Refer to each section for a detailed description.a) FunctionsName ...</description>
                     <urls>
                        <url>
                           <loc>GUID-2652D25C-2DD5-4FC1-8809-EE87C1A78137.html</loc>
                           <lastmod>2024-03-21T06:56:06</lastmod>
                           <title>2.4.5.1 USB_DEVICE_AUDIO_V2_EventHandlerSet Function</title>
                           <description>C USB_DEVICE_AUDIO_V2_RESULT USB_DEVICE_AUDIO_V2_EventHandlerSet( USB_DEVICE_AUDIO_V2_INDEX instanceIndex, USB_DEVICE_AUDIO_V2_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0D03CC85-6389-4768-A991-7B4B33051D0D.html</loc>
                           <lastmod>2024-03-21T06:56:10</lastmod>
                           <title>2.4.5.2 USB_DEVICE_AUDIO_V2_Read Function</title>
                           <description>C USB_DEVICE_AUDIO_V2_RESULT USB_DEVICE_AUDIO_V2_Read( USB_DEVICE_AUDIO_V2_INDEX instanceIndex, USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE* transferHandle, uint8_t interfaceNumber, void * data, size_t size ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1297F2BD-B4FA-4CF6-BEFA-D0EDBD2972FF.html</loc>
                           <lastmod>2024-03-20T08:46:14</lastmod>
                           <title>2.4.5.3 USB_DEVICE_AUDIO_V2_TransferCancel Function</title>
                           <description>C USB_DEVICE_AUDIO_V2_RESULT USB_DEVICE_AUDIO_V2_TransferCancel( USB_DEVICE_AUDIO_V2_INDEX instanceIndex, USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE transferHandle ); Summary This function cancels a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7656CDA3-4356-4136-A9A7-E0C4175A16D0.html</loc>
                           <lastmod>2024-03-21T06:56:13</lastmod>
                           <title>2.4.5.4 USB_DEVICE_AUDIO_V2_Write Function</title>
                           <description>C USB_DEVICE_AUDIO_V2_RESULT USB_DEVICE_AUDIO_V2_Write( USB_DEVICE_AUDIO_V2_INDEX instanceIndex, USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE * transferHandle, uint8_t interfaceNumber, void * data, size_t ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-43D43619-D624-47A9-B89E-E2B01E2EF2FB.html</loc>
                           <lastmod>2024-03-20T08:47:42</lastmod>
                           <title>2.4.5.5 USB_DEVICE_AUDIO_V2_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_AUDIO_V2_EVENT_WRITE_COMPLETE, USB_DEVICE_AUDIO_V2_EVENT_READ_COMPLETE, USB_DEVICE_AUDIO_V2_EVENT_INTERFACE_SETTING_CHANGED, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1A11CC93-7677-478B-B3E0-5C8E5AEA049F.html</loc>
                           <lastmod>2024-03-20T08:48:03</lastmod>
                           <title>2.4.5.6 USB_DEVICE_AUDIO_V2_EVENT_DATA_READ_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE handle; uint16_t length; uint8_t interfaceNum; USB_DEVICE_AUDIO_V2_RESULT status; } USB_DEVICE_AUDIO_V2_EVENT_DATA_WRITE_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1BD030C0-77A0-4453-A713-825A02BD5438.html</loc>
                           <lastmod>2024-03-20T08:48:38</lastmod>
                           <title>2.4.5.7 USB_DEVICE_AUDIO_V2_EVENT_DATA_SET_ALTERNATE_INTERFACE Structure</title>
                           <description>C typedef struct { uint8_t interfaceNumber; uint8_t interfaceAlternateSetting; } USB_DEVICE_AUDIO_V2_EVENT_DATA_SET_ALTERNATE_INTERFACE; Summary USB Device Audio v2.0 Function Driver Alternate ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3CFBEC17-77C6-4CF9-979D-58C3488DFBDD.html</loc>
                           <lastmod>2024-03-20T08:49:03</lastmod>
                           <title>2.4.5.8 USB_DEVICE_AUDIO_V2_EVENT_DATA_WRITE_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE handle; uint16_t length; uint8_t interfaceNum; USB_DEVICE_AUDIO_V2_RESULT status; } USB_DEVICE_AUDIO_V2_EVENT_DATA_WRITE_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7571D0CE-1A9F-41CA-A032-17AF7A924654.html</loc>
                           <lastmod>2024-03-20T08:50:26</lastmod>
                           <title>2.4.5.9 USB_DEVICE_AUDIO_V2_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_AUDIO_V2_EVENT_RESPONSE (* USB_DEVICE_AUDIO_V2_EVENT_HANDLER)(USB_DEVICE_AUDIO_V2_INDEX instanceIndex , USB_DEVICE_AUDIO_V2_EVENT event , void * pData, uintptr_t context); ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6286487C-E467-450C-B3D2-BAE9AD02683B.html</loc>
                           <lastmod>2024-03-20T08:50:35</lastmod>
                           <title>2.4.5.10 USB_DEVICE_AUDIO_V2_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_AUDIO_V2_EVENT_RESPONSE; Summary USB Device Audio v2.0 Function Driver Event Handler Response Type This is the return type of the Audio Function Driver event handler. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-91F51AD3-1620-4D99-BCF9-208F29AC402C.html</loc>
                           <lastmod>2024-03-20T08:50:42</lastmod>
                           <title>2.4.5.11 USB_DEVICE_AUDIO_V2_INDEX Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_AUDIO_V2_INDEX; Summary USB Device Audio v2.0 Function Driver Index This definition uniquely identifies a Audio v2.0 Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5C24F896-74D2-4895-8D22-BE8022E8D1D5.html</loc>
                           <lastmod>2024-03-20T08:51:01</lastmod>
                           <title>2.4.5.12 USB_DEVICE_AUDIO_V2_INIT Structure</title>
                           <description>C typedef struct { size_t queueSizeRead; size_t queueSizeWrite; } USB_DEVICE_AUDIO_V2_INIT; Summary USB Device Audio v2.0 Function Driver Initialization Data Structure This data structure must be ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-812A3D01-1EE2-4D0A-9A44-0DEF97F2B8DC.html</loc>
                           <lastmod>2024-03-20T08:51:20</lastmod>
                           <title>2.4.5.13 USB_DEVICE_AUDIO_V2_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_AUDIO_V2_RESULT_OK, USB_DEVICE_AUDIO_V2_RESULT_ERROR_TRANSFER_QUEUE_FULL, USB_DEVICE_AUDIO_V2_RESULT_ERROR_INSTANCE_INVALID, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-59A79BF0-C1C4-4DEC-B8AB-D376CEA67ED3.html</loc>
                           <lastmod>2024-03-20T08:51:55</lastmod>
                           <title>2.4.5.14 USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE; Summary USB Device Audio v2.0 Function Driver Transfer Handle Definition This definition defines a USB Device Audio v2.0 Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EEBA3600-33FF-4C75-9140-2FFA5C7810D4.html</loc>
                           <lastmod>2024-03-20T08:52:03</lastmod>
                           <title>2.4.5.15 USB_DEVICE_AUDIO_V2_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_EVENT_RESPONSE_NONE Summary USB Device Audio v2.0 Function Driver Event Handler Response None This is the definition of the Audio v2.0 Function Driver event handler ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4C0C23B2-00D4-4A75-AD41-073B5BC3ACE9.html</loc>
                           <lastmod>2024-03-20T08:52:12</lastmod>
                           <title>2.4.5.16 USB_DEVICE_AUDIO_V2_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_FUNCTION_DRIVER Summary USB Device Audio v2.0 Function Driver Function Pointer This is the USB Device Audio v2.0 Function Driver Function pointer. This should registered ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0CADC88B-A238-4F3A-8705-FBDAB8EE74DB.html</loc>
                           <lastmod>2024-03-20T08:52:20</lastmod>
                           <title>2.4.5.17 USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_AUDIO_V2_TRANSFER_HANDLE_INVALID Summary USB Device Audio v2.0 Function Driver Invalid Transfer Handle Definition This definition defines a USB Device Audio v2.0 Function Driver ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-A2ED1C83-94A4-476A-8DEB-4B072DC69557.html</loc>
                     <lastmod>2024-03-20T08:52:42</lastmod>
                     <title>2.4.6 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_device_audio_v2_0.hUSB Device Audio v2.0 Function Driver ...</description>
                     <urls>
                        <url>
                           <loc>GUID-DC373DFC-5D07-49BB-B1C0-B7906C70E16E.html</loc>
                           <lastmod>2024-03-06T08:33:01</lastmod>
                           <title>2.4.6.1 usb_device_audio_v2_0.h</title>
                           <description>File Name usb_device_audio_v2.0.h Description USB Device Audio Function Driver Interface This file describes the USB Device Audio v2.0 Function Driver interface. This file should be included by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-84F9BD78-CF1A-44A2-A64A-4895C6A5109C.html</loc>
                           <lastmod>2024-03-06T08:33:05</lastmod>
                           <title>2.4.6.2 usb_device_audio_v2_0_config_template.h</title>
                           <description>File Name usb_device_audio_v2_0_config_template_0_config_template.h Description USB Device Audio 2.0 Class Configuration Definitions This file contains configurations macros needed to configure the ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-3908AD9D-1B49-4753-BC38-DED35835C53D.html</loc>
               <lastmod>2024-03-06T10:11:57</lastmod>
               <title>2.5 USB CDC Device Library</title>
               <description>Topics Name Description IntroductionThis help section provides information on library design, configuration, usage and the Library Interface for the USB Communications Device Class (CDC) Device ...</description>
               <urls>
                  <url>
                     <loc>GUID-67E0B7D2-BC77-465C-9786-C5F03766E7F6.html</loc>
                     <lastmod>2024-02-09T10:14:49</lastmod>
                     <title>2.5.1 Introduction</title>
                     <description>The MPLAB Harmony USB Communications Device Class (CDC) Device Library (also referred to as the CDC function driver or library) provides functions and methods that allow application designers to ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-9B78199A-5ED9-4E4C-9C85-A41BAB7FD93E.html</loc>
                     <lastmod>2024-03-06T09:25:30</lastmod>
                     <title>2.5.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB CDC Device Library and provides information and examples on its use. Topics Name Description Abstraction ModelProvides an architectural overview ...</description>
                     <urls>
                        <url>
                           <loc>GUID-50BB3548-52E7-4AAC-AFFE-01B01F66C041.html</loc>
                           <lastmod>2024-03-20T08:58:23</lastmod>
                           <title>2.5.2.1 Abstraction Model</title>
                           <description>The CDC Function Driver offers services to a USB CDC Device to communicate with the host by abstracting the USB specification details. It must be used along with the USB Device Layer and USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-583316E4-9359-48C6-A3E5-53CCDCACCAA3.html</loc>
                           <lastmod>2024-02-09T10:15:02</lastmod>
                           <title>2.5.2.2 Abstract Control Model (ACM)</title>
                           <description>One of the basic supported models for communication by CDC is POTS (Plain Old Telephone Service). The POTS model is for devices that communicate via ordinary phone lines and generic COM port devices. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C304E4C6-3F59-48F5-A8A1-7D857BFFD4F4.html</loc>
                           <lastmod>2024-02-09T10:15:06</lastmod>
                           <title>2.5.2.3 Library Overview</title>
                           <description>The USB CDC Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model.The library interface routines are divided into sub-sections, which ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-928AE897-5484-4143-9B42-66899E2C771E.html</loc>
                           <lastmod>2024-02-09T10:14:31</lastmod>
                           <title>2.5.2.4 How the Library Works</title>
                           <description>Topics Name Description Library InitializationDescribes how the CDC Function Driver is initialized. Event Handling Describes CDC Function Driver event handler registration and event handling. Sending ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-17B7192E-4459-454F-B9EC-E8DEA3E80E3E.html</loc>
                                 <lastmod>2024-02-09T10:14:35</lastmod>
                                 <title>2.5.2.4.1 Library Initialization</title>
                                 <description>The CDC Function Driver instance for a USB device configuration is initialized by the Device Layer when the configuration is set by the host. This process does not require application intervention. ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-6579EB1B-2438-4086-9384-E776145C6FD0.html</loc>
                                 <lastmod>2024-03-20T09:01:59</lastmod>
                                 <title>2.5.2.4.2 Event Handling</title>
                                 <description>Registering a CDC Function Driver Event Handler While creating USB CDC Device-based application, an event handler must be registered with the Device Layer (the Device Layer Event Handler) and every ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-681DB895-A5D7-4B7D-9614-7231D249ED32.html</loc>
                                 <lastmod>2024-03-20T09:02:53</lastmod>
                                 <title>2.5.2.4.3 Sending Data</title>
                                 <description>The application may need to send data or serial state notification to the USB CDC Host. This is done by using the USB_DEVICE_CDC_Write and USB_DEVICE_CDC_SerialStateNotificationSend functions, ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-E91FBCD0-2635-42F6-8480-424961296C77.html</loc>
                                 <lastmod>2024-03-20T09:03:21</lastmod>
                                 <title>2.5.2.4.4 Receiving Data</title>
                                 <description>The application can receive data from the host by using the USB_DEVICE_CDC_Read function. This function returns a transfer handle that allows the application to track the read request. The request is ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-D6560F2F-C5D7-47FB-89DD-5BF6D6E7FDEB.html</loc>
                     <lastmod>2024-03-19T13:07:42</lastmod>
                     <title>2.5.3 Configuring the Library</title>
                     <description>The application designer must specify the following configuration parameters while using the CDC Function Driver. The configuration macros that implement these parameters must be located in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-802FDFE9-0B97-46E6-8179-8B0AF761B38F.html</loc>
                           <lastmod>2024-03-20T09:04:09</lastmod>
                           <title>2.5.3.1 USB_DEVICE_CDC_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_CDC_INSTANCES_NUMBER Summary USB device CDC Maximum Number of instances This macro defines the number of instances of the CDC Function Driver. For example, if the application ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8FEA8FEB-67FD-4D28-819A-B92118854A55.html</loc>
                           <lastmod>2024-03-20T09:04:17</lastmod>
                           <title>2.5.3.2 USB_DEVICE_CDC_QUEUE_DEPTH_COMBINED Macro</title>
                           <description>C #define USB_DEVICE_CDC_QUEUE_DEPTH_COMBINED Summary USB device CDC Combined Queue Size This macro defines the number of entries in all queues in all instances of the CDC function driver. This value ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-552D1CBF-6F48-471F-9BC5-725A046F6E87.html</loc>
                           <lastmod>2024-03-20T09:04:49</lastmod>
                           <title>2.5.3.3 Configuration on MCC</title>
                           <description>Use Interface Association Descriptor Symbol name: CONFIG_USB_DEVICE_FUNCTION_USE_IAD This option is enabled to generate a Interface Association Descriptor (IAD). This option should be enabled in case ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-9373E1EB-A111-4FF8-9910-D871A0BB42DD.html</loc>
                     <lastmod>2024-03-20T09:06:14</lastmod>
                     <title>2.5.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB CDC Device Library. Refer to each section for a detailed description.a) FunctionsName Description ...</description>
                     <urls>
                        <url>
                           <loc>GUID-5678203A-C4EA-4641-9D9C-FA93509A2AB2.html</loc>
                           <lastmod>2024-03-21T07:08:52</lastmod>
                           <title>2.5.4.1 USB_DEVICE_CDC_EventHandlerSet Function</title>
                           <description>C USB_DEVICE_CDC_RESULT USB_DEVICE_CDC_EventHandlerSet( USB_DEVICE_CDC_INDEX iCDC, USB_DEVICE_CDC_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function registers a event handler for ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5C0F7E94-A740-4B76-96C2-5405A416BECB.html</loc>
                           <lastmod>2024-03-21T07:08:56</lastmod>
                           <title>2.5.4.2 USB_DEVICE_CDC_Read Function</title>
                           <description>C USB_DEVICE_CDC_RESULT USB_DEVICE_CDC_Read( USB_DEVICE_CDC_INDEX iCDC, USB_DEVICE_CDC_TRANSFER_HANDLE * transferHandle, void * data, size_t size ); Description This function requests a data read ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-970515AF-1B06-4A81-96C7-A3EB53CED1DF.html</loc>
                           <lastmod>2024-03-21T07:08:59</lastmod>
                           <title>2.5.4.3 USB_DEVICE_CDC_Write Function</title>
                           <description>C USB_DEVICE_CDC_RESULT USB_DEVICE_CDC_Write( USB_DEVICE_CDC_INDEX iCDC, USB_DEVICE_CDC_TRANSFER_HANDLE * transferHandle, const void * data, size_t size, USB_DEVICE_CDC_TRANSFER_FLAGS flags ); ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8480C434-997C-4C1C-B030-F3312D838BB0.html</loc>
                           <lastmod>2024-03-21T07:09:03</lastmod>
                           <title>2.5.4.4 USB_DEVICE_CDC_SerialStateNotificationSend Function</title>
                           <description>C USB_DEVICE_CDC_RESULT USB_DEVICE_CDC_SerialStateNotificationSend( USB_DEVICE_CDC_INDEX iCDC, USB_DEVICE_CDC_TRANSFER_HANDLE * transferHandle, USB_CDC_SERIAL_STATE * notificationData ); Summary This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-556329D9-1810-433A-9660-431983DC7788.html</loc>
                           <lastmod>2024-03-20T09:42:12</lastmod>
                           <title>2.5.4.5 USB_DEVICE_CDC_EVENT_DATA_READ_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_CDC_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_CDC_RESULT status; } USB_DEVICE_CDC_EVENT_DATA_WRITE_COMPLETE, USB_DEVICE_CDC_EVENT_DATA_READ_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-40B6AC5A-C0F1-4D42-B926-BB422471E481.html</loc>
                           <lastmod>2024-03-20T09:43:02</lastmod>
                           <title>2.5.4.6 USB_DEVICE_CDC_EVENT_DATA_SERIAL_STATE_NOTIFICATION_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_CDC_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_CDC_RESULT status; } USB_DEVICE_CDC_EVENT_DATA_WRITE_COMPLETE, USB_DEVICE_CDC_EVENT_DATA_READ_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-831C57BC-21A9-4394-85AC-5050EC3EFEB8.html</loc>
                           <lastmod>2024-03-20T09:44:14</lastmod>
                           <title>2.5.4.7 USB_DEVICE_CDC_EVENT_DATA_WRITE_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_CDC_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_CDC_RESULT status; } USB_DEVICE_CDC_EVENT_DATA_WRITE_COMPLETE, USB_DEVICE_CDC_EVENT_DATA_READ_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BA101CD4-1EE1-47A4-820D-95ECA4BC3A3E.html</loc>
                           <lastmod>2024-03-20T09:44:38</lastmod>
                           <title>2.5.4.8 USB_DEVICE_CDC_INIT Structure</title>
                           <description>C typedef struct { size_t queueSizeRead; size_t queueSizeWrite; size_t queueSizeSerialStateNotification; } USB_DEVICE_CDC_INIT; Summary USB Device CDC Function Driver Initialization Data Structure ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-68BE406F-DB40-44F3-AB66-A75D2173F1FB.html</loc>
                           <lastmod>2024-03-20T09:45:11</lastmod>
                           <title>2.5.4.9 USB_DEVICE_CDC_EVENT_DATA_SEND_BREAK Structure</title>
                           <description>C typedef struct { uint16_t breakDuration; } USB_DEVICE_CDC_EVENT_DATA_SEND_BREAK; Summary USB Device CDC Function Driver Send Break Event Data This data type defines the data structure returned by ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B26DB38E-E40E-4673-99C5-3F5BE1BEEB97.html</loc>
                           <lastmod>2024-03-20T09:49:58</lastmod>
                           <title>2.5.4.10 USB_DEVICE_CDC_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CDC_EVENT_SET_LINE_CODING, USB_DEVICE_CDC_EVENT_GET_LINE_CODING, USB_DEVICE_CDC_EVENT_SET_CONTROL_LINE_STATE, USB_DEVICE_CDC_EVENT_SEND_BREAK, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E89B709C-C894-494F-B943-863D72067875.html</loc>
                           <lastmod>2024-03-20T09:50:45</lastmod>
                           <title>2.5.4.11 USB_DEVICE_CDC_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_CDC_EVENT_RESPONSE (* USB_DEVICE_CDC_EVENT_HANDLER)(USB_DEVICE_CDC_INDEX instanceIndex, USB_DEVICE_CDC_EVENT event, void * pData, uintptr_t context); Description USB Device CDC ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-47D47F4D-69A1-4234-B0BB-CC881318F71E.html</loc>
                           <lastmod>2024-03-20T09:51:05</lastmod>
                           <title>2.5.4.12 USB_DEVICE_CDC_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_CDC_EVENT_RESPONSE; Summary USB Device CDC Function Driver Event Handler Response Type This is the return type of the CDC Function Driver event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-242F78F4-201C-4B09-B3E4-ECCF5BE6BEB7.html</loc>
                           <lastmod>2024-03-20T09:51:11</lastmod>
                           <title>2.5.4.13 USB_DEVICE_CDC_INDEX Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_CDC_INDEX; Summary USB Device CDC Function Driver Index This uniquely identifies a CDC Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B854FD49-0E7C-4E72-BE2E-A9E431CCBD58.html</loc>
                           <lastmod>2024-03-20T09:51:37</lastmod>
                           <title>2.5.4.14 USB_DEVICE_CDC_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CDC_RESULT_OK, USB_DEVICE_CDC_RESULT_ERROR_TRANSFER_SIZE_INVALID, USB_DEVICE_CDC_RESULT_ERROR_TRANSFER_QUEUE_FULL, USB_DEVICE_CDC_RESULT_ERROR_INSTANCE_INVALID, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F867695D-0F8C-4286-AD79-B2C74294DA93.html</loc>
                           <lastmod>2024-03-20T09:52:07</lastmod>
                           <title>2.5.4.15 USB_DEVICE_CDC_TRANSFER_FLAGS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_CDC_TRANSFER_FLAGS_DATA_COMPLETE, USB_DEVICE_CDC_TRANSFER_FLAGS_MORE_DATA_PENDING } USB_DEVICE_CDC_TRANSFER_FLAGS; Summary USB Device CDC Transfer Flags These flags are ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E076A7BF-A48D-4120-860C-B029036E5701.html</loc>
                           <lastmod>2024-03-20T09:52:14</lastmod>
                           <title>2.5.4.16 USB_DEVICE_CDC_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_CDC_TRANSFER_HANDLE; Summary USB Device CDC Function Driver Transfer Handle Definition This definition defines a USB Device CDC Function Driver Transfer Handle. A ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-784254A4-D5FC-4AA2-AD85-072C9A09E0DE.html</loc>
                           <lastmod>2024-03-20T09:52:22</lastmod>
                           <title>2.5.4.17 USB_DEVICE_CDC_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_CDC_EVENT_RESPONSE_NONE Summary USB Device CDC Function Driver Event Handler Response None This is the definition of the CDC Function Driver Event Handler Response Type none. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-32D37A4F-CBB0-4FF6-849F-610514B60616.html</loc>
                           <lastmod>2024-03-20T09:53:15</lastmod>
                           <title>2.5.4.18 USB_DEVICE_CDC_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_CDC_TRANSFER_HANDLE_INVALID ((USB_DEVICE_CDC_TRANSFER_HANDLE)(-1)) Summary USB Device CDC Function Driver Invalid Transfer Handle Definition This definition defines a USB Device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-351470AA-0E30-4DB6-B701-4451692BEACA.html</loc>
                           <lastmod>2024-03-20T09:54:35</lastmod>
                           <title>2.5.4.19 USB_DEVICE_CDC_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_CDC_FUNCTION_DRIVER Summary USB Device CDC Function Driver Function Pointer This is the USB Device CDC Function Driver Function pointer. This should registered with the device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-77B50577-7C45-4F68-A700-3E1A8F8FB450.html</loc>
                           <lastmod>2024-03-20T09:54:45</lastmod>
                           <title>2.5.4.20 USB_CDC_LINESTATE_CARRIER Macro</title>
                           <description>C #define USB_CDC_LINESTATE_CARRIER 0 Summary Bit code information in line </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9AC02F6F-F733-4834-BC2A-467A592EFE88.html</loc>
                           <lastmod>2024-03-20T09:54:54</lastmod>
                           <title>2.5.4.21 USB_CDC_LINESTATE_DTR Macro</title>
                           <description>C #define USB_CDC_LINESTATE_DTR 1 Summary Bit code information in line </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-07493FAB-D296-4780-9F3B-5B51F1886A34.html</loc>
                           <lastmod>2024-03-20T09:55:02</lastmod>
                           <title>2.5.4.22 USB_CDC_DESCRIPTOR_TYPE Enumeration</title>
                           <description>C typedef enum { USB_CDC_DESC_CS_INTERFACE = 0x24, USB_CDC_DESC_CS_ENDPOINT = 0x25 } USB_CDC_DESCRIPTOR_TYPE; Summary CDC descriptor type. This enumeration identifies the descriptor types in the CDC. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E40DFEA2-F72E-40CD-BEEE-4C4995A10779.html</loc>
                           <lastmod>2024-03-20T09:55:13</lastmod>
                           <title>2.5.4.23 USB_CDC_INF_PROTOCOL Enumeration</title>
                           <description>C typedef enum { USB_CDC_PROTOCOL_NO_CLASS_SPECIFIC = 0x00, USB_CDC_PROTOCOL_AT_V250 = 0x01, USB_CDC_PROTOCOL_AT_PCCA = 0x02, USB_CDC_PROTOCOL_AT_PCCA_ANNEX_O = 0x03, USB_CDC_PROTOCOL_AT_GSM = 0x04, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-177E343C-8DF3-4337-8C4C-B2CFF5767702.html</loc>
                           <lastmod>2024-03-20T09:55:21</lastmod>
                           <title>2.5.4.24 USB_CDC_INTERFACE_TYPE Enumeration</title>
                           <description>C typedef enum { USB_CDC_INTERFACE_DATA = 0, USB_CDC_INTERFACE_NOTIFICATION } USB_CDC_INTERFACE_TYPE; Summary CDC interface type. This enumeration identifies the CDC interface type. CDC has one ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3E7D8CA9-CB75-43AD-AA86-00AB9479A126.html</loc>
                           <lastmod>2024-03-20T09:55:29</lastmod>
                           <title>2.5.4.25 USB_CDC_NOTIFICATION Enumeration</title>
                           <description>C typedef enum { USB_CDC_NOTIFICATION_NETWORK_CONNECTION = 0x00, USB_CDC_NOTIFICATION_RESPONSE_AVAILABLE = 0x01, USB_CDC_NOTIFICATION_AUX_JACK_HOOK_STATE = 0x08, USB_CDC_NOTIFICATION_RING_DETECT = ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2D48C704-0FEC-4615-AAFC-000130F17B32.html</loc>
                           <lastmod>2024-03-20T09:55:42</lastmod>
                           <title>2.5.4.26 USB_CDC_REQUEST Enumeration</title>
                           <description>C typedef enum { USB_CDC_REQUEST_SEND_ENCAPSULATED_COMMAND = 0x00, USB_CDC_REQUEST_GET_ENCAPSULATED_RESPONSE = 0x01, USB_CDC_REQUEST_SET_COMM_FEATURE = 0x02, USB_CDC_REQUEST_GET_COMM_FEATURE = 0x03, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E24E484E-5DE6-45DD-92D7-DEF54E447F17.html</loc>
                           <lastmod>2024-03-20T09:56:49</lastmod>
                           <title>2.5.4.27 USB_CDC_FUNCTIONAL_DESCRIPTOR Enumeration</title>
                           <description>C typedef enum { USB_CDC_FUNCTIONAL_HEADER = 0x00, USB_CDC_FUNCTIONAL_CALL_MANAGEMENT = 0x01, USB_CDC_FUNCTIONAL_ABSTRACT_CONTROL_MANAGEMENT = 0x02, USB_CDC_FUNCTIONAL_DIRECT_LINE = 0x03, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E37498A4-2E57-487A-9BBF-194C9F9171BB.html</loc>
                           <lastmod>2024-03-20T09:57:00</lastmod>
                           <title>2.5.4.28 USB_CDC_SUBCLASS Enumeration</title>
                           <description>C typedef enum { USB_CDC_SUBCLASS_DIRECT_LINE_CONTROL_MODEL = 0x01, USB_CDC_SUBCLASS_ABSTRACT_CONTROL_MODEL = 0x02, USB_CDC_SUBCLASS_TELEPHONE_CONTROL_MODEL = 0x03, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3601368E-E772-4488-ADBD-4C395CFD86DA.html</loc>
                           <lastmod>2024-03-20T09:57:09</lastmod>
                           <title>2.5.4.29 USB_CDC_UNION_FUNCTIONAL_DESCRIPTOR_SUBORDINATE Type</title>
                           <description>C typedef uint8_t USB_CDC_UNION_FUNCTIONAL_DESCRIPTOR_SUBORDINATE; Summary This is type </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-454BC6F8-F28C-4B4A-83A5-06C3FBE8A35D.html</loc>
                           <lastmod>2024-03-20T09:57:19</lastmod>
                           <title>2.5.4.30 CS_INTERFACE Macro</title>
                           <description>C #define CS_INTERFACE 0x24 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3D074D7A-AA2F-4A5F-B78D-7984A0B1A877.html</loc>
                           <lastmod>2024-03-20T09:57:26</lastmod>
                           <title>2.5.4.31 USB_CDC_ACM_SUPPORT_BREAK Macro</title>
                           <description>C #define USB_CDC_ACM_SUPPORT_BREAK ( 1 &lt;&lt; 2 ) Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9891D99C-E742-44E2-808B-C94F4F43698E.html</loc>
                           <lastmod>2024-03-20T09:57:33</lastmod>
                           <title>2.5.4.32 USB_CDC_ACM_SUPPORT_COMM_FEATURE Macro</title>
                           <description>C #define USB_CDC_ACM_SUPPORT_COMM_FEATURE ( 1 &lt;&lt; 0 ) Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B58EBA9C-7EB8-423E-ADE2-7F036BBFDC67.html</loc>
                           <lastmod>2024-03-20T09:58:03</lastmod>
                           <title>2.5.4.33 USB_CDC_ACM_SUPPORT_LINE_CODING_LINE_STATE_AND_NOTIFICATION Macro</title>
                           <description>C #define USB_CDC_ACM_SUPPORT_LINE_CODING_LINE_STATE_AND_NOTIFICATION ( 1 &lt;&lt; 1 ) Summary This is macro ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4925BF5A-2E5F-4953-8446-8C89C57A95B4.html</loc>
                           <lastmod>2024-03-20T09:58:10</lastmod>
                           <title>2.5.4.34 USB_CDC_ACM_SUPPORT_NETWORK_NOTIFICATION Macro</title>
                           <description>C #define USB_CDC_ACM_SUPPORT_NETWORK_NOTIFICATION ( 1 &lt;&lt; 3 ) Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-11AF19C3-F664-4B1B-8017-417DB1FBD6D9.html</loc>
                           <lastmod>2024-03-20T09:58:21</lastmod>
                           <title>2.5.4.35 USB_CDC_ACM_SUPPORT_NONE Macro</title>
                           <description>C #define USB_CDC_ACM_SUPPORT_NONE ( 0 ) Summary CDC ACM capabilities. This enumeration identifies the CDC ACM sub-class capabilities. Remarks This value goes into the bDescriptorSubtype of CDC ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7908B66C-8B2E-49EF-8A58-3F09DBD62100.html</loc>
                           <lastmod>2024-03-20T09:58:31</lastmod>
                           <title>2.5.4.36 USB_CDC_CLASS_CODE Macro</title>
                           <description>C #define USB_CDC_CLASS_CODE 0x02 Summary CDC Interface Class Subclass and Protocol constants. These constants identify the CDC Interface Class, Subclass and protocol constants. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-159024D5-935B-477F-9504-AA24B7746BAF.html</loc>
                           <lastmod>2024-03-20T09:58:39</lastmod>
                           <title>2.5.4.37 USB_CDC_COMMUNICATIONS_INTERFACE_CLASS_CODE Macro</title>
                           <description>C #define USB_CDC_COMMUNICATIONS_INTERFACE_CLASS_CODE 0x02 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-491A3C15-47B1-444E-A73D-3A1D901DD5D2.html</loc>
                           <lastmod>2024-03-20T09:59:40</lastmod>
                           <title>2.5.4.38 USB_CDC_DATA_INTERFACE_CLASS_CODE Macro</title>
                           <description>C #define USB_CDC_DATA_INTERFACE_CLASS_CODE 0x0A Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-98DB3901-CC6F-49AD-B907-7BD16BB4644E.html</loc>
                           <lastmod>2024-03-20T09:59:52</lastmod>
                           <title>2.5.4.39 USB_CDC_DATA_INTERFACE_PROTOCOL Macro</title>
                           <description>C #define USB_CDC_DATA_INTERFACE_PROTOCOL 0x00 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-62313696-8862-4737-BF2E-358D0F294911.html</loc>
                           <lastmod>2024-03-20T09:59:59</lastmod>
                           <title>2.5.4.40 USB_CDC_DATA_INTERFACE_SUBCLASS_CODE Macro</title>
                           <description>C #define USB_CDC_DATA_INTERFACE_SUBCLASS_CODE 0x00 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C91AD75A-B5AA-4442-8CA7-096625DD6BD3.html</loc>
                           <lastmod>2024-03-20T10:00:27</lastmod>
                           <title>2.5.4.41 USB_CDC_REQUEST_CLASS_SPECIFIC Macro</title>
                           <description>C #define USB_CDC_REQUEST_CLASS_SPECIFIC 0x20 Summary CDC specific </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-05C38618-DBB4-4BBC-BBAA-756849856564.html</loc>
                           <lastmod>2024-03-20T10:00:36</lastmod>
                           <title>2.5.4.42 USB_CDC_SUBCLASS_CODE Macro</title>
                           <description>C #define USB_CDC_SUBCLASS_CODE 0x00 Summary This is macro </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-08F33DBD-3376-4BE7-85E4-64A629254EC8.html</loc>
                           <lastmod>2024-03-20T10:00:48</lastmod>
                           <title>2.5.4.43 USB_DEVICE_CDC_INDEX_0 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_0 0 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B656F681-886C-490C-B29B-D55024886020.html</loc>
                           <lastmod>2024-03-20T10:00:57</lastmod>
                           <title>2.5.4.44 USB_DEVICE_CDC_INDEX_1 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_1 1 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-528ABE89-1678-4054-B3B4-80E00BD16BE6.html</loc>
                           <lastmod>2024-03-20T10:01:18</lastmod>
                           <title>2.5.4.45 USB_DEVICE_CDC_INDEX_2 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_2 2 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4163E4EA-A854-4EED-80E2-9800E918853E.html</loc>
                           <lastmod>2024-03-20T10:01:28</lastmod>
                           <title>2.5.4.46 USB_DEVICE_CDC_INDEX_3 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_3 3 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-501B39F2-D3B0-443B-A301-0FA51075273C.html</loc>
                           <lastmod>2024-03-20T10:01:36</lastmod>
                           <title>2.5.4.47 USB_DEVICE_CDC_INDEX_4 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_4 4 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4B9B0189-A4BE-42E1-8BC3-82B4DC1A2915.html</loc>
                           <lastmod>2024-03-20T10:02:05</lastmod>
                           <title>2.5.4.48 USB_DEVICE_CDC_INDEX_5 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_5 5 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-013FBC5D-2C41-440A-BA4F-6EA2C4EE00CC.html</loc>
                           <lastmod>2024-03-20T10:02:12</lastmod>
                           <title>2.5.4.49 USB_DEVICE_CDC_INDEX_6 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_6 6 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EA748B06-F9AD-4805-9FFA-25F2CAFCC821.html</loc>
                           <lastmod>2024-03-20T10:02:20</lastmod>
                           <title>2.5.4.50 USB_DEVICE_CDC_INDEX_7 Macro</title>
                           <description>C #define USB_DEVICE_CDC_INDEX_7 7 Summary Use this to specify CDC Function Driver Instance </description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C9A895ED-8281-4FCD-964A-E23FFFE8AA2F.html</loc>
                     <lastmod>2024-02-09T10:13:50</lastmod>
                     <title>2.5.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_device_cdc.hUSB Device CDC Function Driver Interface usb_cdc.hUSB CDC class definitions ...</description>
                     <urls>
                        <url>
                           <loc>GUID-21CA00FE-C3A5-46FC-A311-BC7B94A82CC0.html</loc>
                           <lastmod>2024-03-20T10:03:44</lastmod>
                           <title>2.5.5.1 usb_device_cdc.h</title>
                           <description>File Name usb_device_cdc.h Description USB Device CDC Function Driver Interface This file describes the USB Device CDC Function Driver interface. The application should include this file if it needs ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5C48E07F-61F2-467E-9122-B8D86E99C9ED.html</loc>
                           <lastmod>2024-03-20T10:04:36</lastmod>
                           <title>2.5.5.2 usb_cdc.h</title>
                           <description>File Name usb_cdc.h Description USB CDC class definitions This file describes the CDC class specific definitions. This file is included by usb_device_cdc.h and usb_host_cdc.h header files. The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-45648666-2DA8-4325-BB8E-627D15E66132.html</loc>
                           <lastmod>2024-03-20T10:05:13</lastmod>
                           <title>2.5.5.3 usb_device_cdc_config_template.h</title>
                           <description>File Name usb_device_cdc_config_template.h Description USB Device CDC Class Configuration Definitions This file contains configurations macros needed to configure the CDC Function Driver. This file ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-613273BE-7CAE-4009-8D41-414550E0F0DE.html</loc>
               <lastmod>2024-03-06T09:35:03</lastmod>
               <title>2.6 USB HID Device Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB Human Interface Device (HID) Device Library. Using the LibraryThis topic describes the basic architecture of the HID Function ...</description>
               <urls>
                  <url>
                     <loc>GUID-50D42099-7344-40E4-918E-13154121D2A9.html</loc>
                     <lastmod>2024-02-09T12:20:53</lastmod>
                     <title>2.6.1 Introduction</title>
                     <description>IntroductionThe MPLAB Harmony USB Human Interface Device (HID) Device Library (also referred to as the HID Function Driver or Library) provides a high-level abstraction of the Human Interface Device ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-595624EC-4CCE-4307-B842-F63F7C2BE7AD.html</loc>
                     <lastmod>2024-03-06T10:14:39</lastmod>
                     <title>2.6.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the HID Function Driver and provides information and examples on its use. Topics Name Description Abstraction ModelProvides an architectural overview of ...</description>
                     <urls>
                        <url>
                           <loc>GUID-AF57B681-E4F1-4804-92D8-7AE46E19B1FA.html</loc>
                           <lastmod>2024-03-20T10:07:55</lastmod>
                           <title>2.6.2.1 Abstraction Model</title>
                           <description>The HID Function Driver offers services to a USB HID device to communicate with the host by abstracting the HID specification details. It must be used along with the USB Device Layer and USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C212F887-E4CD-48DF-9C39-5B8776F9CA1F.html</loc>
                           <lastmod>2024-02-09T12:21:08</lastmod>
                           <title>2.6.2.2 Library Overview</title>
                           <description>The USB HID Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model. The library interface routines are divided into sub-sections, which ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CDF1AB14-6544-4C88-ACF3-4ED3E389D1B9.html</loc>
                           <lastmod>2024-02-09T12:21:12</lastmod>
                           <title>2.6.2.3 How the Library Works</title>
                           <description>Topics Name Description Library InitializationDescribes how the HID Function Driver is initialized. Event HandlingDescribes HID Function Driver event handler registration and event handling. Sending ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-61063F59-3AE7-44A6-9590-82ACFA1F3AB1.html</loc>
                                 <lastmod>2024-02-09T12:21:17</lastmod>
                                 <title>2.6.2.3.1 Library Initialization</title>
                                 <description>The HID Function Driver instance for a USB device configuration is initialized by the Device Layer when the configuration is set by the Host. This process does not require application intervention. ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-5A9F6A13-FE93-4537-AD8D-A381CF3D3ED8.html</loc>
                                 <lastmod>2024-03-20T10:11:07</lastmod>
                                 <title>2.6.2.3.2 Event Handling</title>
                                 <description>Registering a HID Function Driver Event Handler While creating a USB HID Device-based application, an event handler must be registered with the Device Layer (the Device Layer Event Handler) and every ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-6C9757CA-EFD4-4E16-8E77-8EFBA055AEFA.html</loc>
                                 <lastmod>2024-02-09T12:21:25</lastmod>
                                 <title>2.6.2.3.3 Sending a Report</title>
                                 <description>The USB HID Device sends data to the USB HID Host as reports. The USB HID Device application should use the USB_DEVICE_HID_ReportSend function to send the report. This function returns a transfer ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-007998B2-7417-4254-93FA-5C9BC7F3F052.html</loc>
                                 <lastmod>2024-02-09T12:20:49</lastmod>
                                 <title>2.6.2.3.4 Receiving a Report</title>
                                 <description>The application can receive a report from the Host by using the USB_DEVICE_HID_ReportReceive function. This function returns a transfer handler that allows the application to track the read request. ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-8E4C5D7F-1316-4C6D-A4F5-B88C8DCB4585.html</loc>
                     <lastmod>2024-03-20T10:12:05</lastmod>
                     <title>2.6.3 Configuring the Library</title>
                     <description>The following configuration parameters must be defined while using the HID Function Driver. The configuration macros that implement these parameters must be located in the system_config.h file in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-31ACD5A9-E1A6-42EF-B37D-F6ACCA6F0553.html</loc>
                           <lastmod>2024-03-20T10:12:56</lastmod>
                           <title>2.6.3.1 USB_DEVICE_HID_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_HID_INSTANCES_NUMBER Summary USB Device HID Maximum Number of Instances This macro defines the number of instances of the HID Function Driver. For example, if the application ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5E48AD59-0631-4E8E-83B1-307CFD3A9174.html</loc>
                           <lastmod>2024-03-20T10:13:07</lastmod>
                           <title>2.6.3.2 USB_DEVICE_HID_QUEUE_DEPTH_COMINED Macro</title>
                           <description>C #define USB_DEVICE_HID_QUEUE_DEPTH_COMINE Summary </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2BC505E3-2B2C-4DFD-9D3A-D9770F44C1F6.html</loc>
                           <lastmod>2024-03-20T10:13:31</lastmod>
                           <title>2.6.3.3 Configuration on MCC</title>
                           <description>Select Report Type Symbol name: CONFIG_USB_DEVICE_HID_REPORT_DESCRIPTOR_TYPE This option is used to select between a range of available report descriptors or to use a custom one. Available report ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-5301AF18-7C50-4F35-B7FF-D58CE03EB223.html</loc>
                     <lastmod>2024-03-20T10:14:25</lastmod>
                     <title>2.6.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Device HID library. Refer to each section for a detailed description. a) Functions Name Description ...</description>
                     <urls>
                        <url>
                           <loc>GUID-06FC9CDD-3F15-430C-B50D-B8A9431D1112.html</loc>
                           <lastmod>2024-03-21T07:19:11</lastmod>
                           <title>2.6.4.1 USB_DEVICE_HID_EventHandlerSet Function</title>
                           <description>C USB_DEVICE_HID_RESULT USB_DEVICE_HID_EventHandlerSet( USB_DEVICE_HID_INDEX instanceIndex, USB_DEVICE_HID_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function registers a event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-37EF648F-6862-4AEA-8521-036F86857949.html</loc>
                           <lastmod>2024-03-21T07:19:20</lastmod>
                           <title>2.6.4.2 USB_DEVICE_HID_ReportReceive Function</title>
                           <description>C USB_DEVICE_HID_RESULT USB_DEVICE_HID_ReportReceive( USB_DEVICE_HID_INDEX instanceIndex, USB_DEVICE_HID_TRANSFER_HANDLE * handle, void * buffer, size_t size ); Summary This function submits the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DAB783CA-B2FB-46FA-A145-8E3BCBC5ADF4.html</loc>
                           <lastmod>2024-03-21T07:19:21</lastmod>
                           <title>2.6.4.3 USB_DEVICE_HID_ReportSend Function</title>
                           <description>C USB_DEVICE_HID_RESULT USB_DEVICE_HID_ReportSend( USB_DEVICE_HID_INDEX instanceIndex, USB_DEVICE_HID_TRANSFER_HANDLE * handle, void * buffer, size_t size ); Description This function places a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-403CD4F6-D66D-44AB-A085-EAFA96C35DEF.html</loc>
                           <lastmod>2024-03-21T07:19:22</lastmod>
                           <title>2.6.4.4 USB_DEVICE_HID_TransferCancel Function</title>
                           <description>C USB_DEVICE_HID_RESULT USB_DEVICE_HID_TransferCancel( USB_DEVICE_HID_INDEX instanceIndex, USB_DEVICE_HID_TRANSFER_HANDLE transferHandle ); Description This function cancels a scheduled HID Device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-397216C2-9CAE-40AB-BD95-962F2317E7FB.html</loc>
                           <lastmod>2024-03-20T10:17:41</lastmod>
                           <title>2.6.4.5 USB_DEVICE_HID_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_HID_EVENT_GET_REPORT, USB_DEVICE_HID_EVENT_GET_IDLE, USB_DEVICE_HID_EVENT_GET_PROTOCOL, USB_DEVICE_HID_EVENT_SET_REPORT, USB_DEVICE_HID_EVENT_SET_IDLE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-65726836-5033-457A-B846-E13C2789E6E5.html</loc>
                           <lastmod>2024-03-20T10:17:51</lastmod>
                           <title>2.6.4.6 USB_DEVICE_HID_EVENT_DATA_GET_IDLE Structure</title>
                           <description>C typedef struct { uint8_t reportID; } USB_DEVICE_HID_EVENT_DATA_GET_IDLE; Summary USB Device HID Get Idle Event Data This defines the data type of the data generated to the HID event handler on a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AC2272EE-2261-4C35-B030-D59B9B0A4294.html</loc>
                           <lastmod>2024-03-20T10:18:01</lastmod>
                           <title>2.6.4.7 USB_DEVICE_HID_EVENT_DATA_GET_REPORT Structure</title>
                           <description>C typedef struct { uint8_t reportType; uint8_t reportID; uint16_t reportLength; } USB_DEVICE_HID_EVENT_DATA_GET_REPORT; Summary USB Device HID Get Report Event Data Type. This defines the data type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6C8784C3-C028-42C2-8DF6-BF3CFF33B9B2.html</loc>
                           <lastmod>2024-03-20T10:21:00</lastmod>
                           <title>2.6.4.8 USB_DEVICE_HID_EVENT_DATA_REPORT_RECEIVED Structure</title>
                           <description>C typedef struct { USB_DEVICE_HID_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_HID_RESULT status; } USB_DEVICE_HID_EVENT_DATA_REPORT_RECEIVED; Summary USB Device HID Report Received Event Data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1EE264AD-0867-4DDC-A17F-57E229339EE6.html</loc>
                           <lastmod>2024-03-20T10:21:15</lastmod>
                           <title>2.6.4.9 USB_DEVICE_HID_EVENT_DATA_REPORT_SENT Structure</title>
                           <description>C typedef struct { USB_DEVICE_HID_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_HID_RESULT status; } USB_DEVICE_HID_EVENT_DATA_REPORT_SENT; Summary USB Device HID Report Sent Event Data Type. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E3DE8865-05B6-4C39-8344-C94A624D0221.html</loc>
                           <lastmod>2024-03-20T10:21:27</lastmod>
                           <title>2.6.4.10 USB_DEVICE_HID_EVENT_DATA_SET_IDLE Structure</title>
                           <description>C typedef struct { uint8_t duration; uint8_t reportID; } USB_DEVICE_HID_EVENT_DATA_SET_IDLE; Summary USB Device HID Set Idle Event Data Type. This defines the data type of the data generated to the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-70118E78-014F-430B-8F14-3F4DCB9FFB26.html</loc>
                           <lastmod>2024-03-20T10:21:37</lastmod>
                           <title>2.6.4.11 USB_DEVICE_HID_EVENT_DATA_SET_REPORT Structure</title>
                           <description>C typedef struct { uint8_t reportType; uint8_t reportID; uint16_t reportLength; } USB_DEVICE_HID_EVENT_DATA_SET_REPORT; Summary USB Device HID Set Report Event Data Type. This defines the data type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D17810EA-CEC0-4C39-A490-FE8C4530D742.html</loc>
                           <lastmod>2024-03-20T10:21:48</lastmod>
                           <title>2.6.4.12 USB_DEVICE_HID_EVENT_DATA_SET_PROTOCOL Structure</title>
                           <description>C typedef struct { USB_HID_PROTOCOL_CODE protocolCode; } USB_DEVICE_HID_EVENT_DATA_SET_PROTOCOL; Summary USB Device HID Set Protocol Event Data This defines the data type of the data generated to the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-80DC1F54-AB7F-4A80-8FE3-126D081FE590.html</loc>
                           <lastmod>2024-03-20T10:21:57</lastmod>
                           <title>2.6.4.13 USB_DEVICE_HID_INDEX Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_HID_INDEX; Summary USB Device HID Driver Index Numbers This uniquely identifies a HID Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F6787F64-33FD-4E49-BB0F-B29A58ECDA18.html</loc>
                           <lastmod>2024-03-20T10:22:07</lastmod>
                           <title>2.6.4.14 USB_DEVICE_HID_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_HID_TRANSFER_HANDLE; Summary USB Device HID Function Driver Transfer Handle Definition This definition defines a USB Device HID Function Driver Transfer Handle. A ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C05E189B-6A3B-44C3-A09D-E057DFA3B558.html</loc>
                           <lastmod>2024-03-20T10:22:18</lastmod>
                           <title>2.6.4.15 USB_DEVICE_HID_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_HID_EVENT_RESPONSE (* USB_DEVICE_HID_EVENT_HANDLER)(USB_DEVICE_HID_INDEX instanceIndex, USB_DEVICE_HID_EVENT event, void * pData, uintptr_t context); Description USB Device HID ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-28BF88E1-9720-4E7B-970A-45C810E6CDC1.html</loc>
                           <lastmod>2024-03-20T10:22:28</lastmod>
                           <title>2.6.4.16 USB_DEVICE_HID_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_HID_EVENT_RESPONSE; Summary USB Device HID Function Driver Event Handler Response Type This is the return type of the HID Function Driver event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F45582D4-3E55-49F9-BAFF-E3C6AA71ABF1.html</loc>
                           <lastmod>2024-03-20T10:23:37</lastmod>
                           <title>2.6.4.17 USB_DEVICE_HID_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_HID_RESULT_OK, USB_DEVICE_HID_RESULT_ERROR_TRANSFER_QUEUE_FULL, USB_DEVICE_HID_RESULT_ERROR_INSTANCE_NOT_CONFIGURED, USB_DEVICE_HID_RESULT_ERROR_INSTANCE_INVALID, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-572CCFB9-124C-4ACB-BDD6-B2536ACD2BC3.html</loc>
                           <lastmod>2024-03-20T10:24:10</lastmod>
                           <title>2.6.4.18 USB_DEVICE_HID_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_HID_EVENT_RESPONSE_NONE Summary USB Device HID Function Driver Event Handler Response None This is the definition of the HID Function Driver Event Handler Response Type none. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6E170651-0218-41C0-855D-4E21C8B72F83.html</loc>
                           <lastmod>2024-03-20T10:24:19</lastmod>
                           <title>2.6.4.19 USB_DEVICE_HID_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_HID_TRANSFER_HANDLE_INVALID Summary USB Device HID Function Driver Invalid Transfer Handle Definition This definition defines a USB Device HID Function Driver Invalid Transfer ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-534E4212-D282-46A2-A558-46CA2DAF2363.html</loc>
                           <lastmod>2024-03-20T10:24:31</lastmod>
                           <title>2.6.4.20 USB_DEVICE_HID_INIT Structure</title>
                           <description>C typedef struct { size_t hidReportDescriptorSize; void * hidReportDescriptor; size_t queueSizeReportSend; size_t queueSizeReportReceive; } USB_DEVICE_HID_INIT; Summary USB Device HID Function Driver ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9DD6ABB1-9040-4AD6-B53D-E4BBAC211D66.html</loc>
                           <lastmod>2024-03-20T10:24:40</lastmod>
                           <title>2.6.4.21 USB_DEVICE_HID_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_HID_FUNCTION_DRIVER Summary USB Device HID Function Driver Device Layer callback function pointer group This is a pointer to a group of HID Function Driver callback function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2DC4D028-BB47-4CFA-AA40-82AF533112B3.html</loc>
                           <lastmod>2024-03-20T10:24:48</lastmod>
                           <title>2.6.4.22 USB_DEVICE_HID_INDEX_0 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_0 0 Summary USB Device HID Function Driver Index Constants This constants can be used by the application to specify HID function driver instance indexes. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C5BFD23F-2632-47C3-860C-D0B8151E69A0.html</loc>
                           <lastmod>2024-03-20T10:24:55</lastmod>
                           <title>2.6.4.23 USB_DEVICE_HID_INDEX_1 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_1 1 Summary This is macro USB_DEVICE_HID_INDEX_1. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-664DED93-C8C3-4632-97EB-7C2CDF704FEB.html</loc>
                           <lastmod>2024-03-20T10:25:03</lastmod>
                           <title>2.6.4.24 USB_DEVICE_HID_INDEX_2 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_2 2 Summary This is macro USB_DEVICE_HID_INDEX_2. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-22EE56B4-B6C8-4E95-8EFC-4C0E3E0D8E11.html</loc>
                           <lastmod>2024-03-20T10:26:08</lastmod>
                           <title>2.6.4.25 USB_DEVICE_HID_INDEX_3 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_3 3 Summary This is macro USB_DEVICE_HID_INDEX_3. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9946E523-4F90-4ECB-97CD-64E612E3C446.html</loc>
                           <lastmod>2024-03-20T10:26:01</lastmod>
                           <title>2.6.4.26 USB_DEVICE_HID_INDEX_4 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_4 4 Summary This is macro USB_DEVICE_HID_INDEX_4. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8C10CFE3-5360-4419-9D79-0AAAC1E38513.html</loc>
                           <lastmod>2024-03-20T10:25:50</lastmod>
                           <title>2.6.4.27 USB_DEVICE_HID_INDEX_5 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_5 5 Summary This is macro USB_DEVICE_HID_INDEX_5. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FEF53A3E-258D-4527-BD21-C4F08A47D866.html</loc>
                           <lastmod>2024-03-20T10:25:43</lastmod>
                           <title>2.6.4.28 USB_DEVICE_HID_INDEX_6 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_6 6 Summary This is macro USB_DEVICE_HID_INDEX_6. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-48787976-63C7-4713-AD1D-C36CCA328997.html</loc>
                           <lastmod>2024-03-20T10:25:37</lastmod>
                           <title>2.6.4.29 USB_DEVICE_HID_INDEX_7 Macro</title>
                           <description>C #define USB_DEVICE_HID_INDEX_7 7 Summary This is macro USB_DEVICE_HID_INDEX_7. Remarks </description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C259A676-B530-4FFF-8182-0AC6EF902D54.html</loc>
                     <lastmod>2024-03-20T10:26:49</lastmod>
                     <title>2.6.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_device_hid.hUSB HID Function Driver usb_device_hid_config_template.h USB device HID class configuration ...</description>
                     <urls>
                        <url>
                           <loc>GUID-5C56C04E-FF41-4940-BF24-4FA814962D83.html</loc>
                           <lastmod>2024-03-20T10:27:42</lastmod>
                           <title>2.6.5.1 usb_device_hid.h</title>
                           <description>File Name usb_hid_function_driver.h Description USB HID Function Driver This file contains the API definitions for the USB Device HID Function Driver. The application should include this file if it ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E58A1653-A654-475E-A32C-AE794E778302.html</loc>
                           <lastmod>2024-03-20T10:28:11</lastmod>
                           <title>2.6.5.2 usb_device_hid_config_template.h</title>
                           <description>File Name usb_device_hid_config_template.h Description USB Device HID Class Configuration Definitions This file contains configurations macros needed to configure the HID Function Driver. This file ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-307732A6-6933-419F-82A5-10A831C61589.html</loc>
               <lastmod>2024-03-06T09:39:44</lastmod>
               <title>2.7 Generic USB Device Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony Generic USB Device Library. Using the Library This topic describes the basic architecture of the Generic USB Device Library and ...</description>
               <urls>
                  <url>
                     <loc>GUID-ADBEA5C4-8DC3-4D72-9CDB-520604248317.html</loc>
                     <lastmod>2024-02-11T16:28:30</lastmod>
                     <title>2.7.1 Introduction</title>
                     <description>A USB Device that does not follow any of the standard USB device class specifications is referred to as Generic (or a Vendor) USB Device. Such a device may be needed in cases where a standard USB ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-1FF0233A-C4F7-429A-B31D-9B93C2E20269.html</loc>
                     <lastmod>2024-02-11T16:28:44</lastmod>
                     <title>2.7.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the Generic USB Device Library and provides information and examples on its use. Topics Name Description Library OverviewProvides an overview of the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-5197807A-D628-4CCA-9838-6905FF999387.html</loc>
                           <lastmod>2024-03-06T09:38:19</lastmod>
                           <title>2.7.2.1 Library Overview</title>
                           <description>The Generic Function Driver features API to set application event handlers and transfer data over non-zero endpoints. The function driver is initialized by the Device Layer when a Set Configuration ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4CFF1E3E-A86F-43C2-84D3-C00FEC53DE10.html</loc>
                           <lastmod>2024-03-20T10:32:08</lastmod>
                           <title>2.7.2.2 Abstraction Model</title>
                           <description>The Generic USB Device Library consists of USB Device Layer Endpoint API and events. The API allows the application to configure, enable, and disable endpoints. Endpoints can be configured for bulk, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0B19CD1A-8339-4929-8CC1-7BE519503F94.html</loc>
                           <lastmod>2024-02-11T16:28:26</lastmod>
                           <title>2.7.2.3 How the Library Works</title>
                           <description>This topic describes the basic architecture of the Generic USB Device Library and provides information and examples on its use. Topics Name Description Library InitializationDescribes how the Generic ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-DF775A45-5413-4C2C-A5F0-29DCB7DFE3B6.html</loc>
                                 <lastmod>2024-02-11T16:28:34</lastmod>
                                 <title>2.7.2.3.1 Library Initialization</title>
                                 <description>Unlike the standard USB function drivers in the MPLAB Harmony USB Device Stack, in the case of a Generic USB Device, the USB Device Layer does not automatically enable or disable endpoints that ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-A3E05EE9-9BD4-4A22-B2BA-0D4FE9F89B30.html</loc>
                                 <lastmod>2024-02-12T05:12:29</lastmod>
                                 <title>2.7.2.3.2 Event Handling</title>
                                 <description>The USB Device Layer generates two different types of events for a Generic USB Device.Control transfer eventsEndpoint data transfer eventsWhile handing Device Layer events, it is recommended that ...</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-40E32FC5-AD81-43AC-956D-D4575E51EDD0.html</loc>
                                       <lastmod>2024-03-20T10:33:23</lastmod>
                                       <title>2.7.2.3.2.1 Control Transfer Events</title>
                                       <description>These events occur when the Device Layer has received a control transfer that is targeted to an interface or an endpoint which is managed by the Generic USB Device Application. The ...</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-E32C96E5-72F9-4B6A-AB9F-2839C916D9AC.html</loc>
                                       <lastmod>2024-02-12T05:12:37</lastmod>
                                       <title>2.7.2.3.2.2 Endpoint Data Transfer Events</title>
                                       <description>The USB Device Layer provides notification events to indicate completion of transfers. These events are generated by the Device Layer and are made available in the Device Layer event handler. The ...</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-2CBA32E0-401E-43B7-A848-82F78615C6E3.html</loc>
                                 <lastmod>2024-03-20T10:34:43</lastmod>
                                 <title>2.7.2.3.3 Endpoint Management</title>
                                 <description>Unlike standard USB function drivers, such as CDC, MSD, Audio, and HID, the Device Layer does not automatically manage endpoints for a Generic USB Device interface. This means that the application ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-5B340DD0-D958-429C-B4D0-065B75E0C64D.html</loc>
                                 <lastmod>2024-03-20T10:35:43</lastmod>
                                 <title>2.7.2.3.4 Endpoint Data Transfer</title>
                                 <description>The application should call the USB_DEVICE_EndpointRead and USB_DEVICE_EndpointWrite functions to transfer data over an enabled endpoint. Calling this function causes a USB transfer to be scheduled ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-3A629EF2-1560-4A67-B4C6-62D89DB9BE3D.html</loc>
                     <lastmod>2024-03-19T13:07:09</lastmod>
                     <title>2.7.3 Configuring the Library</title>
                     <description>The application designer must specify the following configuration parameters while implementing the Generic USB Device. The configuration macros that implement these parameters must be located in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-553C6C3D-930F-49D3-8F15-313F4A392891.html</loc>
                           <lastmod>2024-03-20T10:36:28</lastmod>
                           <title>2.7.3.1 Configuration on MCC</title>
                           <description>Bulk OUT Endpoint Number Symbol name: CONFIG_USB_DEVICE_FUNCTION_BULK_OUT_ENDPOINT_NUMBER Specify the endpoint number of Bulk Out Endpoint to be used for this instance of the Vendor Interface. Refer ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-685A5AB1-9D2A-4BD8-A7E0-EC3B85DD4CF1.html</loc>
                     <lastmod>2024-02-12T05:00:34</lastmod>
                     <title>2.7.4 Library Interface</title>
                     <description>The API for implementing the Generic USB Device is contained the USB Device Library. Please refer to the Library Interface section in the USB Device Layer Library for more ...</description>
                     <urls/>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-CC2E109D-AC7E-40AA-977A-31768A94691F.html</loc>
               <lastmod>2024-03-06T09:46:55</lastmod>
               <title>2.8 USB MSD Device Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB Mass Storage Device (MSD) Library. Using the Library This topic describes the basic architecture of the USB MSD Device Library and ...</description>
               <urls>
                  <url>
                     <loc>GUID-0D3E04E2-5DEA-4B1A-9ADC-A9954A3031E2.html</loc>
                     <lastmod>2024-02-12T05:45:16</lastmod>
                     <title>2.8.1 Introduction</title>
                     <description>The USB Mass Storage Device Library (also referred to as the MSD Function Driver) allows applications to create USB Mass Storage device such as USB Pen Drives or USB-based SD Card readers. ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-D8C8F753-7ED6-4715-8CE3-767F2971A637.html</loc>
                     <lastmod>2024-03-20T10:37:33</lastmod>
                     <title>2.8.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB MSD Device Library and provides information and examples on its use. Topics Name Description Abstraction ModelProvides an architectural overview ...</description>
                     <urls>
                        <url>
                           <loc>GUID-0A2D68CA-1771-4CD9-8A1A-3B0900A484AD.html</loc>
                           <lastmod>2024-03-20T10:37:56</lastmod>
                           <title>2.8.2.1 Abstraction Model</title>
                           <description>The following diagram illustrates the functional interaction between the application, the MSD Function Driver, the media drivers, and the USB Device Layer.As seen in the previous figure, the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-78A83D9C-6B2E-4A23-88D2-4AEE314B556F.html</loc>
                           <lastmod>2024-02-12T05:45:30</lastmod>
                           <title>2.8.2.2 Library Overview</title>
                           <description>The USB MSD Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model. The library interface routines are divided into sub-sections, which ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2D304348-8671-42E9-924A-728B6D599C44.html</loc>
                           <lastmod>2024-02-12T05:45:34</lastmod>
                           <title>2.8.2.3 How the Library Works</title>
                           <description>This section explains how the MSD Function Driver should be added to the USB Device application and how a media driver should be plugged into it. Considerations while creating new media drivers to ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-61675C9D-E060-41C9-83FD-499084998DB2.html</loc>
                                 <lastmod>2024-03-20T10:39:14</lastmod>
                                 <title>2.8.2.3.1 Library Initialization</title>
                                 <description>The MSD Function Driver instance for a USB Device configuration is initialized by the USB Device Layer when the Host sets that configuration. This process does not require application intervention. ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-2B2E7E8E-64D8-4534-B173-21A4712469BE.html</loc>
                                 <lastmod>2024-02-12T05:45:43</lastmod>
                                 <title>2.8.2.3.2 Data Transfer</title>
                                 <description>The MSD Function Driver opens the media drivers for read/write operations when the function driver is initialized by the Device Layer. This happens when the Host sets a configuration containing MSD ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-FC53BCF5-9F98-4F86-B5FA-F31FCAA21188.html</loc>
                     <lastmod>2024-03-19T13:15:47</lastmod>
                     <title>2.8.3 Configuring the Library</title>
                     <description>The following configuration parameters must be defined while using the MSD Function Driver. The configuration macros that implement these parameters must be located in the system_config.h file in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-10501ED4-8BDA-4285-B475-06B7AC82B360.html</loc>
                           <lastmod>2024-03-20T10:40:59</lastmod>
                           <title>2.8.3.1 USB_DEVICE_MSD_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_MSD_INSTANCES_NUMBER 1 Summary MSD Function Driver Instances Number This configuration constant defines the number of MSD Function Driver instances in the USB Device. This value ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-95B815B1-EA18-49C6-A354-EB8C54DFE5BF.html</loc>
                           <lastmod>2024-03-20T10:41:08</lastmod>
                           <title>2.8.3.2 USB_DEVICE_MSD_LUNS_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_MSD_LUNS_NUMBER 1 Summary Number of LUNs This constant sets maximum possible number of Logical Unit (LUN) an instance of MSD can support. This value should be atleast 1. In cases ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2A3276B1-EA3F-4B65-A161-65B8A7DF7E24.html</loc>
                           <lastmod>2024-04-03T06:11:11</lastmod>
                           <title>2.8.3.3 Configuration on MCC</title>
                           <description>Max Sectors To Buffer Symbol name: CONFIG_USB_DEVICE_FUNCTION_MSD_MAX_SECTORS_COMMON This symbol can be used to configure the number of data sectors to be buffered before initiating a ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C59670DA-208B-41D5-8538-4B67A4126E34.html</loc>
                     <lastmod>2024-03-20T10:42:03</lastmod>
                     <title>2.8.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB MSD Device Library. Refer to each section for a detailed description. Data Types and Constants Name Description ...</description>
                     <urls>
                        <url>
                           <loc>GUID-0C6E3763-6891-4F6C-9129-EFF63B393454.html</loc>
                           <lastmod>2024-03-20T10:43:43</lastmod>
                           <title>2.8.4.1 USB_DEVICE_MSD_INIT Structure</title>
                           <description>C typedef struct { uint8_t numberOfLogicalUnits; USB_MSD_CBW * msdCBW; USB_MSD_CSW * msdCSW; USB_DEVICE_MSD_MEDIA_INIT_DATA * mediaInit; } USB_DEVICE_MSD_INIT; Summary USB MSD init structure. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-96388955-BB3B-421B-BC09-0F2F615F7F0E.html</loc>
                           <lastmod>2024-03-20T10:45:04</lastmod>
                           <title>2.8.4.2 USB_DEVICE_MSD_MEDIA_FUNCTIONS Structure</title>
                           <description>C struct USB_DEVICE_MSD_MEDIA_FUNCTIONS { bool (* isAttached)(const DRV_HANDLE handle); DRV_HANDLE (* open)(const SYS_MODULE_INDEX index, const DRV_IO_INTENT intent); void (* close)(DRV_HANDLE ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-97A7CE95-33AC-459B-9117-F1B9281F85F2.html</loc>
                           <lastmod>2024-03-20T10:46:10</lastmod>
                           <title>2.8.4.3 USB_DEVICE_MSD_MEDIA_INIT_DATA Structure</title>
                           <description>C typedef struct { SYS_MODULE_INDEX instanceIndex; uint32_t sectorSize; uint8_t * sectorBuffer; uint8_t * blockBuffer; void * block0StartAddress; SCSI_INQUIRY_RESPONSE inquiryResponse; ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1969BED5-0294-4BB7-BAA0-37DD562B58F2.html</loc>
                           <lastmod>2024-03-20T10:46:22</lastmod>
                           <title>2.8.4.4 USB_DEVICE_MSD_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_MSD_FUNCTION_DRIVER Summary USB Device MSD Function Driver Function Pointer This is the USB Device MSD Function Driver Function pointer. This should registered with the device ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-FB85185B-80B9-42A2-B7F7-AB6B1639F919.html</loc>
                     <lastmod>2024-02-12T05:46:00</lastmod>
                     <title>2.8.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_device_msd.hUSB device MSD function driver interface header usb_device_msd_config_template.hUSB Device ...</description>
                     <urls>
                        <url>
                           <loc>GUID-7E071F5C-B6D5-4EE6-90DA-44FAFA7B41AF.html</loc>
                           <lastmod>2024-03-06T09:49:57</lastmod>
                           <title>2.8.5.1 usb_device_msd.h</title>
                           <description>File Name usb_device_msd.h Description USB MSD function driver interface header USB device MSD function driver interface header. This file should be included in the application if USB MSD ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-39A1539D-0479-4514-BAD2-42F630D9FE4B.html</loc>
                           <lastmod>2024-03-06T09:54:05</lastmod>
                           <title>2.8.5.2 usb_device_msd_config_template.h</title>
                           <description>File Name usb_device_msd_config_template.h Description USB Device MSD function driver compile time options This file contains USB device MSD function driver compile time options(macros) that has to ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-D225D104-1D70-4E1D-9E88-40C8E685F725.html</loc>
               <lastmod>2024-03-06T09:33:08</lastmod>
               <title>2.9 USB Device Printer Library</title>
               <description>Topics Name Description Introduction This help section provides information on library design, configuration, usage and the Library Interface for the USB Printer Class Device Library. Using the ...</description>
               <urls>
                  <url>
                     <loc>GUID-90607C90-4E85-44CB-8394-23EFF1E907CD.html</loc>
                     <lastmod>2024-02-12T10:13:11</lastmod>
                     <title>2.9.1 Introduction</title>
                     <description>The MPLAB Harmony USB Printer Device Library (also referred to as the Printer function driver or library) provides functions and methods that allow application designers to implement a USB Printer ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-43832513-90EF-4956-9E08-895F5AB064F3.html</loc>
                     <lastmod>2024-03-06T10:14:42</lastmod>
                     <title>2.9.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB Printer Device Library and provides information and examples on its use. Topics Name Description Abstraction Model Provides an architectural ...</description>
                     <urls>
                        <url>
                           <loc>GUID-E4D9564A-4368-49EB-8D7C-578A1FDF9849.html</loc>
                           <lastmod>2024-03-20T10:51:39</lastmod>
                           <title>2.9.2.1 Abstraction Model</title>
                           <description>The Printer Function Driver offers services to a USB Printer Device to communicate with the host by abstracting the USB specification details. It must be used along with the USB Device Layer and USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DFFAF7A7-8AA2-4578-B1DE-FD12190CD69C.html</loc>
                           <lastmod>2024-03-08T05:56:26</lastmod>
                           <title>2.9.2.2 Library Overview</title>
                           <description>The USB Printer Device Library mainly interacts with the system, its clients and function drivers, as shown in the Abstraction Model. The library interface routines are divided into sub-sections, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-68A60D5B-583D-48B1-845A-67C6367BAC8D.html</loc>
                           <lastmod>2024-03-06T10:08:22</lastmod>
                           <title>2.9.2.3 How the Library Works</title>
                           <description>Topics Name Description Library Initialization Describes how the Printer Function Driver is initialized. Event Handling Describes Printer Function Driver event handler registration and event ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-F05D0406-F2FA-4339-9439-E737B62D0371.html</loc>
                                 <lastmod>2024-02-12T10:13:45</lastmod>
                                 <title>2.9.2.3.1 Library Initialization</title>
                                 <description>The Printer Function Driver instance for a USB device configuration is initialized by the Device Layer when the configuration is set by the host. This process does not require application ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-A9613841-9778-4755-96B3-23C645E2B6CE.html</loc>
                                 <lastmod>2024-03-20T10:54:46</lastmod>
                                 <title>2.9.2.3.2 Event Handling</title>
                                 <description>Registering a Printer Function Driver Event Handler While creating an USB Printer Device-based application, an event handler must be registered with the Device Layer (the Device Layer Event Handler) ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-E5DC60D3-EBD8-4AA5-BBAC-88C03F9F409E.html</loc>
                                 <lastmod>2024-03-20T10:59:26</lastmod>
                                 <title>2.9.2.3.3 Sending Data</title>
                                 <description>The application may need to send data to the USB Printer Host in case the Printer device supports Bi-directional interface type. This is done by using the USB_DEVICE_PRINTER_Write function. Sending ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-18D064D2-5E23-41AB-8833-C366AF6C25A4.html</loc>
                                 <lastmod>2024-03-20T11:11:28</lastmod>
                                 <title>2.9.2.3.4 Receiving Data</title>
                                 <description>The application can receive data from the host by using the USB_DEVICE_PRINTER_Read function. This function returns a transfer handle that allows the application to track the read request. The ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-3300B4EF-4148-47A3-AAE9-64AED2445FFC.html</loc>
                     <lastmod>2024-03-19T13:15:58</lastmod>
                     <title>2.9.3 Configuring the Library</title>
                     <description>The application designer must specify the following configuration parameters while using the Printer Function Driver. The configuration macros that implement these parameters must be located in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-CFF44211-03B2-4DB6-9116-7F767205F276.html</loc>
                           <lastmod>2024-03-20T11:13:04</lastmod>
                           <title>2.9.3.1 USB_DEVICE_PRINTER_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_INSTANCES_NUMBER Summary USB device Printer Maximum Number of instances This macro defines the number of instances of the Printer Function Driver. Do not modify this ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BBAB89FF-3A42-4E1A-A0B3-79787EFA0AC9.html</loc>
                           <lastmod>2024-03-20T11:13:28</lastmod>
                           <title>2.9.3.2 USB_DEVICE_PRINTER_QUEUE_DEPTH_COMBINED Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_QUEUE_DEPTH_COMBINED Summary USB device Printer Combined Queue Size This macro defines the number of entries in all queues in all instances of the Printer function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1B0436D8-7EEB-4A58-B40F-BDACEFB53F75.html</loc>
                           <lastmod>2024-04-03T06:06:44</lastmod>
                           <title>2.9.3.3 Configuration on MCC</title>
                           <description>Bulk OUT Endpoint Number Symbol name: CONFIG_USB_DEVICE_FUNCTION_BULK_OUT_ENDPOINT_NUMBER Specify the endpoint number of Bulk Out Endpoint to be used for this instance of the Printer Interface. Refer ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-E27B1F3C-5E24-4486-8F5D-AC3E9FEF9F1F.html</loc>
                     <lastmod>2024-03-20T11:15:11</lastmod>
                     <title>2.9.4 Library Interface</title>
                     <description>Functions Name Description USB_DEVICE_PRINTER_EventHandlerSetThis function registers a event handler for the specified PRINTER function driver instance. USB_DEVICE_PRINTER_ReadThis function requests ...</description>
                     <urls>
                        <url>
                           <loc>GUID-A8DF9D06-936D-4BD8-8A4B-EEEEF9687D89.html</loc>
                           <lastmod>2024-03-21T08:44:59</lastmod>
                           <title>2.9.4.1 USB_DEVICE_PRINTER_EventHandlerSet Function</title>
                           <description>C USB_DEVICE_PRINTER_RESULT USB_DEVICE_PRINTER_EventHandlerSet( USB_DEVICE_PRINTER_INDEX instanceIndex, USB_DEVICE_PRINTER_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-ECCDE685-11AC-4129-B4D5-5290A8FAB0B4.html</loc>
                           <lastmod>2024-03-21T08:45:00</lastmod>
                           <title>2.9.4.2 USB_DEVICE_PRINTER_Read Function</title>
                           <description>C USB_DEVICE_PRINTER_RESULT USB_DEVICE_PRINTER_Read( USB_DEVICE_PRINTER_INDEX instanceIndex, USB_DEVICE_PRINTER_TRANSFER_HANDLE * transferHandle, void * data, size_t size ); Description This function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8DF5F3CE-2FBE-430C-AF38-2BB828D0F50D.html</loc>
                           <lastmod>2024-03-21T08:45:02</lastmod>
                           <title>2.9.4.3 USB_DEVICE_PRINTER_Write Function</title>
                           <description>C USB_DEVICE_PRINTER_RESULT USB_DEVICE_PRINTER_Write( USB_DEVICE_PRINTER_INDEX instanceIndex, USB_DEVICE_PRINTER_TRANSFER_HANDLE * transferHandle, const void * data, size_t size, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F1C41F36-77DE-4D1D-9566-0D9AAAFAA179.html</loc>
                           <lastmod>2024-03-20T11:20:33</lastmod>
                           <title>2.9.4.4 USB_DEVICE_PRINTER_EVENT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_PRINTER_GET_PORT_STATUS, USB_DEVICE_PRINTER_EVENT_WRITE_COMPLETE, USB_DEVICE_PRINTER_EVENT_READ_COMPLETE } USB_DEVICE_PRINTER_EVENT; Summary USB Device Printer Function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DAC38014-28E0-41DE-A0C3-94EAB02E137A.html</loc>
                           <lastmod>2024-03-20T11:20:52</lastmod>
                           <title>2.9.4.5 USB_DEVICE_PRINTER_EVENT_DATA_READ_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_PRINTER_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_PRINTER_RESULT status; } USB_DEVICE_PRINTER_EVENT_DATA_READ_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-79F655A2-88A4-4C54-A45D-57DB95185329.html</loc>
                           <lastmod>2024-03-20T11:21:06</lastmod>
                           <title>2.9.4.6 USB_DEVICE_PRINTER_EVENT_DATA_WRITE_COMPLETE Structure</title>
                           <description>C typedef struct { USB_DEVICE_PRINTER_TRANSFER_HANDLE handle; size_t length; USB_DEVICE_PRINTER_RESULT status; } USB_DEVICE_PRINTER_EVENT_DATA_READ_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CB80B179-87C6-4EEF-B9BE-A5FD042F0BA8.html</loc>
                           <lastmod>2024-03-20T11:22:06</lastmod>
                           <title>2.9.4.7 USB_DEVICE_PRINTER_EVENT_HANDLER Type</title>
                           <description>C typedef USB_DEVICE_PRINTER_EVENT_RESPONSE (* USB_DEVICE_PRINTER_EVENT_HANDLER)(USB_DEVICE_PRINTER_INDEX instanceIndex, USB_DEVICE_PRINTER_EVENT event, void * pData, uintptr_t context); Description ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1B51EECE-644C-4EB8-A93C-DAF091D76558.html</loc>
                           <lastmod>2024-03-20T11:22:14</lastmod>
                           <title>2.9.4.8 USB_DEVICE_PRINTER_EVENT_RESPONSE Type</title>
                           <description>C typedef void USB_DEVICE_PRINTER_EVENT_RESPONSE; Summary USB Device Printer Function Driver Event Handler Response Type This is the return type of the Printer Function Driver event handler. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-32149AF5-B517-4B56-B6EC-1234C4792744.html</loc>
                           <lastmod>2024-03-21T08:30:19</lastmod>
                           <title>2.9.4.9 </title>
                           <description>C typedef uintptr_t USB_DEVICE_PRINTER_INDEX; Summary USB Device Printer Function Driver Index This uniquely identifies a Printer Function Driver instance. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F736AEA4-0431-48D3-A5EA-B6FBB6D86056.html</loc>
                           <lastmod>2024-03-20T11:24:25</lastmod>
                           <title>2.9.4.10 USB_DEVICE_PRINTER_INIT Structure</title>
                           <description>C typedef struct { size_t queueSizeRead; size_t queueSizeWrite; uint16_t length; uint8_t deviceID_String[USB_DEVICE_PRINTER_DEVICE_ID_STRING_LENGTH]; } USB_DEVICE_PRINTER_INIT; Summary USB Device ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-249C9166-B9E8-4AD7-996D-A2F382DC453F.html</loc>
                           <lastmod>2024-03-20T11:24:34</lastmod>
                           <title>2.9.4.11 USB_DEVICE_PRINTER_PORT_STATUS Structure</title>
                           <description>C typedef struct { uint8_t errorStatus; uint8_t selectStatus; uint8_t paperEmptyStatus; } USB_DEVICE_PRINTER_PORT_STATUS; Summary USB device Printer Port Status. This structure defines the Printer ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-57ED411B-A9F5-42A3-BF40-8E8506BE87EF.html</loc>
                           <lastmod>2024-03-20T11:24:54</lastmod>
                           <title>2.9.4.12 USB_DEVICE_PRINTER_RESULT Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_PRINTER_RESULT_OK, USB_DEVICE_PRINTER_RESULT_ERROR_TRANSFER_SIZE_INVALID, USB_DEVICE_PRINTER_RESULT_ERROR_TRANSFER_QUEUE_FULL, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D8A4E6BC-7C49-4818-8F46-381F1503E6A4.html</loc>
                           <lastmod>2024-03-20T11:25:32</lastmod>
                           <title>2.9.4.13 USB_DEVICE_PRINTER_TRANSFER_FLAGS Enumeration</title>
                           <description>C typedef enum { USB_DEVICE_PRINTER_TRANSFER_FLAGS_DATA_COMPLETE, USB_DEVICE_PRINTER_TRANSFER_FLAGS_MORE_DATA_PENDING } USB_DEVICE_PRINTER_TRANSFER_FLAGS; Summary USB Device Printer Transfer Flags ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-92C04F25-FB6D-4A40-A9E9-D174299CFC7D.html</loc>
                           <lastmod>2024-03-20T11:25:41</lastmod>
                           <title>2.9.4.14 USB_DEVICE_PRINTER_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_DEVICE_PRINTER_TRANSFER_HANDLE; Summary USB Device Printer Function Driver Transfer Handle Definition This definition defines a USB Device Printer Function Driver Transfer ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-43637458-7E40-4BEB-8E2D-EB415295584B.html</loc>
                           <lastmod>2024-03-20T11:25:56</lastmod>
                           <title>2.9.4.15 USB_PRINTER_COMMAND Enumeration</title>
                           <description>C typedef enum { USB_PRINTER_GET_DEVICE_ID = 0x0, USB_PRINTER_GET_PORT_STATUS = 0x1, USB_PRINTER_SOFT_RESET = 0x2 } USB_PRINTER_COMMAND; Summary USB Printer Command. Identified the USB Printer ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-42E27140-AA79-48C2-A9B6-D5514D0E2772.html</loc>
                           <lastmod>2024-03-20T11:29:57</lastmod>
                           <title>2.9.4.16 USB_PRINTER_INTERFACE_CLASS_CODE Macro</title>
                           <description>C #define USB_PRINTER_INTERFACE_CLASS_CODE 0x07 Summary Base class for printers Do not modify this value. Remarks </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C5877E1D-16DB-469A-A995-64106062940C.html</loc>
                           <lastmod>2024-03-20T11:30:07</lastmod>
                           <title>2.9.4.17 USB_PRINTER_INTERFACE_PROTOCOL Macro</title>
                           <description>C #define USB_PRINTER_INTERFACE_PROTOCOL 0x01 Summary Printer Interface Type 0x01 - Unidirectional interface0x02 - Bi-directional interface0x03 - 1284.4 compatible bi-directional interface Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D06B4C01-0A64-42BB-A095-CB72FB599097.html</loc>
                           <lastmod>2024-03-20T11:30:17</lastmod>
                           <title>2.9.4.18 USB_PRINTER_INTERFACE_SUBCLASS_CODE Macro</title>
                           <description>C #define USB_PRINTER_INTERFACE_SUBCLASS_CODE 0x01 Summary Subclass codes for Printer devices Do not modify this value. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4077A11E-5A99-4CD7-85EB-28CA98840C70.html</loc>
                           <lastmod>2024-03-20T11:30:39</lastmod>
                           <title>2.9.4.19 USB_PRINTER_REQUEST_CLASS_SPECIFIC Macro</title>
                           <description>C #define USB_PRINTER_REQUEST_CLASS_SPECIFIC 0x21 Summary bmRequestType for Printer class specific </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-262F315F-8591-43B8-BF2C-4420F614F8A0.html</loc>
                           <lastmod>2024-03-20T11:31:01</lastmod>
                           <title>2.9.4.20 USB_DEVICE_PRINTER_EVENT_RESPONSE_NONE Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_EVENT_RESPONSE_NONE Summary USB Device Printer Function Driver Event Handler Response None. This is the definition of the Printer Function Driver Event Handler Response ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E061B306-0AB3-4BE2-9BA9-EE6A6041CA94.html</loc>
                           <lastmod>2024-03-20T11:31:50</lastmod>
                           <title>2.9.4.21 USB_DEVICE_PRINTER_FUNCTION_DRIVER Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_FUNCTION_DRIVER Summary USB Device Printer Function Driver Function Pointer. This is the USB Device Printer Function Driver Function pointer. This should registered with ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2CDD813F-0F67-4254-8511-5E3BF972611F.html</loc>
                           <lastmod>2024-03-20T11:32:13</lastmod>
                           <title>2.9.4.22 USB_DEVICE_PRINTER_INDEX_0 Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_INDEX_0 0 Summary Use this to specify Printer Function Driver Instance </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B262C9F3-91E9-4B3C-B30B-4088487D2191.html</loc>
                           <lastmod>2024-03-20T11:33:29</lastmod>
                           <title>2.9.4.23 USB_DEVICE_PRINTER_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_DEVICE_PRINTER_TRANSFER_HANDLE_INVALID ((USB_DEVICE_PRINTER_TRANSFER_HANDLE)(-1)) Summary USB Device Printer Function Driver Invalid Transfer Handle Definition This definition defines a ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-3913FE64-2EF2-4228-AFCD-3DC81D0B3C7B.html</loc>
                     <lastmod>2024-02-14T10:01:26</lastmod>
                     <title>2.9.5 Files</title>
                     <description>Files Name Description usb_device_printer.hUSB Device Printer Function Driver Interface usb_printer.hUSB Printer class definitions usb_device_printer_config_template.hUSB device Printer Class ...</description>
                     <urls>
                        <url>
                           <loc>GUID-5AD9D4BE-6C2C-4E8C-A2A7-0C8C732356E2.html</loc>
                           <lastmod>2024-03-20T11:34:43</lastmod>
                           <title>2.9.5.1 usb_device_printer.h</title>
                           <description>File Name usb_device_printer.h Description USB Device Printer Function Driver Interface This file describes the USB Device Printer Function Driver interface. The application should include this file ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2B8F60C9-7DCB-49FE-AE01-CD0052C14AA5.html</loc>
                           <lastmod>2024-01-30T04:41:13</lastmod>
                           <title>2.9.5.2 usb_device_printer_config_template.h</title>
                           <description>File Name usb_device_printer_config_template.h Description USB Device Printer Class Configuration Definitions This file contains configurations macros needed to configure the Printer Function Driver. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-75CB2E18-BDCD-4C62-987E-A4A376613261.html</loc>
                           <lastmod>2024-03-06T09:29:53</lastmod>
                           <title>2.9.5.3 usb_printer.h</title>
                           <description>File Name usb_Printer.h Description USB Printer class definitions This file describes the Printer class specific definitions. This file is included by usb_device_Printer.h and usb_host_Printer.h ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-B14EBEC0-7590-4740-800B-6CE5FE9AB121.html</loc>
         <lastmod>2024-04-16T10:23:58</lastmod>
         <title>3 USB Host Libraries</title>
         <description>Topics Name Description USB Host Library - Getting Started This section provides information for getting started with the USB Host Library. USB Host Layer Library This section describes the USB Host ...</description>
         <urls>
            <url>
               <loc>GUID-2F779E49-9296-4BEB-9B6D-019A12090DE4.html</loc>
               <lastmod>2024-03-20T11:36:24</lastmod>
               <title>3.1 USB Host Library - Getting Started</title>
               <description>Topics Name Description IntroductionProvides an introduction to the MPLAB Harmony USB Host Library. USB Host Library ArchitectureDescribes the USB Host Library Architecture. USB Host Library - ...</description>
               <urls>
                  <url>
                     <loc>GUID-0CE3F718-92B5-4EAD-B653-39403E7E864F.html</loc>
                     <lastmod>2024-03-06T07:09:32</lastmod>
                     <title>3.1.1 Introduction</title>
                     <description>The MPLAB Harmony USB Host Library (referred to as the USB Host Library) provides embedded application developers with a framework to design and develop USB Host Support for a wide variety of USB ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-B6E2D62C-5626-4C90-8449-4ED134DC30B5.html</loc>
                     <lastmod>2024-03-20T11:41:54</lastmod>
                     <title>3.1.2 USB Host Library - Application Interaction</title>
                     <description>Additional information on the tests conducted on Flash devices (i.e., Pen Drives) and a list of USB application configurations is available in the USB Demonstrations section. The following figure ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-DF9CAFA6-A629-4E91-885B-42A0789668D9.html</loc>
                     <lastmod>2024-03-20T11:43:24</lastmod>
                     <title>3.1.3 USB Host Library Architecture</title>
                     <description>The USB Host Library Architecture features a modular and layered architecture as illustrated in the following figure.As seen in the figure, the USB Device Library consists of the following three ...</description>
                     <urls/>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-E75A23B7-0D61-4FDF-985D-38E27384C150.html</loc>
               <lastmod>2024-03-06T08:08:19</lastmod>
               <title>3.2 USB Host Layer Library</title>
               <description>Topics Name Description Introduction Introduces the MPLAB Harmony USB Host Layer Library. Using the Library This topic describes the basic architecture of the USB Host Layer and provides information ...</description>
               <urls>
                  <url>
                     <loc>GUID-80BF18A3-AB90-44F3-AB83-72DF76AFCC39.html</loc>
                     <lastmod>2024-03-20T11:44:35</lastmod>
                     <title>3.2.1 Introduction</title>
                     <description>The USB Host Layer in the MPLAB Harmony USB Host Stack performs the tasks of enumerating an attached device and interfacing the HCD. The following are the key features of the MPLAB Harmony USB Host ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-26A54BDE-23F9-4242-8448-27ED0DC8288F.html</loc>
                     <lastmod>2024-03-05T05:57:09</lastmod>
                     <title>3.2.2 Using the Library</title>
                     <description>Topics Name Description Abstraction Model Describes the abstraction model of the USB Host Layer. Library Overview The USB Host layer API is grouped functionally, as shown in the following table. How ...</description>
                     <urls>
                        <url>
                           <loc>GUID-C0FD8C61-6B00-4417-A723-C3B23D2F4AF0.html</loc>
                           <lastmod>2024-03-20T11:45:04</lastmod>
                           <title>3.2.2.1 Abstraction Model</title>
                           <description>The USB Host Layer abstracts USB HCD hardware interaction details and presents an easy-to-use interface to the application and the client drivers. The Host Layer provides the application with a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4DF07B41-9340-4B0E-81A4-D0F4F3CC6EFA.html</loc>
                           <lastmod>2024-03-01T09:06:35</lastmod>
                           <title>3.2.2.2 Library Overview</title>
                           <description>The USB Host layer API is grouped functionally, as shown in the following table.Library Interface Section Description System Interface Functions These functions make the USB Host Layer compatible ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-58537EFF-336E-4C4C-A9E1-6E941F9975C7.html</loc>
                           <lastmod>2024-03-01T09:46:04</lastmod>
                           <title>3.2.2.3 How the Library Works</title>
                           <description>The Host Layer in the MPLAB Harmony USB Host Stack plays the key role of enumerating an attached device and facilitating the communication between the USB Host Client Driver and the attached devices. ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-1D7FC14A-076D-413F-9307-F821D9D78B14.html</loc>
                                 <lastmod>2024-03-20T11:45:56</lastmod>
                                 <title>3.2.2.3.1 Host Layer Initialization</title>
                                 <description>The Host Layer must be initialized with relevant data to enable correct operation. This initialization must be performed in the SYS_Initialize function of the MPLAB Harmony application. The Host ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-3F021F2C-92F7-4118-A27E-6D7E7828325E.html</loc>
                                 <lastmod>2024-03-20T11:46:48</lastmod>
                                 <title>3.2.2.3.2 Host Layer - Application Interaction</title>
                                 <description>The Host Layer in the MPLAB Harmony USB Host stack provides the user application with API methods to operate the USB Host. The following sections discuss these API methods. Registering the Event ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-1F70C5AE-B71D-4642-8A8C-53AE1CC60EB6.html</loc>
                                 <lastmod>2024-03-05T05:57:18</lastmod>
                                 <title>3.2.2.3.3 Event Handling</title>
                                 <description>The USB Host Layer provides general device related events to the application. The application must register an event handling function by using the USB_HOST_EventHandlerSet function. A context ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-6B7CC759-C5C1-4243-AD7F-5687B48B5C73.html</loc>
                     <lastmod>2024-03-19T13:33:08</lastmod>
                     <title>3.2.3 Configuring the Library</title>
                     <description>The following configuration parameters must be defined while using the USB Host Layer. The configuration macros that implement these parameters must be located in the system_config.h file in the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-77D25A42-30DC-44DB-BAAB-EB62EF8E7985.html</loc>
                           <lastmod>2024-03-20T11:50:57</lastmod>
                           <title>3.2.3.1 USB_HOST_CONTROLLERS_NUMBER Macro</title>
                           <description>C #define USB_HOST_CONTROLLERS_NUMBER Summary USB Host Layer Controller Numbers This constant defines the number of USB Host Controllers that this Host Layer must manage. The value of this constant ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B80474F9-1FAF-4D57-A0E5-08ABBBBA2AF3.html</loc>
                           <lastmod>2024-03-20T11:49:23</lastmod>
                           <title>3.2.3.2 USB_HOST_DEVICE_INTERFACES_NUMBER Macro</title>
                           <description>C #define USB_HOST_DEVICE_INTERFACES_NUMBER Summary USB Host Device Interface Numbers This constant defines the maximum number of interface that the attached device can contain in order for the USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4E627286-4B49-41C6-B2D3-58A210C0DFAB.html</loc>
                           <lastmod>2024-03-20T11:49:31</lastmod>
                           <title>3.2.3.3 USB_HOST_DEVICES_NUMBER Macro</title>
                           <description>C #define USB_HOST_DEVICES_NUMBER Summary USB Host Layer Devices Number This configuration constant defines the maximum number of devices that this USB Host application must support. The value of ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-25BDA083-01B9-48E4-B915-F0518084B1B1.html</loc>
                           <lastmod>2024-03-20T11:49:39</lastmod>
                           <title>3.2.3.4 USB_HOST_HUB_SUPPORT_ENABLE Macro</title>
                           <description>C #define USB_HOST_HUB_SUPPORT_ENABLE Summary USB Host Layer Hub Support Specifying this macro will enable Hub Support. The HUB tier level to be supported is then specified by USB_HOST_HUB_TIER_LEVEL ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AFEA360D-2AB1-4B25-B8F0-3A6C02F13478.html</loc>
                           <lastmod>2024-03-20T11:49:50</lastmod>
                           <title>3.2.3.5 USB_HOST_HUB_TIER_LEVEL Macro</title>
                           <description>C #define USB_HOST_HUB_TIER_LEVEL Summary USB Host Hub Tier Level This constant defines the maximum hub tiers to be supported by the USB Host application. This constant is considered only if the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9EAEFB7B-CE55-49E4-AF04-690021ACA4FB.html</loc>
                           <lastmod>2024-03-20T11:50:04</lastmod>
                           <title>3.2.3.6 USB_HOST_PIPES_NUMBER Macro</title>
                           <description>C #define USB_HOST_PIPES_NUMBER Summary USB Host Layer Pipes Number This configuration constant defines the maximum number of device communication pipes that Host Layer would need in the application. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EA8969A1-1667-4AEA-B28D-E8E2D2613421.html</loc>
                           <lastmod>2024-03-20T11:50:17</lastmod>
                           <title>3.2.3.7 USB_HOST_TRANSFERS_NUMBER Macro</title>
                           <description>C #define USB_HOST_TRANSFERS_NUMBER Summary USB Host Layer Transfers Number This constant defines the maximum number of transfers that the host layer should handle. The choice of this constant ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2779CA0A-C6EE-4AD4-AD35-1D99192580AF.html</loc>
                           <lastmod>2024-04-03T06:14:24</lastmod>
                           <title>3.2.3.8 Configuration on MCC</title>
                           <description>Number of TPL Entries Symbol name: CONFIG_USB_HOST_TPL_ENTRY_NUMBER This configuration option indicates the current number of entries in the Host TPL table. This is shown for indication purposes ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C15E3DFA-3D40-4B96-AFF8-91E2AA0A7C13.html</loc>
                     <lastmod>2024-03-20T11:52:41</lastmod>
                     <title>3.2.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Host Layer Library. Refer to each section for a detailed description. Functions Name Description ...</description>
                     <urls>
                        <url>
                           <loc>GUID-6BB1B64F-9B31-4A1A-9C2E-D2CF744379BF.html</loc>
                           <lastmod>2024-03-21T09:01:50</lastmod>
                           <title>3.2.4.1 USB_HOST_Deinitialize Function</title>
                           <description>C void USB_HOST_Deinitialize( SYS_MODULE_OBJ usbHostObject ); Summary Deinitializes the USB Host Layer. All internal data structures will be reset. Precondition Function USB_HOST_Initialize should ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-85F4D38B-5ED4-4C90-A1CE-E45FD06BCECC.html</loc>
                           <lastmod>2024-03-21T09:01:52</lastmod>
                           <title>3.2.4.2 USB_HOST_Status Function</title>
                           <description>C SYS_STATUS USB_HOST_Status( SYS_MODULE_OBJ usbHostObject ); Summary This routine provides the current status of the USB Host Layer. Description Description of the function. Precondition Function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D397B258-AD3B-4BD9-9B06-6CE74F21B6BD.html</loc>
                           <lastmod>2024-03-21T09:01:53</lastmod>
                           <title>3.2.4.3 USB_HOST_Tasks Function</title>
                           <description>C void USB_HOST_Tasks( SYS_MODULE_OBJ usbHostObject ); Summary This routine maintains the USB Host layer's state machine. It must be called frequently to ensure proper operation of the USB. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AAC42377-966E-46D3-82C7-AE79A7A98B19.html</loc>
                           <lastmod>2024-03-21T09:06:19</lastmod>
                           <title>3.2.4.4 USB_HOST_BusEnable Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_BusEnable( USB_HOST_BUS bus ); Summary The function starts the operation of the USB Host Bus. It enables the root hub associated with specified bus and starts the process ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4D162963-6D30-4533-B522-A0054208DF96.html</loc>
                           <lastmod>2024-03-21T09:06:20</lastmod>
                           <title>3.2.4.5 USB_HOST_BusIsEnabled Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_BusIsEnabled( USB_HOST_BUS bus ); Summary The function returns the enable status of the bus. It can be called after the USB_HOST_BusEnable() function is called, to check if ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-72CB17C4-E766-4406-A6D4-4F9690034166.html</loc>
                           <lastmod>2024-03-21T09:06:18</lastmod>
                           <title>3.2.4.6 USB_HOST_BusIsSuspended Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_BusIsSuspended( USB_HOST_BUS bus ); Summary This function returns suspend status of the specified USB bus. This function can be used to check the completion of the Suspend ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-32398145-1976-4120-BFA4-B1C3297BCE69.html</loc>
                           <lastmod>2024-03-20T12:18:48</lastmod>
                           <title>3.2.4.7 USB_HOST_BusResume Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_BusResume( USB_HOST_BUS bus ); Summary The function resumes the bus. All devices on the bus will be receive resume signaling. If bus is specified as USB_HOST_BUS_ALL, all ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-63E120DD-A636-4F9E-9208-9DC51AB61908.html</loc>
                           <lastmod>2024-03-20T12:19:12</lastmod>
                           <title>3.2.4.8 USB_HOST_BusSuspend Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_BusSuspend( USB_HOST_BUS bus ); Summary The function suspends the bus. All devices on the bus will be suspended. If bus is specified as USB_HOST_BUS_ALL, all the buses ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C76F3DFC-52CA-4735-9D43-BD3789FB6A9A.html</loc>
                           <lastmod>2024-03-21T09:06:16</lastmod>
                           <title>3.2.4.9 USB_HOST_DeviceGetFirst Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceGetFirst( USB_HOST_BUS bus, USB_HOST_DEVICE_INFO * deviceInfo ); Summary This function returns information about the first attached device on the specified bus. The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A4945CC9-5CC7-46D9-9CAB-9E7C732B2A49.html</loc>
                           <lastmod>2024-03-21T09:06:15</lastmod>
                           <title>3.2.4.10 USB_HOST_DeviceGetNext Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceGetNext( USB_HOST_DEVICE_INFO * deviceInfo ); Summary This function returns information of the next device attached on the bus. The USB_HOST_DeviceGetFirst() function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C8553CB4-8B90-4918-B596-7819C84DFE40.html</loc>
                           <lastmod>2024-03-21T09:06:13</lastmod>
                           <title>3.2.4.11 USB_HOST_DeviceIsSuspended Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceIsSuspended( USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle ); Summary This function returns the suspend state of the specified USB device. This function can be used to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1528D9F8-0AAC-4235-A1A8-BD7B88747AB9.html</loc>
                           <lastmod>2024-03-21T09:06:12</lastmod>
                           <title>3.2.4.12 USB_HOST_DeviceResume Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceResume( USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle ); Summary The function resumes the selected device. A device can be resumed only if it was suspended. Precondition ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4BF68B2F-7ED3-4D28-8E64-A8842986175C.html</loc>
                           <lastmod>2024-03-21T09:01:54</lastmod>
                           <title>3.2.4.13 USB_HOST_DeviceSpeedGet Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceSpeedGet( USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle, USB_SPEED * speed ); Summary This function returns the speed at which this device is operating. Precondition The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-98732FCB-6DF2-4FA6-854B-1AABAE0D4A1D.html</loc>
                           <lastmod>2024-03-20T12:28:23</lastmod>
                           <title>3.2.4.14 USB_HOST_DeviceStringDescriptorGet Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceStringDescriptorGet( USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle, USB_HOST_DEVICE_STRING stringType, uint16_t languageID, void * stringDescriptor, size_t length, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D1167928-4124-45F2-8C87-82A61CFA1F96.html</loc>
                           <lastmod>2024-03-21T09:06:11</lastmod>
                           <title>3.2.4.15 USB_HOST_DeviceSuspend Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_DeviceSuspend( USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle ); Summary The function suspends the specified device. Precondition The USB_HOST_BusEnable() function should have ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-689CB91C-1D4F-4576-8941-EAC69B1259BA.html</loc>
                           <lastmod>2024-03-21T09:06:09</lastmod>
                           <title>3.2.4.16 USB_HOST_EventHandlerSet Function</title>
                           <description>C USB_HOST_RESULT USB_HOST_EventHandlerSet( USB_HOST_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This is the USB Host Layer Event Handler Callback Set function. An application can ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D7E6CD0D-3D5F-4D35-A25B-CE47D162A3C4.html</loc>
                           <lastmod>2024-03-21T09:06:08</lastmod>
                           <title>3.2.4.17 USB_HOST_Initialize Function</title>
                           <description>C SYS_MODULE_OBJ USB_HOST_Initialize( const SYS_MODULE_INIT * init ); Summary This routine initializes the USB Host Layer. This function must be called before any other Host layer function can be ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-49353ADB-2401-4686-9D87-55D68C0D83C6.html</loc>
                           <lastmod>2024-03-20T12:29:37</lastmod>
                           <title>3.2.4.18 USB_HOST_INIT Structure</title>
                           <description>C typedef struct { size_t nTPLEntries; USB_HOST_TPL_ENTRY * tplList; USB_HOST_HCD * hostControllerDrivers; } USB_HOST_INIT; Summary USB Host Initialization Data Structure This data type defines the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9CDE9E09-AF02-40ED-866C-5619DCDEA56A.html</loc>
                           <lastmod>2024-03-20T12:29:50</lastmod>
                           <title>3.2.4.19 USB_HOST_EVENT_RESPONSE Enumeration</title>
                           <description>C typedef enum { USB_HOST_EVENT_RESPONSE_NONE = 0 } USB_HOST_EVENT_RESPONSE; Summary Host Layer Events Handler Function Response Type. This is the definition of the Host Layer Event Handler Response ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-26C3363D-76E9-4E08-977A-C1CB4F3C5252.html</loc>
                           <lastmod>2024-03-20T12:38:55</lastmod>
                           <title>3.2.4.20 USB_HOST_TPL_FLAGS Enumeration</title>
                           <description>C typedef enum { TPL_FLAG_VID_PID = (1&lt;&lt;0), TPL_FLAG_CLASS_SUBCLASS_PROTOCOL = (0&lt;&lt;0), TPL_FLAG_IGNORE_CLASS = (1&lt;&lt;1), TPL_FLAG_IGNORE_SUBCLASS = (1&lt;&lt;2), TPL_FLAG_IGNORE_PROTOCOL = (1&lt;&lt;3), ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E02320E5-28F4-4F96-810A-D1DB086FDB16.html</loc>
                           <lastmod>2024-03-20T12:30:45</lastmod>
                           <title>3.2.4.21 TPL_INTERFACE_CLASS_SUBCLASS_PROTOCOL Macro</title>
                           <description>C #define TPL_INTERFACE_CLASS_SUBCLASS_PROTOCOL(classCode, subClassCode, protocolCode, initData, driver)\ {\ .id.cl_sc_p = { (classCode), (subClassCode), (protocolCode) },\ .pidMask = 0xFFFF,\ ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B2A7CD3F-7388-4519-88AD-9EE312CDF2DC.html</loc>
                           <lastmod>2024-03-20T12:32:04</lastmod>
                           <title>3.2.4.22 TPL_INTERFACE_CLASS_SUBCLASS Macro</title>
                           <description>C #define TPL_INTERFACE_CLASS_SUBCLASS(classCode, subClassCode, initData, driver)\ {\ .id.cl_sc_p = { classCode, subClassCode, 0xFF },\ .pidMask = 0xFFFF,\ .tplFlags.driverType = ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A9BE899A-117A-4751-8D1E-C27799CD5BAF.html</loc>
                           <lastmod>2024-03-20T12:32:12</lastmod>
                           <title>3.2.4.23 TPL_INTERFACE_CLASS Macro</title>
                           <description>C #define TPL_INTERFACE_CLASS(classCode, initData, driver)\ {\ .id.cl_sc_p = { (classCode), (0xFF), (0xFF) },\ .pidMask = 0xFFFF,\ .tplFlags.driverType = (uint8_t)(TPL_FLAG_CLASS_SUBCLASS_PROTOCOL),\ ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6595EA15-1122-47D0-9AC6-738DCC1C3D95.html</loc>
                           <lastmod>2024-03-20T12:32:20</lastmod>
                           <title>3.2.4.24 TPL_INTERFACE_ANY Macro</title>
                           <description>C #define TPL_INTERFACE_ANY(initData, driver)\ {\ .id.cl_sc_p = { 0xFF, 0xFF, 0xFF },\ .pidMask = 0xFFFF,\ .tplFlags.driverType = (uint8_t)(TPL_FLAG_CLASS_SUBCLASS_PROTOCOL),\ .tplFlags.ignoreClass = ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4772BEA4-1EF7-4B1A-8D49-6A87FB936E2F.html</loc>
                           <lastmod>2024-03-20T12:32:27</lastmod>
                           <title>3.2.4.25 TPL_DEVICE_VID_PID Macro</title>
                           <description>C #define TPL_DEVICE_VID_PID(vid, pid, initData, driver)\ {\ .id.vid_pid = { vid, pid },\ .pidMask = 0xFFFF,\ .tplFlags.driverType = (uint8_t)(TPL_FLAG_VID_PID),\ .tplFlags.pidMasked = 0,\ ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-425E2431-A6DB-44FB-8D27-EEEC8F66D463.html</loc>
                           <lastmod>2024-03-20T12:32:35</lastmod>
                           <title>3.2.4.26 TPL_DEVICE_VID_PID_MASKED Macro</title>
                           <description>C #define TPL_DEVICE_VID_PID_MASKED(vid, pid, mask, initData, driver)\ {\ .id.vid_pid = { vid, pid },\ .pidMask = mask,\ .tplFlags.driverType = (uint8_t)(TPL_FLAG_VID_PID),\ .tplFlags.pidMasked = 1,\ ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2AF6EE43-335F-4214-B951-976810562303.html</loc>
                           <lastmod>2024-03-20T12:32:50</lastmod>
                           <title>3.2.4.27 TPL_DEVICE_ANY Macro</title>
                           <description>C #define TPL_DEVICE_ANY(initData, driver)\ {\ .id.vid_pid = { 0xFFFF, 0xFFFF },\ .pidMask = 0x0000,\ .tplFlags.driverType = (uint8_t)(TPL_FLAG_VID_PID),\ .tplFlags.pidMasked = 1,\ ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1829F062-3569-4754-A5C4-2790D0309278.html</loc>
                           <lastmod>2024-03-20T12:33:07</lastmod>
                           <title>3.2.4.28 USB_HOST_BUS Type</title>
                           <description>C typedef uint8_t USB_HOST_BUS; Summary USB Bus Data Type This data type defines a USB Bus. In microcontroller devices, that may have multiple USB peripherals, this type identifies the USB bus ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-66C95969-E075-489A-80BC-B1FEB85946FE.html</loc>
                           <lastmod>2024-03-20T12:33:24</lastmod>
                           <title>3.2.4.29 USB_HOST_DEVICE_INFO Structure</title>
                           <description>C typedef struct { USB_HOST_DEVICE_OBJ_HANDLE deviceObjHandle; uint8_t deviceAddress; USB_HOST_BUS bus; } USB_HOST_DEVICE_INFO; Summary USB Host Device Info Type This data type defines the type of ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A627394E-F49A-4316-BF3D-6D663CD8FB9F.html</loc>
                           <lastmod>2024-03-20T12:33:34</lastmod>
                           <title>3.2.4.30 USB_HOST_DEVICE_OBJ_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_DEVICE_OBJ_HANDLE; Summary USB Host Device Object Handle This data type defines the type of handle to an attached USB Device. This handle uniquely identifies the attached ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-29ED2602-F766-4A47-9F18-C9BB644CA968.html</loc>
                           <lastmod>2024-03-20T12:33:47</lastmod>
                           <title>3.2.4.31 USB_HOST_DEVICE_STRING Enumeration</title>
                           <description>C typedef enum { USB_HOST_DEVICE_STRING_LANG_ID = 0, USB_HOST_DEVICE_STRING_MANUFACTURER, USB_HOST_DEVICE_STRING_PRODUCT, USB_HOST_DEVICE_STRING_SERIAL_NUMBER } USB_HOST_DEVICE_STRING; Summary USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CA70B2CF-9D42-453F-88C5-46E4FA594249.html</loc>
                           <lastmod>2024-03-20T12:34:07</lastmod>
                           <title>3.2.4.32 USB_HOST_EVENT Enumeration</title>
                           <description>C typedef enum { USB_HOST_EVENT_DEVICE_REJECTED_INSUFFICIENT_POWER, USB_HOST_EVENT_DEVICE_UNSUPPORTED, USB_HOST_EVENT_HUB_TIER_LEVEL_EXCEEDED, USB_HOST_EVENT_PORT_OVERCURRENT_DETECTED } ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-88411AE2-E722-4A67-8E12-B2EB73179B01.html</loc>
                           <lastmod>2024-03-20T12:34:19</lastmod>
                           <title>3.2.4.33 USB_HOST_EVENT_HANDLER Type</title>
                           <description>C typedef USB_HOST_EVENT_RESPONSE (* USB_HOST_EVENT_HANDLER)(USB_HOST_EVENT event, void * eventData, uintptr_t context); Summary USB Host Layer Event Handler Function Pointer Type This data type ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-20690264-6990-4838-8446-1418AD263FAF.html</loc>
                           <lastmod>2024-03-20T12:37:27</lastmod>
                           <title>3.2.4.34 USB_HOST_HCD Structure</title>
                           <description>C typedef struct { SYS_MODULE_INDEX drvIndex; void * hcdInterface; } USB_HOST_HCD; Summary USB Host Controller Driver Information This data type defines the data required to connect a Host Controller ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B14972ED-17A6-49EC-89ED-701B9D2A406B.html</loc>
                           <lastmod>2024-03-20T12:37:35</lastmod>
                           <title>3.2.4.35 USB_HOST_REQUEST_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_REQUEST_HANDLE; Summary USB Host Request Handle Type This type defines the USB Host Request Handle. This type of handle is returned by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-69238CE7-0A02-49DF-A9B5-DBC770A6C8B2.html</loc>
                           <lastmod>2024-03-20T12:38:20</lastmod>
                           <title>3.2.4.36 USB_HOST_RESULT Enumeration</title>
                           <description>C typedef enum { USB_HOST_RESULT_REQUEST_BUSY = USB_HOST_RESULT_MIN, USB_HOST_RESULT_STRING_DESCRIPTOR_UNSUPPORTED, USB_HOST_RESULT_TRANSFER_ABORTED, USB_HOST_RESULT_REQUEST_STALLED, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-364AA46C-7120-4B7D-B54B-8B43C1A852E2.html</loc>
                           <lastmod>2024-03-20T12:38:35</lastmod>
                           <title>3.2.4.37 USB_HOST_STRING_REQUEST_COMPLETE_CALLBACK Type</title>
                           <description>C typedef void (* USB_HOST_STRING_REQUEST_COMPLETE_CALLBACK)(USB_HOST_REQUEST_HANDLE requestHandle, size_t size, uintptr_t context); Summary USB Host Device String Descriptor Request Complete ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-26C3363D-76E9-4E08-977A-C1CB4F3C5252_2.html</loc>
                           <lastmod>2024-03-20T12:38:55</lastmod>
                           <title>3.2.4.38 USB_HOST_TPL_FLAGS Enumeration</title>
                           <description>C typedef enum { TPL_FLAG_VID_PID = (1&lt;&lt;0), TPL_FLAG_CLASS_SUBCLASS_PROTOCOL = (0&lt;&lt;0), TPL_FLAG_IGNORE_CLASS = (1&lt;&lt;1), TPL_FLAG_IGNORE_SUBCLASS = (1&lt;&lt;2), TPL_FLAG_IGNORE_PROTOCOL = (1&lt;&lt;3), ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3FDF0B90-390B-4765-BC90-4E363002162A.html</loc>
                           <lastmod>2024-03-20T12:39:03</lastmod>
                           <title>3.2.4.39 USB_HOST_BUS_ALL Macro</title>
                           <description>C #define USB_HOST_BUS_ALL ((USB_HOST_BUS)(0xFF)) Summary USB Host Bus All This constant defines the value that should be passed to the USB_HOST_BusSuspend(), USB_HOST_BusResume() and ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D73B9701-F19D-4B2F-8E72-92F0D6528079.html</loc>
                           <lastmod>2024-03-20T12:39:23</lastmod>
                           <title>3.2.4.40 USB_HOST_DEVICE_OBJ_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_DEVICE_OBJ_HANDLE_INVALID ((USB_HOST_DEVICE_OBJ_HANDLE)(-1)) Summary USB Host Invalid Device Object Handle This constant defines an invalid USB Device Object Handle. The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-363EDD36-7BAA-4075-A404-86B8F02CF1FA.html</loc>
                           <lastmod>2024-03-20T12:39:33</lastmod>
                           <title>3.2.4.41 USB_HOST_DEVICE_STRING_LANG_ID_DEFAULT Macro</title>
                           <description>C #define USB_HOST_DEVICE_STRING_LANG_ID_DEFAULT (0) Summary USB Host Device String Default Lang ID This constant defines the default Lang ID. When then languageID parameter in the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-062A4344-CDB6-4301-B2C9-265FE38A0B6D.html</loc>
                           <lastmod>2024-03-20T12:39:41</lastmod>
                           <title>3.2.4.42 USB_HOST_REQUEST_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_REQUEST_HANDLE_INVALID ((USB_HOST_REQUEST_HANDLE)(-1)) Summary USB Host Request Invalid Handle This constant defines an Invalid USB Host Request Handle. This handle is returned by ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-50B37B93-E2DE-4091-BDF6-32A5D184679A.html</loc>
                           <lastmod>2024-03-20T12:39:53</lastmod>
                           <title>3.2.4.43 USB_HOST_RESULT_MIN Macro</title>
                           <description>C #define USB_HOST_RESULT_MIN -100 Summary USB Host Result Minimum Constant. Constant identifying the USB Host Result Minimum Value. This constant is used in the USB_HOST_RESULT enumeration. Remarks ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-500795E1-98B5-410B-B7C9-01BC0969C76C.html</loc>
                     <lastmod>2024-03-20T12:40:17</lastmod>
                     <title>3.2.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_host.hUSB Host Layer Interface Header.usb_host_config_template.hUSB host configuration template header ...</description>
                     <urls>
                        <url>
                           <loc>GUID-39FA0AC2-F878-451B-834B-6071068CCE0C.html</loc>
                           <lastmod>2024-03-20T12:41:26</lastmod>
                           <title>3.2.5.1 usb_host.h</title>
                           <description>File Name usb_host.h Description USB Host Layer Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make up the interface to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-580E5AEA-0CC1-46C7-BA8E-5F114DEC13E7.html</loc>
                           <lastmod>2024-03-06T10:03:07</lastmod>
                           <title>3.2.5.2 usb_host_config_template.h</title>
                           <description>File Name usb_host_config_template.h Description USB Host Layer Configuration constants This file contains USB host layer compile time options (macros) that are to be configured by the user. This ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-AD0B8FFD-F150-4FEA-9807-E562DFFF40B3.html</loc>
               <lastmod>2024-03-06T07:05:27</lastmod>
               <title>3.3 USB Audio v1.0 Host Client Driver Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB Audio v1.0 Host Client Driver Library. Using the LibraryThis topic describes the basic architecture of the USB Audio v1.0 Host ...</description>
               <urls>
                  <url>
                     <loc>GUID-05043876-E108-44D2-82CB-DB9B8158E2A1.html</loc>
                     <lastmod>2024-03-04T05:26:28</lastmod>
                     <title>3.3.1 Introduction</title>
                     <description>The USB Audio v1.0 Host Client Driver in the MPLAB Harmony USB Host Stack allows USB Host applications to support and interact with Audio v1.0 USB devices. The USB Audio v1.0 Host Client Driver has ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-1721DFF7-8AA0-4F9E-AAEA-3C78709C573B.html</loc>
                     <lastmod>2024-03-04T05:26:31</lastmod>
                     <title>3.3.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB Audio v1.0 Host Client Driver Library and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-28FFFE1E-2817-4438-BB6E-2E3E72CB1A4D.html</loc>
                           <lastmod>2024-03-06T07:05:31</lastmod>
                           <title>3.3.2.1 Abstraction Model</title>
                           <description>The USB Audio v1.0 Host Client Driver interacts with Host Layer to control the attached Audio v1.0 device. The USB Host Layer attaches the Audio v1.0 Host Client Driver to the Audio v1.0 device when ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-32C9C308-251E-4F67-A5B3-D20BA9649DF3.html</loc>
                           <lastmod>2024-03-06T07:05:34</lastmod>
                           <title>3.3.2.2 Library Overview</title>
                           <description>The USB Audio v1.0 Host Client Driver can be grouped functionally as shown in the following table.Library Interface Section Description Audio Device access Functions These functions allow application ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CF7EE7AC-4A46-49B4-A336-9FA080D861F0.html</loc>
                           <lastmod>2024-03-04T05:26:34</lastmod>
                           <title>3.3.2.3 How the Library Works</title>
                           <description>The USB Audio v1.0 Host Client Driver provides the user application with an easy-to-use interface to the attached Audio v1.0 device. The USB Host Layer initializes the USB Audio v1.0 Host Client ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-4C037CFC-2E53-402C-816E-A24343A5E71D.html</loc>
                                 <lastmod>2024-03-06T07:05:38</lastmod>
                                 <title>3.3.2.3.1 TPL Table Configuration for Audio v1.0 Devices</title>
                                 <description>The Host Layer attaches the Audio v1.0 Host Client Driver to a device when the device class in the Interface descriptor matches the entry in the TPL table. When specifying the entry for the Audio ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-F5FC7D64-B9A7-426A-8574-E4D8B8D117BC.html</loc>
                                 <lastmod>2024-03-06T07:05:42</lastmod>
                                 <title>3.3.2.3.2 Detecting Device Attach</title>
                                 <description>The application will need to know when a Audio v1.0 Device is attached. To receive this attach event from the Audio v1.0 Host Client Driver, the application must register an Attach Event Handler by ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-65C19682-47B3-4E39-A1D2-47F2781875BF.html</loc>
                                 <lastmod>2024-03-06T07:05:18</lastmod>
                                 <title>3.3.2.3.3 Obtaining Audio v1.0 Device Audio Stream Details</title>
                                 <description>The application will need to know more details about an attached audio device like Number of Audio Stream Groups and audio format details of each audio stream in audio stream group. Application will ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-FAC69892-4FD5-4F53-853C-B188F1A80570.html</loc>
                                 <lastmod>2024-03-06T07:05:15</lastmod>
                                 <title>3.3.2.3.4 Obtaining an Audio Stream</title>
                                 <description>Once application has identified which audio stream to use, application must open that audio stream by using USB_HOST_AUDIO_V1_0_StreamOpen function. This function takes audio stream object ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-C1F593A2-4DE0-48E0-B955-1EA59C2BDC55.html</loc>
                                 <lastmod>2024-03-06T07:05:12</lastmod>
                                 <title>3.3.2.3.5 Audio Stream Event Handling</title>
                                 <description>The Audio v1.0 streams presents an event driven interface to the application. The USB Audio v1.0 Host Client Driver requires the application client to set an event handler against each audio stream ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-E95A50B4-6EAD-4BB0-92AC-5473AED4AEE0.html</loc>
                                 <lastmod>2024-03-06T07:05:09</lastmod>
                                 <title>3.3.2.3.6 Enabling Audio Stream</title>
                                 <description>An audio stream must be enabled before doing any data transfer operation. An audio stream enable or disable can be scheduled by using USB_HOST_AUDIO_V1_0_StreamEnable or ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-E792EEE0-D00B-4A60-A7D7-227B82436849.html</loc>
                                 <lastmod>2024-03-06T07:05:07</lastmod>
                                 <title>3.3.2.3.7 Setting the Desired Audio Stream Sampling Rate</title>
                                 <description>Sampling rate of an audio stream can be set using USB_HOST_AUDIO_V1_0_StreamSamplingRateSet function. Supported sampling rates for an audio stream is returned as part of ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-4C69E72A-5CCA-4BDD-B68D-2AF1A8D4FF8B.html</loc>
                                 <lastmod>2024-03-06T07:05:04</lastmod>
                                 <title>3.3.2.3.8 Audio Data Streaming</title>
                                 <description>The application can use the USB_HOST_AUDIO_V1_0_StreamRead and USB_HOST_AUDIO_V1_0_StreamWrite functions to transfer data to an Audio Stream. While calling these functions, the stream handle ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-0B02B0D6-2E61-40C5-AA7F-E81BF66F77F0.html</loc>
                                 <lastmod>2024-03-06T07:05:01</lastmod>
                                 <title>3.3.2.3.9 Sending Class Specific Control Transfers</title>
                                 <description>The Audio v1.0 Host Client Driver allows the application client to send Audio v1.0 Class specific commands to the connected device. These commands can be send using USB_HOST_AUDIO_V1_0_ControlRequest ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-4241D54B-0354-403E-A938-1B0B021200FD.html</loc>
                     <lastmod>2024-03-08T09:09:28</lastmod>
                     <title>3.3.3 Configuring the Library</title>
                     <description>The USB Audio v1.0 Host Client Driver requires configuration constants to be specified in system_config.h file. These constants define the build time configuration (functionality and static ...</description>
                     <urls>
                        <url>
                           <loc>GUID-B36CCECE-BA7C-4A22-9309-A13E8D8312E1.html</loc>
                           <lastmod>2024-03-20T12:45:10</lastmod>
                           <title>3.3.3.1 USB_HOST_AUDIO_V1_ATTACH_LISTENERS_NUMBER Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_ATTACH_LISTENERS_NUMBER Summary USB Host Audio v1.0 Attach Listeners Number The USB Audio v1.0 Host Client Driver provides attach notification to listeners who have ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BA7C0F69-601B-4029-9196-A7D86B4DE797.html</loc>
                           <lastmod>2024-03-20T12:45:18</lastmod>
                           <title>3.3.3.2 USB_HOST_AUDIO_V1_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_INSTANCES_NUMBER Summary USB Host Audio v1.0 Maximum Number of Instances This macro defines the number of instances of the Audio v1.0 host Driver. For example, if the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A22BABE4-D18C-428F-A8FD-ACEBFF32DE8F.html</loc>
                           <lastmod>2024-03-20T12:45:27</lastmod>
                           <title>3.3.3.3 USB_HOST_AUDIO_V1_STREAMING_INTERFACE_ALTERNATE_SETTINGS_NUMBER Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_STREAMING_INTERFACE_ALTERNATE_SETTINGS_NUMBER Summary USB Host Audio v1.0 Streaming interface alternate setting number This configuration constant defines maximum number ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FC75A984-6B1D-4445-A8D7-8795719904F5.html</loc>
                           <lastmod>2024-03-20T12:45:40</lastmod>
                           <title>3.3.3.4 USB_HOST_AUDIO_V1_STREAMING_INTERFACES_NUMBER Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_STREAMING_INTERFACES_NUMBER Summary USB Host Audio v1.0 Streaming Interfaces Number This configuration constant defines maximum number of streaming interfaces could be ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-B7B3E40B-D35F-4FDF-8570-F3BCB8378E6F.html</loc>
                     <lastmod>2024-03-20T12:47:16</lastmod>
                     <title>3.3.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Audio v1.0 Host Client Driver Library. Refer to each section for a detailed description. Audio Device Access ...</description>
                     <urls>
                        <url>
                           <loc>GUID-AB6AD785-18BA-4432-A74D-5AA4EFC76976.html</loc>
                           <lastmod>2024-03-20T12:48:24</lastmod>
                           <title>3.3.4.1 USB_HOST_AUDIO_V1_AttachEventHandlerSet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_AttachEventHandlerSet( USB_HOST_AUDIO_V1_ATTACH_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function will set an attach event handler. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D06A48BC-542D-48E7-AC00-C526003A441B.html</loc>
                           <lastmod>2024-03-20T12:48:35</lastmod>
                           <title>3.3.4.2 USB_HOST_AUDIO_V1_ControlEntityGetFirst Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_ControlEntityGetFirst( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ * pEntityObject ); Summary This function retrieves the handle ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-923CF7EC-E893-4763-9B16-3914A979B656.html</loc>
                           <lastmod>2024-03-20T12:48:46</lastmod>
                           <title>3.3.4.3 USB_HOST_AUDIO_V1_ControlEntityGetNext Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_ControlEntityGetNext( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObjectCurrent, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0CEA463C-993F-4E05-A715-4C8C30D57F19.html</loc>
                           <lastmod>2024-03-20T12:48:55</lastmod>
                           <title>3.3.4.4 USB_HOST_AUDIO_V1_DeviceObjHandleGet Function</title>
                           <description>C USB_HOST_DEVICE_OBJ_HANDLE USB_HOST_AUDIO_V1_DeviceObjHandleGet( USB_HOST_AUDIO_V1_OBJ audioDeviceObj ); Summary This function returns the device object handle for this Audio v1.0 Device. This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B443FB15-6D1F-409F-A7EF-82F6FF4A0250.html</loc>
                           <lastmod>2024-03-21T09:28:24</lastmod>
                           <title>3.3.4.5 USB_HOST_AUDIO_V1_EntityObjectGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_EntityObjectGet( USB_HOST_AUDIO_V1_OBJ audioObj, uint8_t entityId, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ* entityObj ); Summary This function retrieves the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CB26EED4-3D8F-4FE5-AE06-469C737F08C1.html</loc>
                           <lastmod>2024-03-20T12:49:33</lastmod>
                           <title>3.3.4.6 USB_HOST_AUDIO_V1_EntityRequestCallbackSet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_EntityRequestCallbackSet( USB_HOST_AUDIO_V1_OBJ audioDeviceObj, USB_HOST_AUDIO_V1_ENTITY_REQUEST_CALLBACK appAudioEntityRequestCallback, uintptr_t context ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BD8CEA0A-5149-47DE-A97A-6991677466B3.html</loc>
                           <lastmod>2024-03-20T12:49:42</lastmod>
                           <title>3.3.4.7 USB_HOST_AUDIO_V1_EntityTypeGet Function</title>
                           <description>C USB_AUDIO_V1_ENTITY_TYPE USB_HOST_AUDIO_V1_EntityTypeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the entity type of the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C326E2E2-B358-4285-9EAF-F158A822C8AB.html</loc>
                           <lastmod>2024-03-20T12:49:54</lastmod>
                           <title>3.3.4.8 USB_HOST_AUDIO_V1_FeatureUnitChannelMuteExists Function</title>
                           <description>C bool USB_HOST_AUDIO_V1_FeatureUnitChannelMuteExists( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, uint8_t channel ); Summary This function returns "true" if ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E72053AD-3BDF-4648-A1CC-D305CE3836C0.html</loc>
                           <lastmod>2024-03-20T12:50:14</lastmod>
                           <title>3.3.4.9 USB_HOST_AUDIO_V1_FeatureUnitChannelMuteGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelMuteGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, USB_HOST_AUDIO_V1_REQUEST_HANDLE * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0880A7B8-B790-48C3-B1F3-2D8A676A2644.html</loc>
                           <lastmod>2024-03-20T12:50:33</lastmod>
                           <title>3.3.4.10 USB_HOST_AUDIO_V1_FeatureUnitChannelMuteSet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelMuteSet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, USB_HOST_AUDIO_V1_REQUEST_HANDLE * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-25BED149-08AA-4A52-A925-4813554906BA.html</loc>
                           <lastmod>2024-03-20T12:53:53</lastmod>
                           <title>3.3.4.11 USB_HOST_AUDIO_V1_FeatureUnitChannelNumbersGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_FeatureUnitChannelNumbersGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the number of channels. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8E5E7549-ABE5-4DBF-9654-F000D63D4BDC.html</loc>
                           <lastmod>2024-03-20T12:54:03</lastmod>
                           <title>3.3.4.12 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeExists Function</title>
                           <description>C bool USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeExists( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, uint8_t channel ); Summary This function returns "true" if ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D748C4A9-487E-4821-8F6A-AF6EED7D0CA2.html</loc>
                           <lastmod>2024-03-20T12:54:24</lastmod>
                           <title>3.3.4.13 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, USB_HOST_AUDIO_V1_REQUEST_HANDLE * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-64EEB838-5835-44FF-839F-F846EE8D55BA.html</loc>
                           <lastmod>2024-03-21T10:40:44</lastmod>
                           <title>3.3.4.14 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeRangeGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeRangeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, USB_HOST_AUDIO_V1_REQUEST_HANDLE * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7B19B3DE-A617-4CFD-8709-EDF1563D1148.html</loc>
                           <lastmod>2024-03-20T12:55:02</lastmod>
                           <title>3.3.4.15 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, USB_HOST_AUDIO_V1_REQUEST_HANDLE * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4DD3EC57-2813-4B4D-B177-D3C3FDDEE8A0.html</loc>
                           <lastmod>2024-03-20T13:04:27</lastmod>
                           <title>3.3.4.16 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSubRangeNumbersGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSubRangeNumbersGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-05C1BE25-9006-4BEA-8F7E-109F85D4418A.html</loc>
                           <lastmod>2024-03-20T12:55:27</lastmod>
                           <title>3.3.4.17 USB_HOST_AUDIO_V1_FeatureUnitIDGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_FeatureUnitIDGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the ID of the D of the Feature Unit. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F3AEB295-5168-406A-A705-0CC2DA405971.html</loc>
                           <lastmod>2024-03-20T12:55:40</lastmod>
                           <title>3.3.4.18 USB_HOST_AUDIO_V1_FeatureUnitIDGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_FeatureUnitIDGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the ID of the D of the Feature Unit. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0B64F0E7-1CCC-4265-8FFA-CA92E9D70F54.html</loc>
                           <lastmod>2024-03-20T12:55:49</lastmod>
                           <title>3.3.4.19 USB_HOST_AUDIO_V1_TerminalAssociationGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_TerminalAssociationGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the ID of the associated ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AC76ECC7-59CE-466F-8403-295C413E7790.html</loc>
                           <lastmod>2024-03-20T12:56:00</lastmod>
                           <title>3.3.4.20 USB_HOST_AUDIO_V1_TerminalIDGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_TerminalIDGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the Terminal ID of the Audio Control ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DAF23237-1277-400B-86D9-47293878AB93.html</loc>
                           <lastmod>2024-03-20T12:56:11</lastmod>
                           <title>3.3.4.21 USB_HOST_AUDIO_V1_TerminalInputChannelNumbersGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_TerminalInputChannelNumbersGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the number of logical ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9C6D285B-E90D-41F9-917A-CA8F2BEC33BD.html</loc>
                           <lastmod>2024-03-20T12:56:23</lastmod>
                           <title>3.3.4.22 USB_HOST_AUDIO_V1_TerminalSourceIDGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_TerminalSourceIDGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the ID of the unit or terminal to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-298CA9D2-74A9-4AA1-B760-D64056BE2754.html</loc>
                           <lastmod>2024-02-29T06:08:55</lastmod>
                           <title>3.3.4.23 </title>
                           <description>C USB_AUDIO_V1_TERMINAL_TYPE USB_HOST_AUDIO_V1_TerminalTypeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns the Terminal type of ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A92FD83A-DB13-4251-B605-659C7B7FEEA8.html</loc>
                           <lastmod>2024-03-20T12:57:53</lastmod>
                           <title>3.3.4.24 USB_HOST_AUDIO_V1_StreamClose Function</title>
                           <description>This function will close the open audio stream. This closes the association between the application entity that opened the audio stream and the audio stream. The audio stream handle becomes invalid. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1EB59A4B-6B1C-4B2A-995E-86CD0E009592.html</loc>
                           <lastmod>2024-03-21T09:29:29</lastmod>
                           <title>3.3.4.25 USB_HOST_AUDIO_V1_StreamEventHandlerSet Function</title>
                           <description>This function registers a client specific Audio v1.0 stream event handler. The Audio v1.0 Host Client Driver will call the appAudioHandler function specified as the second argument with relevant ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9B5B89E7-B54F-4EBE-8B11-267CDD09ED9B.html</loc>
                           <lastmod>2024-03-20T12:58:22</lastmod>
                           <title>3.3.4.26 USB_HOST_AUDIO_V1_StreamingInterfaceBitResolutionGet Function</title>
                           <description>This function returns the bit resolution size of the specified streaming interface setting. C uint8_t USB_HOST_AUDIO_V1_StreamingInterfaceBitResolutionGet( USB_HOST_AUDIO_V1_OBJaudioObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A37F7A32-75E4-45BC-8FC4-9E0AE920FF68.html</loc>
                           <lastmod>2024-03-20T12:58:37</lastmod>
                           <title>3.3.4.27 USB_HOST_AUDIO_V1_StreamingInterfaceChannelNumbersGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_StreamingInterfaceChannelNumbersGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-FB2D22D8-36BA-4C6C-A0E7-D9F722D790DF.html</loc>
                           <lastmod>2024-03-20T12:58:48</lastmod>
                           <title>3.3.4.28 USB_HOST_AUDIO_V1_StreamingInterfaceDirectionGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_STREAM_DIRECTION USB_HOST_AUDIO_V1_StreamingInterfaceDirectionGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1D4AD150-3C6D-4CE4-972A-F085346EBDB2.html</loc>
                           <lastmod>2024-03-20T12:58:57</lastmod>
                           <title>3.3.4.29 USB_HOST_AUDIO_V1_StreamingInterfaceFormatTagGet Function</title>
                           <description>C USB_AUDIO_V1_FORMAT_TAG USB_HOST_AUDIO_V1_StreamingInterfaceFormatTagGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-95D1D72A-7FE8-411C-8595-DDBA5DEAAB6A.html</loc>
                           <lastmod>2024-03-20T12:59:10</lastmod>
                           <title>3.3.4.30 USB_HOST_AUDIO_V1_StreamingInterfaceGetFirst Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamingInterfaceGetFirst( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ* streamingInterfaceObj ); Summary This function will ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6CCEFF8B-8090-4A35-98B3-BE99C181743A.html</loc>
                           <lastmod>2024-03-21T09:30:34</lastmod>
                           <title>3.3.4.31 USB_HOST_AUDIO_V1_StreamingInterfaceGetNext Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamingInterfaceGetNext( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObjCurrent, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AD055BEF-8C41-4C88-8797-50A9F51BD595.html</loc>
                           <lastmod>2024-03-20T12:59:34</lastmod>
                           <title>3.3.4.32 USB_HOST_AUDIO_V1_StreamingInterfaceSamplingFrequenciesGet Function</title>
                           <description>C uint8_t* USB_HOST_AUDIO_V1_StreamingInterfaceSamplingFrequenciesGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3954710E-F026-46F4-A0A1-BC0284777B77.html</loc>
                           <lastmod>2024-03-20T12:59:46</lastmod>
                           <title>3.3.4.33 USB_HOST_AUDIO_V1_StreamingInterfaceSamplingFrequencyTypeGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_StreamingInterfaceSamplingFrequencyTypeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-730E0A09-6E49-4092-A226-18E23CA77792.html</loc>
                           <lastmod>2024-03-21T09:37:04</lastmod>
                           <title>3.3.4.34 USB_HOST_AUDIO_V1_StreamingInterfaceSet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamingInterfaceSet( USB_HOST_AUDIO_V1_STREAM_HANDLE streamHandle, USB_HOST_AUDIO_V1_REQUEST_HANDLE * requestHandle, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0CBBC069-11A7-44A2-9FF4-779CA1D21117.html</loc>
                           <lastmod>2024-03-20T13:01:07</lastmod>
                           <title>3.3.4.35 USB_HOST_AUDIO_V1_StreamingInterfaceSettingGetFirst Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamingInterfaceSettingGetFirst( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CE15B354-18B2-4D95-873F-5E5FC67F3872.html</loc>
                           <lastmod>2024-03-20T13:01:22</lastmod>
                           <title>3.3.4.36 USB_HOST_AUDIO_V1_StreamingInterfaceSettingGetNext Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamingInterfaceSettingGetNext( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CE2A3658-2068-4633-855D-78000569DF56.html</loc>
                           <lastmod>2024-03-20T13:01:35</lastmod>
                           <title>3.3.4.37 USB_HOST_AUDIO_V1_StreamingInterfaceSubFrameSizeGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_StreamingInterfaceSubFrameSizeGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6507E5DA-1D0B-4B5B-B09C-E903F9B76AA1.html</loc>
                           <lastmod>2024-03-20T13:01:53</lastmod>
                           <title>3.3.4.38 USB_HOST_AUDIO_V1_StreamingInterfaceTerminalLinkGet Function</title>
                           <description>C uint8_t USB_HOST_AUDIO_V1_StreamingInterfaceTerminalLinkGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ streamingInterfaceObj, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4BC0E671-7674-4868-BE29-9FF2FDACFF98.html</loc>
                           <lastmod>2024-03-20T13:03:24</lastmod>
                           <title>3.3.4.39 USB_HOST_AUDIO_V1_StreamOpen Function</title>
                           <description>C USB_HOST_AUDIO_V1_STREAM_HANDLE USB_HOST_AUDIO_V1_StreamOpen( USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ audiostreamingInterfaceObj ); Summary This function will open the specified audio stream. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-02BC1D65-2AE8-4F61-9186-698A5E9726F5.html</loc>
                           <lastmod>2024-03-20T13:03:35</lastmod>
                           <title>3.3.4.40 USB_HOST_AUDIO_V1_StreamRead Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamRead( USB_HOST_AUDIO_V1_STREAM_HANDLE streamHandle, USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE * transferHandle, void * source, size_t length ); ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C332B8E4-29C5-47D1-A1BD-BD057CE184C5.html</loc>
                           <lastmod>2024-03-21T09:26:33</lastmod>
                           <title>3.3.4.41 USB_HOST_AUDIO_V1_StreamSamplingFrequencyGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamSamplingFrequencyGet( USB_HOST_AUDIO_V1_STREAM_HANDLE streamHandle, USB_HOST_AUDIO_V1_REQUEST_HANDLE * requestHandle, uint32_t * samplingFrequency ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E4850EFC-91B4-457E-8284-614BE29CB5CD.html</loc>
                           <lastmod>2024-03-21T09:26:40</lastmod>
                           <title>3.3.4.42 USB_HOST_AUDIO_V1_StreamSamplingFrequencySet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamSamplingFrequencySet( USB_HOST_AUDIO_V1_STREAM_HANDLE streamHandle, USB_HOST_AUDIO_V1_REQUEST_HANDLE * requestHandle, const uint32_t * ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-02F94D9B-4211-4175-BC27-CBB4B972A5F9.html</loc>
                           <lastmod>2024-03-20T13:04:07</lastmod>
                           <title>3.3.4.43 USB_HOST_AUDIO_V1_StreamWrite Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_StreamWrite( USB_HOST_AUDIO_V1_STREAM_HANDLE streamHandle, USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE * transferHandle, void * source, size_t length ); ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4DD3EC57-2813-4B4D-B177-D3C3FDDEE8A0_2.html</loc>
                           <lastmod>2024-03-20T13:04:27</lastmod>
                           <title>3.3.4.44 USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSubRangeNumbersGet Function</title>
                           <description>C USB_HOST_AUDIO_V1_RESULT USB_HOST_AUDIO_V1_FeatureUnitChannelVolumeSubRangeNumbersGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A32A7505-8CAE-4FF3-89E5-06FDAF28821E.html</loc>
                           <lastmod>2024-03-20T13:04:38</lastmod>
                           <title>3.3.4.45 USB_HOST_AUDIO_V1_TerminalInputChannelConfigGet Function</title>
                           <description>C USB_AUDIO_CHANNEL_CONFIG USB_HOST_AUDIO_V1_TerminalInputChannelConfigGet( USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ entityObject ); Summary This function returns a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E13126E0-F5F9-4487-8127-D32FF8F234C6.html</loc>
                           <lastmod>2024-03-20T13:04:47</lastmod>
                           <title>3.3.4.46 USB_HOST_AUDIO_V1_ATTACH_EVENT_HANDLER Type</title>
                           <description>C typedef void (* USB_HOST_AUDIO_V1_ATTACH_EVENT_HANDLER)(USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_EVENT event, uintptr_t context); Summary USB Host Audio v1.0 Client Driver Attach Event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D095C1AD-E84C-4B0B-9322-E957AC71FD5D.html</loc>
                           <lastmod>2024-03-20T13:04:56</lastmod>
                           <title>3.3.4.47 USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_CONTROL_ENTITY_OBJ; Summary USB Host Audio v1.0 Control Entity Object This data type defines the type of the object returned by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-67FC9D1B-DC69-4D04-A9BE-85A6F3953878.html</loc>
                           <lastmod>2024-03-20T13:05:13</lastmod>
                           <title>3.3.4.48 USB_HOST_AUDIO_V1_ENTITY_REQUEST_CALLBACK Type</title>
                           <description>C typedef void (* USB_HOST_AUDIO_V1_ENTITY_REQUEST_CALLBACK)(USB_HOST_AUDIO_V1_OBJ audioObj, USB_HOST_AUDIO_V1_REQUEST_HANDLE requestHandle, USB_HOST_AUDIO_V1_RESULT result, size_t size, uintptr_t ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-06F0D68F-28F5-4FBC-9BA1-85F28BC098CA.html</loc>
                           <lastmod>2024-03-20T13:05:24</lastmod>
                           <title>3.3.4.49 USB_HOST_AUDIO_V1_EVENT Enumeration</title>
                           <description>C typedef enum { USB_HOST_AUDIO_V1_EVENT_ATTACH, USB_HOST_AUDIO_V1_EVENT_DETACH } USB_HOST_AUDIO_V1_EVENT; Summary Audio v1.0 Class Driver Events This enumeration identifies the possible events that ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A86B9945-C7DA-4101-BCDA-3650816A1550.html</loc>
                           <lastmod>2024-03-20T13:05:31</lastmod>
                           <title>3.3.4.50 USB_HOST_AUDIO_V1_OBJ Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_OBJ; Summary USB Host Audio v1.0 Object This data type defines the type of the Audio Host client object. This type is returned by the client driver attach event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BDD1E0CA-D0F9-47C4-9BDD-357F5C4B6CF4.html</loc>
                           <lastmod>2024-03-20T13:05:38</lastmod>
                           <title>3.3.4.51 USB_HOST_AUDIO_V1_REQUEST_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_REQUEST_HANDLE; Summary USB Host Audio v1.0 Client Driver Request Handle This handle is returned by the Audio v1.0 Host client driver entity control functions ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-79878959-394E-440D-B5C8-CD74BD3AADD2.html</loc>
                           <lastmod>2024-03-20T13:05:59</lastmod>
                           <title>3.3.4.52 USB_HOST_AUDIO_V1_RESULT Enumeration</title>
                           <description>C typedef enum { USB_HOST_AUDIO_V1_RESULT_FAILURE, USB_HOST_AUDIO_V1_RESULT_BUSY, USB_HOST_AUDIO_V1_RESULT_REQUEST_STALLED, USB_HOST_AUDIO_V1_RESULT_INVALID_PARAMETER, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-72BECB10-B81F-440A-8C53-155B4B5D5AEE.html</loc>
                           <lastmod>2024-03-20T13:06:07</lastmod>
                           <title>3.3.4.53 USB_HOST_AUDIO_V1_STREAM_DIRECTION Enumeration</title>
                           <description>C typedef enum { USB_HOST_AUDIO_V1_DIRECTION_OUT, USB_HOST_AUDIO_V1_DIRECTION_IN } USB_HOST_AUDIO_V1_STREAM_DIRECTION; Summary USB Host Audio v1.0 Class Driver Stream Direction This enumeration lists ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CC2BFDDF-1366-4757-A5F5-2C01A61FEB94.html</loc>
                           <lastmod>2024-03-20T13:06:30</lastmod>
                           <title>3.3.4.54 USB_HOST_AUDIO_V1_STREAM_EVENT Enumeration</title>
                           <description>C typedef enum { USB_HOST_AUDIO_V1_STREAM_EVENT_READ_COMPLETE, USB_HOST_AUDIO_V1_STREAM_EVENT_WRITE_COMPLETE, USB_HOST_AUDIO_V1_STREAM_EVENT_INTERFACE_SET_COMPLETE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8008A2B0-460E-4F2F-A9FB-07E4D6DB7CFB.html</loc>
                           <lastmod>2024-03-20T13:06:56</lastmod>
                           <title>3.3.4.55 USB_HOST_AUDIO_V1_STREAM_EVENT_HANDLER Type</title>
                           <description>C typedef USB_HOST_AUDIO_V1_STREAM_EVENT_RESPONSE (* USB_HOST_AUDIO_V1_STREAM_EVENT_HANDLER)(USB_HOST_AUDIO_V1_STREAM_HANDLE handle, USB_HOST_AUDIO_V1_STREAM_EVENT event, void * eventData, uintptr_t ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-38EA1BD1-380D-4568-A672-50C7A15B094B.html</loc>
                           <lastmod>2024-03-20T13:08:34</lastmod>
                           <title>3.3.4.56 USB_HOST_AUDIO_V1_STREAM_EVENT_INTERFACE_SET_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_AUDIO_V1_REQUEST_HANDLE requestHandle; USB_HOST_AUDIO_V1_RESULT requestStatus; } USB_HOST_AUDIO_V1_STREAM_EVENT_INTERFACE_SET_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-96A7FC30-982A-40D6-8B7A-EB48E0630B07.html</loc>
                           <lastmod>2024-03-20T13:08:46</lastmod>
                           <title>3.3.4.57 USB_HOST_AUDIO_V1_STREAM_EVENT_READ_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE transferHandle; size_t length; USB_HOST_AUDIO_V1_RESULT result; } USB_HOST_AUDIO_V1_STREAM_EVENT_READ_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C7F5C371-F190-4635-9BCA-C1FE4F9A6C1D.html</loc>
                           <lastmod>2024-03-20T13:08:56</lastmod>
                           <title>3.3.4.58 USB_HOST_AUDIO_V1_STREAM_EVENT_RESPONSE Enumeration</title>
                           <description>C typedef enum { USB_HOST_AUDIO_V1_STREAM_EVENT_RESPONSE_NONE } USB_HOST_AUDIO_V1_STREAM_EVENT_RESPONSE; Summary USB Host Audio v1.0 Stream Event Handler Return Type This enumeration lists the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-ECD855AA-5547-4B4C-B4E4-FAEF2CD28887.html</loc>
                           <lastmod>2024-03-20T13:09:06</lastmod>
                           <title>3.3.4.59 USB_HOST_AUDIO_V1_STREAM_EVENT_SAMPLING_RATE_SET_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_AUDIO_V1_REQUEST_HANDLE requestHandle; USB_HOST_AUDIO_V1_RESULT requestStatus; } USB_HOST_AUDIO_V1_STREAM_EVENT_INTERFACE_SET_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1F53ED18-C948-4307-B6D3-B9AC59948604.html</loc>
                           <lastmod>2024-03-20T13:09:21</lastmod>
                           <title>3.3.4.60 USB_HOST_AUDIO_V1_STREAM_EVENT_WRITE_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE transferHandle; size_t length; USB_HOST_AUDIO_V1_RESULT result; } USB_HOST_AUDIO_V1_STREAM_EVENT_READ_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BEA78ADC-6CDB-43C2-BB61-0A5207EC0D61.html</loc>
                           <lastmod>2024-03-20T13:09:38</lastmod>
                           <title>3.3.4.61 USB_HOST_AUDIO_V1_STREAM_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_STREAM_HANDLE; Summary USB Host Audio stream handle This data type defines the type of the handle returned by USB_HOST_AUDIO_V1_StreamOpen function. The ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9DF19C29-4EF2-4C67-ACC1-B2C5801253FF.html</loc>
                           <lastmod>2024-03-20T13:11:12</lastmod>
                           <title>3.3.4.62 USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE; Summary USB Host Audio v1.0 Class Driver Stream Data Transfer Handle This handle is returned by the Audio v1.0 Class driver stream data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-39786BE2-7F4D-45F7-B0A9-E963948B0CE4.html</loc>
                           <lastmod>2024-03-20T13:09:54</lastmod>
                           <title>3.3.4.63 USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_STREAMING_INTERFACE_OBJ; Summary USB Host Audio v1.0 Streaming interface Object This data type defines the type of the Audio v1.0 Host streaming interface ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C2F406DA-92D1-466E-8B3C-A12B4A74481B.html</loc>
                           <lastmod>2024-03-20T13:10:02</lastmod>
                           <title>3.3.4.64 USB_HOST_AUDIO_V1_STREAMING_INTERFACE_SETTING_OBJ Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_STREAMING_INTERFACE_SETTING_OBJ; Summary USB Host Audio v1.0 Streaming Interface Setting Object This data type defines the type of the Audio v1.0 Host streaming ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4A32E431-948E-4B71-87DB-D40BFEE995ED.html</loc>
                           <lastmod>2024-03-20T13:10:11</lastmod>
                           <title>3.3.4.65 USB_HOST_AUDIO_V1_INTERFACE Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_INTERFACE Summary USB HOST Audio V1 Client Driver Interface This macro should be used by the application in the TPL table while adding support for the USB Audio v1.0 Host ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-00EDBB9E-D9A9-4EDC-BBB1-8AD99B0EDE8B.html</loc>
                           <lastmod>2024-03-20T13:10:19</lastmod>
                           <title>3.3.4.66 USB_HOST_AUDIO_V1_REQUEST_HANDLE_INVALID</title>
                           <description>C #define USB_HOST_AUDIO_V1_REQUEST_HANDLE_INVALID ((USB_HOST_AUDIO_V1_REQUEST_HANDLE)(-1)) Summary USB Host Audio v1.0 Client Driver Invalid Request Handle This handle is returned by the Audio v1.0 ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-381FFFA3-5D27-4EE2-80E0-D9414030B241.html</loc>
                           <lastmod>2024-03-20T13:10:58</lastmod>
                           <title>3.3.4.67 USB_HOST_AUDIO_V1_SAMPLING_FREQUENCIES_NUMBER Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_SAMPLING_FREQUENCIES_NUMBER USB_HOST_AUDIO_V1_0_SAMPLING_FREQUENCIES_NUMBER Summary USB Host Audio stream Info table structure This structure is an out parameter to the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DA1EB653-DDC6-4F9E-A6D3-2877BCACF4CB.html</loc>
                           <lastmod>2024-03-20T13:11:05</lastmod>
                           <title>3.3.4.68 USB_HOST_AUDIO_V1_STREAM_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_AUDIO_V1_STREAM_HANDLE_INVALID ((USB_HOST_AUDIO_V1_STREAM_HANDLE)(-1)) Summary USB Host Audio stream Invalid handle This handle is returned by the USB_HOST_AUDIO_V1_StreamOpen ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9DF19C29-4EF2-4C67-ACC1-B2C5801253FF_2.html</loc>
                           <lastmod>2024-03-20T13:11:12</lastmod>
                           <title>3.3.4.69 USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_AUDIO_V1_STREAM_TRANSFER_HANDLE; Summary USB Host Audio v1.0 Class Driver Stream Data Transfer Handle This handle is returned by the Audio v1.0 Class driver stream data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-CDB16E09-B1BD-4AE8-A0F2-D9252F01A911.html</loc>
                           <lastmod>2024-03-20T13:11:24</lastmod>
                           <title>3.3.4.70 USB_HOST_AUDIO_V1_STREAM_EVENT_SAMPLING_RATE_GET_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_AUDIO_V1_REQUEST_HANDLE requestHandle; USB_HOST_AUDIO_V1_RESULT requestStatus; } USB_HOST_AUDIO_V1_STREAM_EVENT_INTERFACE_SET_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-44268685-CAA9-4182-98B0-1E2D78B313C7.html</loc>
                     <lastmod>2024-03-07T06:04:58</lastmod>
                     <title>3.3.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_host_audio_v1_0.h USB Host Audio v1_0 Class Driver Interface Header ...</description>
                     <urls>
                        <url>
                           <loc>GUID-6C535C07-F332-4728-B941-38F0B85D0CC2.html</loc>
                           <lastmod>2024-03-07T06:01:16</lastmod>
                           <title>3.3.5.1 usb_host_audio_v1_0.h</title>
                           <description>File Name usb_host_audio_v1_0.h Description USB Host Audio v1.0 Class Driver Interface Definition This header file contains the function prototypes and definitions of the data types and constants ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DEF11386-CC81-4C85-A76C-DE14041367FA.html</loc>
                           <lastmod>2024-03-08T06:33:09</lastmod>
                           <title>3.3.5.2 usb_host_audio_v1_0_config_template.h</title>
                           <description>File Name usb_host_cdc_config_template.h Description USB Host Audio v1.0 Class Configuration Definitions This file contains configurations macros needed to configure the Audio v1.0 host Driver. This ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-4273EAEC-C39B-4508-9468-09E5B46D6028.html</loc>
               <lastmod>2024-03-21T11:38:03</lastmod>
               <title>3.4 USB CDC Host Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB CDC Host Library. Using the LibraryThis topic describes the basic architecture of the USB CDC Host Client Driver Library and ...</description>
               <urls>
                  <url>
                     <loc>GUID-BC26A156-E4A5-43C9-8EA0-B265DE8A7E22.html</loc>
                     <lastmod>2024-03-01T11:17:00</lastmod>
                     <title>3.4.1 Introduction</title>
                     <description>The CDC Host Client Driver in the MPLAB Harmony USB Host Stack allows USB Host applications to support and interact with Communications Device Class (CDC) USB devices. The CDC Host Client Driver has ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-7ABB9990-2ED9-4BA2-B5E2-4E03BEF05846.html</loc>
                     <lastmod>2024-03-01T11:17:04</lastmod>
                     <title>3.4.2 Using the Library</title>
                     <description>Topics Name Description Abstraction ModelDescribes the Abstraction Model of the USB CDC Host Client Driver Library. Library OverviewThe USB CDC Host Client Driver API is grouped functionally, as ...</description>
                     <urls>
                        <url>
                           <loc>GUID-62E1104C-CCD8-4B9A-A67D-0C8071D7BC05.html</loc>
                           <lastmod>2024-03-06T06:57:10</lastmod>
                           <title>3.4.2.1 Abstraction Model</title>
                           <description>The CDC Host Client Driver interacts with the Host Layer to control the attached CDC device. The USB Host Layer attaches the CDC Host Client Driver to the CDC device when it meets the matching ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-19276168-DB61-421F-8575-256C8F4BA68C.html</loc>
                           <lastmod>2024-03-06T06:57:13</lastmod>
                           <title>3.4.2.2 Library Overview</title>
                           <description>The USB CDC Host Client Driver API is grouped functionally, as shown in the following table.Library Interface Section Description Client Access Functions These functions allow application clients to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C03B56B7-336E-4538-8147-A1E241A591A4.html</loc>
                           <lastmod>2024-03-06T06:57:16</lastmod>
                           <title>3.4.2.3 How the Library Works</title>
                           <description>The CDC Host Client Driver provides the user application with an easy-to-use interface to the attached CDC device. The USB Host Layer initializes the CDC Host Client Driver when a device is attached. ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-416C2C82-0B70-46C9-9293-B50C640EE88D.html</loc>
                                 <lastmod>2024-03-06T06:57:20</lastmod>
                                 <title>3.4.2.3.1 TPL Table Configuration for CDC Devices</title>
                                 <description>The Host Layer attaches the CDC Host Client Driver to a device when the device class, subclass, protocol in the device descriptor or when the class, subclass and protocol fields in the Interface ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-419F37C4-3466-47AA-A4B0-408E10E5C51F.html</loc>
                                 <lastmod>2024-03-06T06:57:28</lastmod>
                                 <title>3.4.2.3.2 Detecting Device Attach</title>
                                 <description>The application will need to know when a CDC Device is attached. To receive this attach event from the CDC Host Client Driver, the application must register an Attach Event Handler by calling the ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-C935CD70-63BA-458F-9409-A35704E4B2F3.html</loc>
                                 <lastmod>2024-03-06T06:57:31</lastmod>
                                 <title>3.4.2.3.3 Opening the CDC Host Client Driver</title>
                                 <description>The application must open the CDC Host Client Driver to communicate and control the attached device. The device can be opened by using the USB_HOST_CDC_Open function and specifying the ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-AF01E89F-8A8A-42AD-B389-6ECAA7E29574.html</loc>
                                 <lastmod>2024-03-06T06:57:35</lastmod>
                                 <title>3.4.2.3.4 Sending Class-specific Control Transfers</title>
                                 <description>The CDC Host Client Driver allows the application client to send CDC Class specific commands to the connected device. These commands allows the application client to:Set the device line coding ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-1E4070D4-5DB5-4A80-A4A6-272ABB817ECC.html</loc>
                                 <lastmod>2024-03-06T06:57:40</lastmod>
                                 <title>3.4.2.3.5 Reading and Writing Data</title>
                                 <description>The application can use the USB_HOST_CDC_Read and USB_HOST_CDC_Write functions to transfer data to the attached CDC device. While calling these function, the client handle specifies the target CDC ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-28C7C149-CA09-47D4-A453-CD032B36FF86.html</loc>
                                 <lastmod>2024-03-06T06:57:44</lastmod>
                                 <title>3.4.2.3.6 Event Handling</title>
                                 <description>The CDC Host Client Driver presents an event driven interface to the application. The CDC Host Client Driver requires the application client to set two event handlers for meaningful operation:The ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-EDC35314-A96F-40A1-A936-AA327718D753.html</loc>
                     <lastmod>2024-03-06T06:57:48</lastmod>
                     <title>3.4.3 Configuring the Library</title>
                     <description>The CDC Host Client Driver requires configuration constants to be specified in system_config.h file. These constants define the build time configuration (functionality and static resources) of the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-DFC44064-1B00-4759-BCC7-DCE43CA743E2.html</loc>
                           <lastmod>2024-03-20T13:14:28</lastmod>
                           <title>3.4.3.1 USB_HOST_CDC_ATTACH_LISTENERS_NUMBER Macro</title>
                           <description>C #define USB_HOST_CDC_ATTACH_LISTENERS_NUMBER Summary USB Host CDC Attach Listeners Number The USB CDC Host Client Driver provides attach notification to listeners who have registered with the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6E2FA391-8A0B-4448-A4BB-4F0EF11B88DE.html</loc>
                           <lastmod>2024-03-20T13:14:41</lastmod>
                           <title>3.4.3.2 USB_HOST_CDC_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_HOST_CDC_INSTANCES_NUMBER Summary USB Host CDC Maximum Number of Instances This macro defines the number of instances of the CDC host Driver. For example, if the application needs to ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C1E0B90A-BD18-436D-8E2F-C57386547691.html</loc>
                     <lastmod>2024-03-20T13:16:01</lastmod>
                     <title>3.4.4 Library Interface</title>
                     <description>Client Access Functions Name Description USB_HOST_CDC_OpenThis function opens the specified CDC device. USB_HOST_CDC_CloseThis function closes the CDC device. USB_HOST_CDC_AttachEventHandlerSetThis ...</description>
                     <urls>
                        <url>
                           <loc>GUID-34B79616-50CB-4904-9CE9-E2FC99AE81E4.html</loc>
                           <lastmod>2024-03-20T13:28:18</lastmod>
                           <title>3.4.4.1 USB_HOST_CDC_Open Function</title>
                           <description>C USB_HOST_CDC_HANDLE USB_HOST_CDC_Open( USB_HOST_CDC_OBJ cdcDeviceObj ); Summary This function will open the specified CDC device. Once opened, the CDC device can be accessed via the handle which ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-194E908A-45C7-4144-98AD-CBEE9AE3B027.html</loc>
                           <lastmod>2024-03-20T13:28:27</lastmod>
                           <title>3.4.4.2 USB_HOST_CDC_Close Function</title>
                           <description>C void USB_HOST_CDC_Close( USB_HOST_CDC_HANDLE cdcDeviceHandle ); Summary This function will close the open CDC device. This closes the association between the application entity that opened the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-56E3BC0F-8B5F-4973-92B4-DFCE54C797D2.html</loc>
                           <lastmod>2024-03-20T13:28:43</lastmod>
                           <title>3.4.4.3 USB_HOST_CDC_AttachEventHandlerSet Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_AttachEventHandlerSet( USB_HOST_CDC_ATTACH_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function will set an attach event handler. The attach event ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-49042A3A-5C6B-4019-9261-ED065E7CFB7A.html</loc>
                           <lastmod>2024-03-20T13:29:07</lastmod>
                           <title>3.4.4.4 USB_HOST_CDC_EventHandlerSet Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_EventHandlerSet( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_EVENT_HANDLER eventHandler, uintptr_t context ); Summary This function registers a client specific CDC ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D9E34AFD-7FB7-4969-AAE0-CFAF35DA4436.html</loc>
                           <lastmod>2024-03-20T13:29:24</lastmod>
                           <title>3.4.4.5 USB_HOST_CDC_DeviceObjHandleGet Function</title>
                           <description>C USB_HOST_DEVICE_OBJ_HANDLE USB_HOST_CDC_DeviceObjHandleGet( USB_HOST_CDC_OBJ cdcDeviceObj ); Summary This function returns the Device Object Handle for this CDC device. This returned Device Object ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AB86B65F-EC20-4492-892F-1F705349B142.html</loc>
                           <lastmod>2024-03-20T13:29:43</lastmod>
                           <title>3.4.4.6 USB_HOST_CDC_Read Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_Read( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_TRANSFER_HANDLE * transferHandle, void * data, size_t size ); Summary This function will read data from the attached ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EB11E71D-6099-4757-8F55-9B7036D2CA74.html</loc>
                           <lastmod>2024-03-20T13:29:58</lastmod>
                           <title>3.4.4.7 USB_HOST_CDC_Write Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_Write( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_TRANSFER_HANDLE * transferHandle, void * data, size_t size ); Summary This function will write data to the attached ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-697E56E2-2978-41B5-9776-E3B0F803CF31.html</loc>
                           <lastmod>2024-03-20T13:30:13</lastmod>
                           <title>3.4.4.8 USB_HOST_CDC_SerialStateNotificationGet Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_SerialStateNotificationGet( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_TRANSFER_HANDLE * transferHandle, USB_CDC_SERIAL_STATE * serialState ); Summary This function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C2CEEBFB-6411-470B-A17B-0860CBB9B914.html</loc>
                           <lastmod>2024-03-21T10:01:52</lastmod>
                           <title>3.4.4.9 USB_HOST_CDC_ACM_ControlLineStateSet Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_ACM_ControlLineStateSet( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_REQUEST_HANDLE * requestHandle, USB_CDC_CONTROL_LINE_STATE * controlLineState ); Summary This ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A80929F2-22A8-4822-BB1A-F17D3510554F.html</loc>
                           <lastmod>2024-03-21T10:01:58</lastmod>
                           <title>3.4.4.10 USB_HOST_CDC_ACM_LineCodingSet Function</title>
                           <description>C USB_HOST_CDC_RESULT USB_HOST_CDC_ACM_LineCodingSet( USB_HOST_CDC_HANDLE handle, USB_HOST_CDC_REQUEST_HANDLE * requestHandle, USB_CDC_LINE_CODING * lineCoding ); Summary This function sends a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-DAB49EA8-A5D8-4934-A9D7-457BE32C39F7.html</loc>
                           <lastmod>2024-03-20T13:30:41</lastmod>
                           <title>3.4.4.11 USB_HOST_CDC_EVENT_HANDLER Type</title>
                           <description>C typedef USB_HOST_CDC_EVENT_RESPONSE (* USB_HOST_CDC_EVENT_HANDLER)(USB_HOST_CDC_HANDLE cdcHandle, USB_HOST_CDC_EVENT event, void * eventData, uintptr_t context); Description USB Host CDC Client ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-54C8B1A5-77F4-4EE8-9765-9D4F4CDEA5F4.html</loc>
                           <lastmod>2024-03-20T13:30:54</lastmod>
                           <title>3.4.4.12 USB_HOST_CDC_EVENT_RESPONSE Enumeration</title>
                           <description>C typedef enum { USB_HOST_CDC_EVENT_RESPONE_NONE } USB_HOST_CDC_EVENT_RESPONSE; Summary USB Host CDC Event Handler Return Type This enumeration list the possible return values of the USB CDC Host ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-33D19237-9BD5-4287-BEC0-8EE789016A77.html</loc>
                           <lastmod>2024-03-20T13:31:01</lastmod>
                           <title>3.4.4.13 USB_HOST_CDC_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_CDC_TRANSFER_HANDLE_INVALID ((USB_HOST_CDC_TRANSFER_HANDLE)(-1)) Summary USB Host CDC Client Driver Invalid Transfer Handle Definition This definition defines a USB Host CDC Client ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9656A754-714C-4119-9374-24F4C5316E2D.html</loc>
                           <lastmod>2024-03-20T13:31:12</lastmod>
                           <title>3.4.4.14 USB_HOST_CDC_ATTACH_EVENT_HANDLER Type</title>
                           <description>C typedef void (* USB_HOST_CDC_ATTACH_EVENT_HANDLER)(USB_HOST_CDC_OBJ cdcObjHandle, uintptr_t context); Description USB Host CDC Client Driver Attach Event Handler Function Pointer Type. This data ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-18E5E28E-54DF-45DC-82DE-5A98F0C61B02.html</loc>
                           <lastmod>2024-03-20T13:37:35</lastmod>
                           <title>3.4.4.15 USB_HOST_CDC_EVENT_ACM_GET_LINE_CODING_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_REQUEST_HANDLE requestHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_ACM_GET_LINE_CODING_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3E781516-4FBD-4BA2-9EE5-5CF69FAB1F13.html</loc>
                           <lastmod>2024-03-20T13:37:30</lastmod>
                           <title>3.4.4.16 USB_HOST_CDC_EVENT_ACM_SEND_BREAK_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_REQUEST_HANDLE requestHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_ACM_GET_LINE_CODING_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C2D42F46-1870-46A5-BE84-DADDD7DDCBE1.html</loc>
                           <lastmod>2024-03-20T13:37:25</lastmod>
                           <title>3.4.4.17 USB_HOST_CDC_EVENT_ACM_SET_CONTROL_LINE_STATE_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_REQUEST_HANDLE requestHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_ACM_GET_LINE_CODING_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5F096B86-1C7E-41CC-89B3-E3CB6E9246C4.html</loc>
                           <lastmod>2024-03-20T13:37:20</lastmod>
                           <title>3.4.4.18 USB_HOST_CDC_EVENT_ACM_SET_LINE_CODING_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_REQUEST_HANDLE requestHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_ACM_GET_LINE_CODING_COMPLETE_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D952C424-7002-4420-8947-022D99F19386.html</loc>
                           <lastmod>2024-03-20T13:33:42</lastmod>
                           <title>3.4.4.19 USB_HOST_CDC_EVENT_READ_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_TRANSFER_HANDLE transferHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_SERIAL_STATE_NOTIFICATION_RECEIVED_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3985B16D-13BE-4E11-B1D4-4ECCE7A7F47B.html</loc>
                           <lastmod>2024-03-20T13:34:00</lastmod>
                           <title>3.4.4.20 USB_HOST_CDC_EVENT_SERIAL_STATE_NOTIFICATION_RECEIVED_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_TRANSFER_HANDLE transferHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_SERIAL_STATE_NOTIFICATION_RECEIVED_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7730A334-3C28-4989-B458-30CAD970B2F3.html</loc>
                           <lastmod>2024-03-20T13:34:13</lastmod>
                           <title>3.4.4.21 USB_HOST_CDC_EVENT_WRITE_COMPLETE_DATA Structure</title>
                           <description>C typedef struct { USB_HOST_CDC_TRANSFER_HANDLE transferHandle; USB_HOST_CDC_RESULT result; size_t length; } USB_HOST_CDC_EVENT_SERIAL_STATE_NOTIFICATION_RECEIVED_DATA, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2D59A202-4452-4C25-B137-9D47175F75C2.html</loc>
                           <lastmod>2024-03-20T13:34:20</lastmod>
                           <title>3.4.4.22 USB_HOST_CDC_OBJ Type</title>
                           <description>C typedef uintptr_t USB_HOST_CDC_OBJ; Summary USB Host CDC Object This type defines the type of the CDC Host Client Object. This type is returned by the Attach Event Handler and is used by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2FD0C62D-60DF-4CB3-B199-A3448054247C.html</loc>
                           <lastmod>2024-03-20T13:34:28</lastmod>
                           <title>3.4.4.23 USB_HOST_CDC_REQUEST_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_CDC_REQUEST_HANDLE; Summary USB Host CDC Client Driver Request Handle This is returned by the CDC Client driver command routines and should be used by the application to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-59E8DFA0-C4AF-4A63-80E1-38A232A07FC6.html</loc>
                           <lastmod>2024-03-20T13:34:37</lastmod>
                           <title>3.4.4.24 USB_HOST_CDC_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_CDC_HANDLE_INVALID ((USB_HOST_CDC_HANDLE)(-1)) Summary USB Host CDC Client Driver Invalid Handle This type defines an Invalid CDC Client Driver Handle. The USB_HOST_CDC_Open() ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3317F07C-A6CE-472E-94B8-903AA9CE2F54.html</loc>
                           <lastmod>2024-03-20T13:34:44</lastmod>
                           <title>3.4.4.25 USB_HOST_CDC_INTERFACE Macro</title>
                           <description>C #define USB_HOST_CDC_INTERFACE Summary USB HOST CDC Client Driver Interface This macro should be used by the application in TPL table while adding support for the USB CDC Host Client ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-82E70CE5-83DE-483B-A9CB-D279747455DF.html</loc>
                           <lastmod>2024-03-20T13:34:52</lastmod>
                           <title>3.4.4.26 USB_HOST_CDC_REQUEST_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_CDC_REQUEST_HANDLE_INVALID ((USB_HOST_CDC_REQUEST_HANDLE)(-1)) Summary USB Host CDC Client Driver Invalid Request Handle This is returned by the CDC Client driver command routines ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7BF19F47-7FD5-4C68-B995-F927BF4537CB.html</loc>
                           <lastmod>2024-03-20T13:35:00</lastmod>
                           <title>3.4.4.27 USB_HOST_CDC_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_CDC_TRANSFER_HANDLE; Summary USB Host CDC Client Driver Transfer Handle This is returned by the CDC Client driver data transfer routines and should be used by the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-EB4E3D88-01D0-4CFF-ACCF-3BB06F2870DA.html</loc>
                           <lastmod>2024-03-20T13:35:08</lastmod>
                           <title>3.4.4.28 USB_HOST_CDC_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_CDC_HANDLE; Summary USB Host CDC Client Driver Handle This type defines the type of the handle returned by USB_HOST_CDC_Open() function. This application uses this handle ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-3260CF66-17A1-432E-83F0-2BDE301A9484.html</loc>
                           <lastmod>2024-03-20T13:35:24</lastmod>
                           <title>3.4.4.29 USB_HOST_CDC_RESULT Enumeration</title>
                           <description>C typedef enum { USB_HOST_CDC_RESULT_FAILURE, USB_HOST_CDC_RESULT_BUSY, USB_HOST_CDC_RESULT_REQUEST_STALLED, USB_HOST_CDC_RESULT_INVALID_PARAMETER, USB_HOST_CDC_RESULT_DEVICE_UNKNOWN, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-0DC63F66-990D-4E91-8B0D-FCC13807F190.html</loc>
                           <lastmod>2024-03-20T13:36:04</lastmod>
                           <title>3.4.4.30 USB_HOST_CDC_EVENT Enumeration</title>
                           <description>C typedef enum { USB_HOST_CDC_EVENT_READ_COMPLETE, USB_HOST_CDC_EVENT_WRITE_COMPLETE, USB_HOST_CDC_EVENT_ACM_SEND_BREAK_COMPLETE, USB_HOST_CDC_EVENT_ACM_SET_CONTROL_LINE_STATE_COMPLETE, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-45D20AEA-112B-49EB-B6F1-A1D04C0C7817.html</loc>
                     <lastmod>2024-03-07T08:15:34</lastmod>
                     <title>3.4.5 Files</title>
                     <description>Files Name Description usb_host_cdc_config_template.h USB host CDC Class configuration definitions template usb_host_cdc.hUSB CDC ...</description>
                     <urls>
                        <url>
                           <loc>GUID-2A5E0038-82CC-4E3F-BAB2-A6DB729D1111.html</loc>
                           <lastmod>2024-03-06T07:00:59</lastmod>
                           <title>3.4.5.1 usb_host_cdc_config_template.h</title>
                           <description>File Name usb_host_cdc_config_template.h Description USB Host CDC Class Configuration Definitions This file contains configurations macros needed to configure the CDC host Driver. This file is a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B349D55B-10DA-4037-ADFF-9341BC146092.html</loc>
                           <lastmod>2024-03-20T13:38:50</lastmod>
                           <title>3.4.5.2 usb_host_cdc.h</title>
                           <description>File Name usb_host_cdc.h Description USB Host CDC Client Driver Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make up the ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-C98FB301-D986-4257-B909-A7B2556FFDB6.html</loc>
               <lastmod>2024-03-06T06:26:30</lastmod>
               <title>3.5 USB HID Host Mouse Driver Library</title>
               <description>Topics Name Description Introduction Introduces the MPLAB Harmony USB HID Host Mouse Driver Library. Using the LibraryThis topic describes the basic architecture of the USB HID Host Mouse Driver ...</description>
               <urls>
                  <url>
                     <loc>GUID-0987D483-1C24-4723-9AC0-296FFAEA2E58.html</loc>
                     <lastmod>2024-03-01T06:38:26</lastmod>
                     <title>3.5.1 Introduction</title>
                     <description>The HID Host Mouse Driver in the MPLAB Harmony USB Host Stack allows USB Host Applications to support and interact with USB Mouse devices. The USB HID Host Mouse Driver has the following ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-CD663CB3-A1B2-4515-8BCD-72BF2C919315.html</loc>
                     <lastmod>2024-03-08T06:13:23</lastmod>
                     <title>3.5.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB HID Host Mouse Driver Library and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-89B476D9-C046-4ABB-98EA-51B7A6771C88.html</loc>
                           <lastmod>2024-03-01T06:38:19</lastmod>
                           <title>3.5.2.1 Abstraction Model</title>
                           <description>The USB HID Host Mouse Driver interacts with the USB Host HID Client Driver to control the attached HID device. The USB Host Layer attaches the USB HID Host Client Driver to the HID device when it ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-AC04515C-ADD5-4792-9D4D-6678F7CB7097.html</loc>
                           <lastmod>2024-03-01T06:38:15</lastmod>
                           <title>3.5.2.2 Library Overview</title>
                           <description>The USB HID Host Mouse Driver can be grouped functionally as shown in the following table.Library Interface Section Description Mouse Access Functions These functions allow application to register ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-7AD186D1-A7F0-4CB4-91B3-84BB678A9004.html</loc>
                           <lastmod>2024-03-01T06:38:12</lastmod>
                           <title>3.5.2.3 How the Library Works</title>
                           <description>The USB HID Host Mouse Driver provides the user application with an easy to use interface to the attached HID device. The USB Host Layer initializes the USB HID Host Client Driver when a device is ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-2D4CB3D2-7FCB-4546-B5DE-0E4C5027D4E7.html</loc>
                                 <lastmod>2024-03-06T06:44:25</lastmod>
                                 <title>3.5.2.3.1 HID Device TPL Table Configuration</title>
                                 <description>The Host Layer attaches the USB HID Host Client Driver to a device when the device class, subclass, protocol in the device descriptor or when the class, subclass and protocol fields in the Interface ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-84E99062-80D4-4D28-BCAD-D36DA1A34932.html</loc>
                                 <lastmod>2024-03-06T06:44:22</lastmod>
                                 <title>3.5.2.3.2 Detecting Device Attach</title>
                                 <description>The application will need to know when a HID mouse device is attached. To receive this attach event from the USB HID Host Mouse Driver, the application must register an Attach Event Handler by ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-654F3DBA-E194-4F0A-9733-553A6BD96E15.html</loc>
                                 <lastmod>2024-03-06T06:44:18</lastmod>
                                 <title>3.5.2.3.3 Mouse Data Event Handling</title>
                                 <description>No extra event handler is required to be registered to receive mouse data. A call to function USB_HOST_HID_MOUSE_EventHandlerSet once is adequate to receive mouse data as well. The mouse button state ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-EECD368B-5E15-4AC0-B6AE-76F8B1C253A1.html</loc>
                     <lastmod>2024-03-20T14:37:42</lastmod>
                     <title>3.5.3 Configuring the Library</title>
                     <description>The USB HID Host Mouse Driver requires configuration constants to be specified in the system_config.h file. These constants define the build time configuration (functionality and static resources) of ...</description>
                     <urls>
                        <url>
                           <loc>GUID-EE4AA570-CD18-418E-B897-B13545E31252.html</loc>
                           <lastmod>2024-03-20T14:38:04</lastmod>
                           <title>3.5.3.1 USB_HID_GLOBAL_PUSH_POP_STACK_SIZE Macro</title>
                           <description>C #define USB_HID_GLOBAL_PUSH_POP_STACK_SIZE Summary USB Host HID Global PUSH POP stack size supported This macro defines the size of the Global PUSH POP stack per HID driver instance. If the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-96901CE9-EFBC-4703-84E6-A83059B29C27.html</loc>
                           <lastmod>2024-03-20T14:38:12</lastmod>
                           <title>3.5.3.2 USB_HOST_HID_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_HOST_HID_INSTANCES_NUMBER Summary USB host HID Maximum Number of instances This macro defines the number of instances of the HID host Driver. For example, if the application needs to ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-6B41AB7A-136E-4AD3-85FA-A47C8D002924.html</loc>
                           <lastmod>2024-03-20T14:38:20</lastmod>
                           <title>3.5.3.3 USB_HOST_HID_INTERRUPT_IN_ENDPOINTS_NUMBER Macro</title>
                           <description>C #define USB_HOST_HID_INTERRUPT_IN_ENDPOINTS_NUMBER Summary USB Host HID Maximum Number of INTERRUPT IN endpoints supported This macro defines the number of INTERRUPT IN endpoints supported by USB ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A9951C45-B7BB-4DEF-9E96-84CBCF5BF902.html</loc>
                           <lastmod>2024-03-20T14:38:29</lastmod>
                           <title>3.5.3.4 USB_HOST_HID_MOUSE_BUTTONS_NUMBER Macro</title>
                           <description>C #define USB_HOST_HID_MOUSE_BUTTONS_NUMBER Summary USB Host HID number of Mouse buttons supported This macro defines the number of Mouse buttons supported. If the application wants to support HID ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-06A5C70B-24B9-4A9B-BAD3-DF7921CD3F56.html</loc>
                           <lastmod>2024-03-20T14:38:38</lastmod>
                           <title>3.5.3.5 USB_HOST_HID_USAGE_DRIVER_SUPPORT_NUMBER Macro</title>
                           <description>C #define USB_HOST_HID_USAGE_DRIVER_SUPPORT_NUMBER Summary USB Host HID number of Usage driver registered This macro defines the number of Usage driver registered with USB Host Hid driver. If the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2702F80D-7854-4C8F-98A5-15717C1B4E37.html</loc>
                           <lastmod>2024-03-20T14:39:21</lastmod>
                           <title>3.5.3.6 Configuration on MCC</title>
                           <description>Number of INTERRUPT IN endpoints per Interface Symbol name: CONFIG_USB_HOST_HID_INTERRUPT_IN_ENDPOINTS_NUMBER This symbol is used to Configure the maximum number of Interrupt endpoints that a ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-D4E7FF41-129A-41E2-89F3-509A562CA402.html</loc>
                     <lastmod>2024-03-06T06:44:14</lastmod>
                     <title>3.5.4 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB HID Host Mouse Driver Library. The USB Mouse driver does not require explicit API call by the application to ...</description>
                     <urls>
                        <url>
                           <loc>GUID-AC0FAF4C-9904-43A7-BE2D-2FF7B5BE3C80.html</loc>
                           <lastmod>2024-03-20T14:42:23</lastmod>
                           <title>3.5.4.1 USB_HOST_HID_MOUSE_EventHandlerSet Function</title>
                           <description>C USB_HOST_HID_MOUSE_RESULT USB_HOST_HID_MOUSE_EventHandlerSet( USB_HOST_HID_MOUSE_EVENT_HANDLER appMouseEventHandler ); Summary This function registers application callback function with the mouse ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-101BA8E7-5721-4ED0-830C-48743A0031B5.html</loc>
                           <lastmod>2024-03-20T14:42:33</lastmod>
                           <title>3.5.4.2 F_USB_HOST_HID_MOUSE_EventHandler Function</title>
                           <description>C void _USB_HOST_HID_MOUSE_EventHandler( USB_HOST_HID_OBJ_HANDLE handle, USB_HOST_HID_EVENT event, void * eventData ); Summary This is function ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5F6089D2-49D6-4BFD-9EC7-0F99D21C54FF.html</loc>
                           <lastmod>2024-03-20T14:42:41</lastmod>
                           <title>3.5.4.3 F_USB_HOST_HID_MOUSE_Task Function</title>
                           <description>C void F_USB_HOST_HID_MOUSE_Task( USB_HOST_HID_OBJ_HANDLE handle ); Summary This is function </description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-46F7BF5D-4ACA-4232-A1B2-C38B27E742D0.html</loc>
                           <lastmod>2024-03-20T14:42:58</lastmod>
                           <title>3.5.4.4 USB_HOST_HID_MOUSE_DATA Structure</title>
                           <description>C typedef struct { USB_HID_BUTTON_STATE buttonState[USB_HOST_HID_MOUSE_BUTTONS_NUMBER]; USB_HID_BUTTON_ID buttonID[USB_HOST_HID_MOUSE_BUTTONS_NUMBER]; int16_t xMovement; int16_t yMovement; int16_t ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-4775A587-BEBD-473F-AD06-1302B46F964D.html</loc>
                           <lastmod>2024-03-20T14:43:16</lastmod>
                           <title>3.5.4.5 USB_HOST_HID_MOUSE_EVENT Enumeration</title>
                           <description>C typedef enum { USB_HOST_HID_MOUSE_EVENT_ATTACH = 0, USB_HOST_HID_MOUSE_EVENT_DETACH, USB_HOST_HID_MOUSE_EVENT_REPORT_RECEIVED } USB_HOST_HID_MOUSE_EVENT; Summary USB HOST HID Mouse Driver Events ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-499F7B02-974B-4FD0-9412-41412AC5E588.html</loc>
                           <lastmod>2024-03-20T14:43:24</lastmod>
                           <title>3.5.4.6 USB_HOST_HID_MOUSE_EVENT_HANDLER Type</title>
                           <description>C typedef void (* USB_HOST_HID_MOUSE_EVENT_HANDLER)(USB_HOST_HID_MOUSE_HANDLE handle, USB_HOST_HID_MOUSE_EVENT event, void *pData); Summary USB HOST Mouse Driver Event Handler Function Pointer Type. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F409D824-7B6A-4926-8482-5FC664EFF610.html</loc>
                           <lastmod>2024-03-20T14:43:32</lastmod>
                           <title>3.5.4.7 USB_HOST_HID_MOUSE_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_HID_MOUSE_HANDLE; Summary USB HOST HID Mouse Driver Instance Handle This defines a USB Host HID mouse driver handle. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1ECBDAEA-AA1F-413B-BD5A-C1F898BAF2DE.html</loc>
                           <lastmod>2024-03-20T14:43:49</lastmod>
                           <title>3.5.4.8 USB_HOST_HID_MOUSE_RESULT Enumeration</title>
                           <description>C typedef enum { USB_HOST_HID_MOUSE_RESULT_FAILURE = USB_HOST_HID_MOUSE_RESULT_MIN, USB_HOST_HID_MOUSE_RESULT_INVALID_PARAMETER, USB_HOST_HID_MOUSE_RESULT_SUCCESS = 0 } USB_HOST_HID_MOUSE_RESULT; ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-46430CBE-8F34-4327-B38B-23EF4E9F64CD.html</loc>
                           <lastmod>2024-03-20T14:43:58</lastmod>
                           <title>3.5.4.9 USB_HOST_HID_MOUSE_RESULT_MIN Macro</title>
                           <description>C #define USB_HOST_HID_MOUSE_RESULT_MIN -50 Summary USB Host HID Mouse Driver Result Minimum Constant This constant identifies the minimum value of the USB Host HID mouse driver and is used in the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-91490B7F-BF2F-4A1F-B56F-DA628328FE45.html</loc>
                           <lastmod>2024-03-20T14:44:06</lastmod>
                           <title>3.5.4.10 USB_HOST_HID_MOUSE_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_HID_MOUSE_HANDLE_INVALID ((USB_HOST_HID_MOUSE_HANDLE)(-1)) Summary This is macro USB_HOST_HID_MOUSE_HANDLE_INVALID. Remarks ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-5648DA02-2AD1-4BF1-A2FE-378DE84CD548.html</loc>
                     <lastmod>2024-03-01T06:37:51</lastmod>
                     <title>3.5.5 Files</title>
                     <description>This section lists the source and header files used by the library. Files Name Description usb_host_hid_mouse.hUSB Host HID Mouse Driver Definition Header usb_host_hid_config_template.hUSB host HID ...</description>
                     <urls>
                        <url>
                           <loc>GUID-291C6A37-2944-4204-8034-E59C458C9C3B.html</loc>
                           <lastmod>2024-02-22T13:14:50</lastmod>
                           <title>3.5.5.1 </title>
                           <description>File Name usb_host_hid_mouse.h Description USB HOST HID Mouse Driver Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-09648CD7-5A5F-49E6-921F-244BC580F181.html</loc>
                           <lastmod>2024-03-20T14:44:44</lastmod>
                           <title>3.5.5.2 </title>
                           <description>File Name usb_host_hid_config_template.h Description USB Host HID Class Configuration Definitions This file contains configurations macros needed to configure the HID host Driver. This file is a ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-8C5FD093-2A41-4EE3-892E-DE06BA72FBE6.html</loc>
                           <lastmod>2024-02-22T13:14:44</lastmod>
                           <title>3.5.5.3 </title>
                           <description>File Name usb_hid.h Description USB HID Function Driver This file contains USB HID specification definitions and included by the USB Stack. The application can include this file if it needs to access ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-FB9881D7-8223-4A2D-8C6F-7A397E56857B.html</loc>
               <lastmod>2024-03-06T06:38:37</lastmod>
               <title>3.6 USB Hub Host Client Driver Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB Hub Host Client Driver Library. Using the LibraryThis topic describes the basic architecture of the USB Hub Host Client Driver ...</description>
               <urls>
                  <url>
                     <loc>GUID-93CDD356-A085-46BE-BA78-ECE53B4675B1.html</loc>
                     <lastmod>2024-03-01T05:54:07</lastmod>
                     <title>3.6.1 Introduction</title>
                     <description>The USB Hub Host Client Driver in the MPLAB Harmony USB Host Stack allows USB Host Applications to interact with a USB Hub and thus manage multiple USB devices simultaneously in one application. The ...</description>
                     <urls>
                        <url>
                           <loc>GUID-32E6E464-2DD2-4681-84EB-E483542E9991.html</loc>
                           <lastmod>2024-03-01T05:54:04</lastmod>
                           <title>3.6.1.1 Using the Library</title>
                           <description>This topic describes the basic architecture of the USB Hub Host Client Driver Library and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-752B1F30-C776-4992-AC8E-AD2F872A906A.html</loc>
                                 <lastmod>2024-03-06T06:38:40</lastmod>
                                 <title>3.6.1.1.1 Abstraction Model</title>
                                 <description>The USB Hub Host Client Driver abstracts the complexities of Hub operation and presents a simple interface to the Host Layer. The interface allows the Host Layer to perform port operations such as ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-2DB3EA37-984E-4DE8-BE86-C7E52F1D10F8.html</loc>
                                 <lastmod>2024-03-06T06:38:45</lastmod>
                                 <title>3.6.1.1.2 Library Overview</title>
                                 <description>The USB Hub Host Client Driver does not contain any application callable </description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-01EBA2F8-059B-466E-83F8-5B4A2E9BC5F2.html</loc>
                                 <lastmod>2024-03-06T06:38:24</lastmod>
                                 <title>3.6.1.1.3 How the Library Works</title>
                                 <description>The USB Hub Host Client Driver does not contain any application callable functions. The only step that the application code must implement is to enable USB Host Layer Hub support and to provision the ...</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-F20B2D9B-F84A-4EC9-A835-9DB02DED9BD4.html</loc>
                                       <lastmod>2024-03-06T06:38:29</lastmod>
                                       <title>3.6.1.1.3.1 Hub TPL Table Configuration</title>
                                       <description>The Host Layer attaches the USB Hub Host Client Driver to a Hub device only if the TPL table contains an entry to enable this feature. The driver interface for such a TPL entry should point to ...</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-5B73D3C4-A2C2-4573-8C1F-6377232C6D62.html</loc>
                                 <lastmod>2024-03-06T06:38:32</lastmod>
                                 <title>3.6.1.1.4 USB Hub Host Client Driver Test Results</title>
                                 <description>The following table lists the commercially available USB hubs, which have been tested to successfully enumerate and operate with the USB Hub Host Client Driver in the MPLAB Harmony USB Host Stack. ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-7E3C17FC-D59F-49A6-8AF8-BA2E1A08C6D3.html</loc>
                     <lastmod>2024-03-07T08:34:19</lastmod>
                     <title>3.6.2 Configuring the Library</title>
                     <description>The USB Hub Host Client Driver requires configuration constants to be specified in system_config.h file. These constants define the build time configuration (functionality and static resources) of ...</description>
                     <urls>
                        <url>
                           <loc>GUID-5027A3CD-70F5-4B8E-BAE6-A7D4B8B029C5.html</loc>
                           <lastmod>2024-03-20T14:46:07</lastmod>
                           <title>3.6.2.1 USB_HOST_HUB_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_HOST_HUB_INSTANCES_NUMBER Summary USB Host Hub Instances Number This configuration constant defines the total number of hubs to be supported in the application. This includes hubs ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-575546F0-289D-4E7D-B26F-27CD545DA41F.html</loc>
                           <lastmod>2024-03-20T14:46:15</lastmod>
                           <title>3.6.2.2 USB_HOST_HUB_PORTS_NUMBER Macro</title>
                           <description>C #define USB_HOST_HUB_PORTS_NUMBER Summary USB Host Hub Number of Ports per Hub This configuration macros specifies the number of Ports per Hub. If any Hub connected to host will a have a maximum of ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-137EECC0-EC3C-4D8E-BB6D-356995450D15.html</loc>
                     <lastmod>2024-03-01T05:53:37</lastmod>
                     <title>3.6.3 Library Interface</title>
                     <description>This section describes the Application Programming Interface (API) functions of the USB Hub Host Client Driver Library. Refer to each section for a detailed description. Data Types and Constants Name ...</description>
                     <urls>
                        <url>
                           <loc>GUID-FAA35947-91AC-4AD7-839A-AB6BA8E6ECF6.html</loc>
                           <lastmod>2024-03-20T14:46:41</lastmod>
                           <title>3.6.3.1 USB_HOST_HUB_INTERFACE Macro</title>
                           <description>C #define USB_HOST_HUB_INTERFACE Summary USB Hub Host Client Driver Interface Pointer This constant is a pointer to a table of function pointers that define the interface between the Hub Host Client ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-BFF526D0-97FB-4AB1-B4AA-3218F5885FD9.html</loc>
                     <lastmod>2024-03-07T08:29:06</lastmod>
                     <title>3.6.4 Files</title>
                     <description>This section lists the source and header files used by the library. Name Description usb_host_hub.hUSB Host Hub Client Driver Interface Header usb_host_hub_config_template.h USB Host Hub ...</description>
                     <urls>
                        <url>
                           <loc>GUID-6A7B2426-52F2-43C0-988D-CF33C97ECD99.html</loc>
                           <lastmod>2024-03-01T05:53:28</lastmod>
                           <title>3.6.4.1 usb_host_hub.h</title>
                           <description>File Name usb_host_hub.h Description USB Host Hub Client Driver Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make up the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C33B06EE-F935-49DD-B4B0-6A4B47D8A1FA.html</loc>
                           <lastmod>2024-03-07T08:25:57</lastmod>
                           <title>3.6.4.2 usb_host_hub_config_template.h</title>
                           <description>File Name usb_host_hub_config_template.h Description USB Host Hub Configuration Definitions This file contains configurations macros needed to configure the Hub Driver. This file is a template file ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
            <url>
               <loc>GUID-D23DCE95-02B3-4C4D-B9F8-D2B170199D3A.html</loc>
               <lastmod>2024-03-20T14:50:21</lastmod>
               <title>3.7 USB MSD Host Client Driver Library</title>
               <description>Topics Name Description IntroductionIntroduces the MPLAB Harmony USB Mass Storage Device (MSD) Host Client Driver Library. Using the Library This topic describes the basic architecture of the USB MSD ...</description>
               <urls>
                  <url>
                     <loc>GUID-9C7EC79F-05F4-46A1-9FBA-7FF1356A6952.html</loc>
                     <lastmod>2024-03-21T07:42:13</lastmod>
                     <title>3.7.1 Introduction</title>
                     <description>The USB MSD Host Client Driver in the MPLAB Harmony USB Host Stack allows USB Host Applications to support and interact with Mass Storage Class (MSC) USB devices. Examples of such devices are USB Pen ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-11CD8ACC-F0C7-47B2-937F-7806019E8217.html</loc>
                     <lastmod>2024-03-06T06:35:47</lastmod>
                     <title>3.7.2 Using the Library</title>
                     <description>This topic describes the basic architecture of the USB MSD Host Client Drier Library and provides information and examples on its use. Topics Name Description Abstraction ModelDescribes the ...</description>
                     <urls>
                        <url>
                           <loc>GUID-AA4631A2-523E-4AAC-A5E2-CF2737691990.html</loc>
                           <lastmod>2024-03-06T06:35:44</lastmod>
                           <title>3.7.2.1 Abstraction Model</title>
                           <description>The USB MSD Host Client Driver provides the transport for SCSI commands that implements that media read, write and control operations. If abstracts the details of initiating and completing a BOT ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BBECCCE8-129C-4AC4-B56E-92CBB7A40D66.html</loc>
                           <lastmod>2024-03-06T06:35:41</lastmod>
                           <title>3.7.2.2 Library Overview</title>
                           <description>The USB MSD Host Client Driver can be grouped functionally as shown in the following table.Library Interface Section Descriptions Data Transfer Functions These functions allow the application client ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-5A23DF9A-061A-4066-955F-9284517A11CE.html</loc>
                           <lastmod>2024-03-06T06:35:38</lastmod>
                           <title>3.7.2.3 How the Library Works</title>
                           <description>The USB MSD Host Client Driver provides the top level block storage driver with an easy to use, event driven, interface to transport the block storage command and data between the block storage ...</description>
                           <urls>
                              <url>
                                 <loc>GUID-290642E5-8BB2-4907-BE2F-96DC0C07A092.html</loc>
                                 <lastmod>2024-03-06T06:35:34</lastmod>
                                 <title>3.7.2.3.1 MSD TPL Table Configuration</title>
                                 <description>The Host Layer attaches the MSD Host Client Driver to a device when the class, subclass and protocol fields in the Interface Association Descriptor (IAD) or Interface descriptor match the entry in ...</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-47FB34BA-8E25-4DAE-BEF3-3F3CA837FD63.html</loc>
                                 <lastmod>2024-03-06T06:35:29</lastmod>
                                 <title>3.7.2.3.2 Data Transfer</title>
                                 <description>The USB MSD Host Client Driver data transfer function is typically called by the SCSI Block Storage Driver Library. The USB_HOST_MSD_Transfer function allows the SCSI Block Storage Driver to ...</description>
                                 <urls/>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-EFE3B940-7214-4116-A394-AE70400A009B.html</loc>
                     <lastmod>2024-03-06T06:26:44</lastmod>
                     <title>3.7.3 Configuring the Library</title>
                     <description>The USB MSD Host Client Driver requires configuration constants to be specified in system_config.h file. These constants define the build time configuration (functionality and static resources) of ...</description>
                     <urls>
                        <url>
                           <loc>GUID-9BBA48B9-9273-464C-BB66-54D556DCD991.html</loc>
                           <lastmod>2024-03-21T07:46:12</lastmod>
                           <title>3.7.3.1 USB_HOST_MSD_INSTANCES_NUMBER Macro</title>
                           <description>C #define USB_HOST_MSD_INSTANCES_NUMBER Summary USB Host MSD Client Driver Instances Number. This constant defines the maximum number of MSD devices to be supported by this host application. For ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-9F90B6C9-DA53-4215-AAA6-63E953307AE4.html</loc>
                           <lastmod>2024-03-21T07:46:35</lastmod>
                           <title>3.7.3.2 USB_HOST_MSD_LUNS_NUMBER Macro</title>
                           <description>C #define USB_HOST_MSD_LUNS_NUMBER Summary USB Host MSD Client Driver LUNs Number. An MSD device may have multiple storage units, each addressable through a LUN number. An example is a USB Card ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-C91691E4-6974-409A-ADFB-991513D1643F.html</loc>
                     <lastmod>2024-03-21T07:47:02</lastmod>
                     <title>3.7.4 Library Interface</title>
                     <description>Data Transfer Functions Name Description USB_HOST_MSD_TransferThis function schedules a MSD BOT transfer. USB_HOST_MSD_TransferErrorTasksThis function maintains the MSD transfer error handling state ...</description>
                     <urls>
                        <url>
                           <loc>GUID-17993B83-CD2E-4C03-A8B9-F42FFFC12C0B.html</loc>
                           <lastmod>2024-03-21T07:48:44</lastmod>
                           <title>3.7.4.1 USB_HOST_MSD_Transfer Function</title>
                           <description>C USB_HOST_MSD_RESULT USB_HOST_MSD_Transfer( USB_HOST_MSD_LUN_HANDLE lunHandle, uint8_t * cdb, uint8_t cdbLength, void * data, size_t size, USB_HOST_MSD_TRANSFER_DIRECTION transferDirection, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-2B3FC623-8EB6-4A80-B474-D279C70D2895.html</loc>
                           <lastmod>2024-03-21T07:48:58</lastmod>
                           <title>3.7.4.2 USB_HOST_MSD_TransferErrorTasks Function</title>
                           <description>C void USB_HOST_MSD_TransferErrorTasks( USB_HOST_MSD_LUN_HANDLE lunHandle ); Summary This function maintains the MSD transfer error handling state machine. This function should be called periodically ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1E4A98DA-C5EE-4CF4-98D7-96AA358B132C.html</loc>
                           <lastmod>2024-03-21T07:49:30</lastmod>
                           <title>3.7.4.3 USB_HOST_MSD_RESULT Enumeration</title>
                           <description>C typedef enum { USB_HOST_MSD_RESULT_COMMAND_PASSED = 0, USB_HOST_MSD_RESULT_COMMAND_FAILED = 1, USB_HOST_MSD_RESULT_COMMAND_PHASE_ERROR = 2, USB_HOST_MSD_RESULT_SUCCESS, USB_HOST_MSD_RESULT_FAILURE, ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-C3F00938-24CC-44F5-95AD-65B83FF8D194.html</loc>
                           <lastmod>2024-03-21T07:49:41</lastmod>
                           <title>3.7.4.4 USB_HOST_MSD_TRANSFER_CALLBACK Type</title>
                           <description>C typedef void (* USB_HOST_MSD_TRANSFER_CALLBACK)(USB_HOST_MSD_LUN_HANDLE lunHandle, USB_HOST_MSD_TRANSFER_HANDLE transferHandle, USB_HOST_MSD_RESULT result, size_t size, uintptr_t context); ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-BE8113DE-BE59-474B-B616-FF7847ED173F.html</loc>
                           <lastmod>2024-03-21T07:49:59</lastmod>
                           <title>3.7.4.5 USB_HOST_MSD_TRANSFER_DIRECTION Enumeration</title>
                           <description>C typedef enum { USB_HOST_MSD_TRANSFER_DIRECTION_HOST_TO_DEVICE = 0x00, USB_HOST_MSD_TRANSFER_DIRECTION_DEVICE_TO_HOST = 0x80 } USB_HOST_MSD_TRANSFER_DIRECTION; Summary USB HOST Transfer Direction ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-F1E48A4D-599B-4C48-BE70-B281547574CC.html</loc>
                           <lastmod>2024-03-21T07:50:07</lastmod>
                           <title>3.7.4.6 USB_HOST_MSD_TRANSFER_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_MSD_TRANSFER_HANDLE; Summary USB HOST MSD Transfer Handle This type defines a USB Host MSD Transfer Handle. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E49A60F0-79C9-4A3C-9B20-C13AFA55D922.html</loc>
                           <lastmod>2024-03-21T07:50:16</lastmod>
                           <title>3.7.4.7 USB_HOST_MSD_INTERFACE Macro</title>
                           <description>C #define USB_HOST_MSD_INTERFACE Summary USB HOST MSD Client Driver Interface This macro should be used by the application in TPL table while adding support for the USB MSD Host Client Driver. ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E9501F92-C4E2-45F1-8408-8A08EA71444A.html</loc>
                           <lastmod>2024-03-21T07:50:30</lastmod>
                           <title>3.7.4.8 USB_HOST_MSD_TRANSFER_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_MSD_TRANSFER_HANDLE_INVALID Summary USB HOST MSD Transfer Handle Invalid This value defines an invalid Transfer Handle. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-32268D65-A838-4381-90B9-DCBF55C5C393.html</loc>
                           <lastmod>2024-03-21T07:50:37</lastmod>
                           <title>3.7.4.9 USB_HOST_MSD_LUN_HANDLE Type</title>
                           <description>C typedef uintptr_t USB_HOST_MSD_LUN_HANDLE; Summary USB HOST MSD LUN Handle This type defines a MSD LUN Handle. This handle is used by SCSI driver to identify the LUN. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-B03BDDFA-CBFF-4E3D-BE68-1A650750DB1D.html</loc>
                           <lastmod>2024-03-21T07:50:48</lastmod>
                           <title>3.7.4.10 USB_HOST_MSD_LUN_HANDLE_INVALID Macro</title>
                           <description>C #define USB_HOST_MSD_LUN_HANDLE_INVALID Summary USB HOST MSD LUN Handle Invalid This value defines an invalid LUN Handle. Remarks ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-D25638A3-7561-41E9-909B-834D853D4A71.html</loc>
                           <lastmod>2024-03-21T07:53:33</lastmod>
                           <title>3.7.4.11 USB_HOST_MSD_ERROR_CODE Enumeration</title>
                           <description>C typedef enum { USB_HOST_MSD_ERROR_CODE_INSUFFICIENT_INSTANCES = 1, USB_HOST_MSD_ERROR_CODE_NOT_FOUND_BULK_IN_ENDPOINT, USB_HOST_MSD_ERROR_CODE_NOT_FOUND_BULK_OUT_ENDPOINT, ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-A76BF117-47EF-4DEB-8C27-4BB65E455252.html</loc>
                     <lastmod>2024-03-22T04:06:59</lastmod>
                     <title>3.7.5 Files</title>
                     <description>Name Description usb_host_msd.h USB Host MSD Class Driver Interface Header usb_msd.hUSB MSD class </description>
                     <urls>
                        <url>
                           <loc>GUID-B4C11D4C-28DB-41D9-8428-FED90362C0F2.html</loc>
                           <lastmod>2024-03-21T07:54:18</lastmod>
                           <title>3.7.5.1 usb_host_msd.h</title>
                           <description>File Name usb_host_msd.h Description USB Host MSD Class Driver Interface Definition This header file contains the function prototypes and definitions of the data types and constants that make up the ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-E6EBC9DC-B505-4EBE-8F9A-D47F37514990.html</loc>
                           <lastmod>2024-03-21T07:54:36</lastmod>
                           <title>3.7.5.2 usb_msd.h</title>
                           <description>File Name usb_msd.h Description USB MSD class definitions This file describes the MSD class specific definitions. This file is included by usb_device_msd.h and usb_host_msd.h header files. File needs ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-6AFB98D6-0272-4DED-BBAB-39EECD8DDB5F.html</loc>
         <lastmod>2024-04-16T10:23:38</lastmod>
         <title>4 USB Common Driver Interface</title>
         <description>This section describes the interface that a USB peripheral driver should implement in order to function with the Harmony USB Stack. Topics Name Description Common Interface Provides information on ...</description>
         <urls>
            <url>
               <loc>GUID-7B57189D-AB41-4208-8FBA-0C1C2C9DAE39.html</loc>
               <lastmod>2024-03-21T07:57:39</lastmod>
               <title>4.1 Common Interface</title>
               <description>The USB Driver Common Interface definition specifies the functions and their behavior that a USB Driver must implement so that the driver can be used by the MPLAB Harmony USB Host and Device ...</description>
               <urls>
                  <url>
                     <loc>GUID-DAE7BD2C-129E-4F03-BF5D-3A315C9DEF45.html</loc>
                     <lastmod>2024-03-21T07:58:45</lastmod>
                     <title>4.1.1 Driver Host Mode Client Functions</title>
                     <description>The DRV_USB_HOST_INTERFACE structure contains pointers to the USB Driverâs Host mode Client functions. These functions are only applicable when the USB module is operating as a USB Host. Along with ...</description>
                     <urls>
                        <url>
                           <loc>GUID-730EECE1-CCF2-4CC1-BB4C-C8A5F9B79D69.html</loc>
                           <lastmod>2024-03-21T07:59:38</lastmod>
                           <title>4.1.1.1 Driver Host Root Hub Interface</title>
                           <description>The USB Driver Common Interface requires the USB Driver to be operating in Host mode to provide root hub control functions. If the USB peripheral does not contain root hub features in hardware, these ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-1169429E-2CBA-49E2-8DC8-BB96E9122A9B.html</loc>
                           <lastmod>2024-03-04T11:41:06</lastmod>
                           <title>4.1.1.2 Driver Host USB Root Hub Port Interface</title>
                           <description>The rootHubPortInterface member of the DRV_USB_ROOT_HUB_INTERFACE structure should point to the USB Driver Root Hub Port functions. The data type of this member is USB_HUB_INTERFACE. This data type ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
                  <url>
                     <loc>GUID-1B002121-F8DD-4F43-B052-BF0BD1C4CEC6.html</loc>
                     <lastmod>2024-03-21T08:02:51</lastmod>
                     <title>4.1.2 Driver Device Mode Client Functions</title>
                     <description>The DRV_USB_DEVICE_INTERFACE structure contains pointers to the USB Driverâs Device mode Client Functions. These functions are only applicable when the USB module is operating as a USB Device. A USB ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-0F4E88DE-15B9-4CE8-9B09-044A80E81C4D.html</loc>
                     <lastmod>2024-03-04T11:40:43</lastmod>
                     <title>4.1.3 Driver General Client Functions</title>
                     <description>The DRV_USB_HOST_INTERFACE and the DRV_USB_DEVICE_INTERFACE structures contain pointers to the USB Driverâs General Client functions. These functions are not specific to the operation mode (Host, ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-655F3E4F-8C51-4725-9838-73500FD7AF00.html</loc>
                     <lastmod>2024-03-21T08:03:30</lastmod>
                     <title>4.1.4 Opening the Driver</title>
                     <description>The USB Host Stack and the USB Device Stack must obtain a handle to the USB Driver to access the functionality of the driver. This handle is obtained through the USB Driver Open function. The ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-364A16EE-4ABA-46E5-91D2-DD954EEEA6E1.html</loc>
                     <lastmod>2024-03-21T08:04:37</lastmod>
                     <title>4.1.5 USB Driver Host Mode Operation</title>
                     <description>The USB Driver operates or can operate in the Host mode when it is initialized for Host mode or Dual Role operation. When operating in Host mode, the USB Driver is also referred to as the Host ...</description>
                     <urls/>
                  </url>
                  <url>
                     <loc>GUID-4D46C075-0FAB-49DF-8561-98820CD2536B.html</loc>
                     <lastmod>2024-03-04T11:40:35</lastmod>
                     <title>4.1.6 USB Driver Device Mode Operation</title>
                     <description>The USB Driver operates can operate in the Device mode when it is initialized for Device mode or Dual Role operation. When operating in Device mode, the USB Driver is also referred to as the USB ...</description>
                     <urls>
                        <url>
                           <loc>GUID-D05EF720-82F8-498C-91FC-A1C08955D570.html</loc>
                           <lastmod>2024-03-04T11:40:32</lastmod>
                           <title>4.1.6.1 General Device Mode Operations</title>
                           <description>This section describes the USBCD operations such as setting event handlers and attaching and detaching the device. Handling Device Mode Driver Events The Device Layer will call the USBCD ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-A46EB55F-A77A-4E57-A921-096F2396F51A.html</loc>
                           <lastmod>2024-03-04T11:40:28</lastmod>
                           <title>4.1.6.2 Device Endpoint Operations</title>
                           <description>The UBSCD Endpoint functions allow the Driver Client to enable, disable, stall and clear the stall condition on an endpoint. The client submits requests to transmit and receive data from the USB Host ...</description>
                           <urls/>
                        </url>
                        <url>
                           <loc>GUID-58EAFD35-9DB6-4F9F-970B-DD7C7ED13C8B.html</loc>
                           <lastmod>2024-03-04T11:40:24</lastmod>
                           <title>4.1.6.3 Transferring Data to the Host</title>
                           <description>The USB Device Layer, the USBCD client, needs to transfer data to the Host in response to enumeration requests for general operation on the device. The USB uses a concept of Input Output Request ...</description>
                           <urls/>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html</loc>
         <lastmod>2022-04-04T12:20:47</lastmod>
         <title> Microchip Information</title>
         <description/>
         <urls>
            <url>
               <loc>GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html</loc>
               <lastmod>2022-07-05T07:23:16</lastmod>
               <title> The Microchip Website</title>
               <description>Microchip provides online support via our website at . This website is used to make files and information easily available to customers. Some of the content available includes:Product Support â Data ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html</loc>
               <lastmod>2022-07-05T07:27:49</lastmod>
               <title> Product Change Notification Service</title>
               <description>Microchipâs product change notification service helps keep customers current on Microchip products. Subscribers will receive email notification whenever there are changes, updates, revisions or ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-F05182E4-B102-4775-A746-1FF37F465312.html</loc>
               <lastmod>2022-07-05T07:29:30</lastmod>
               <title> Customer Support</title>
               <description>Users of Microchip products can receive assistance through several channels:Distributor or RepresentativeLocal Sales OfficeEmbedded Solutions Engineer (ESE)Technical Support Customers should contact ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-E8251634-7B15-4073-A103-5A5F128B8699.html</loc>
               <lastmod>2021-09-15T14:48:25</lastmod>
               <title> Microchip Devices Code Protection Feature</title>
               <description>Note the following details of the code protection feature on Microchip products:Microchip products meet the specifications contained in their particular Microchip Data Sheet.Microchip believes that ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html</loc>
               <lastmod>2024-06-13T17:02:57</lastmod>
               <title> Legal Notice</title>
               <description>This publication and the information herein may be used only with Microchip products, including to design, test, and integrate Microchip products with your application. Use of this information in any ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html</loc>
               <lastmod>2023-08-23T20:11:43</lastmod>
               <title> Trademarks</title>
               <description>The Microchip name and logo, the Microchip logo, Adaptec, AVR, AVR logo, AVR Freaks, BesTime, BitCloud, CryptoMemory, CryptoRF, dsPIC, flexPWR, HELDO, IGLOO, JukeBlox, KeeLoq, Kleer, LANCheck, ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-07985EED-D525-413B-AEFE-78B563328687.html</loc>
               <lastmod>2022-07-05T07:33:24</lastmod>
               <title> Quality Management System</title>
               <description>For information regarding Microchipâs Quality Management Systems, please visit </description>
               <urls/>
            </url>
            <url>
               <loc>GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html</loc>
               <lastmod>2024-04-23T08:39:10</lastmod>
               <title> Worldwide Sales and Service</title>
               <description>AMERICASASIA/PACIFICASIA/PACIFICEUROPE Corporate Office 2355 West Chandler Blvd. Chandler, AZ 85224-6199 Tel: 480-792-7200 Fax: 480-792-7277 Technical Support: Web Address: Atlanta Duluth, GA Tel: ...</description>
               <urls/>
            </url>
         </urls>
      </url>
   </urls>
</publication>
